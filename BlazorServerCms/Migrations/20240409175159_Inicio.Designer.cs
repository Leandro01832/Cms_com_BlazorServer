// <auto-generated />
using System;
using BlazorServerCms.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BlazorServerCms.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240409175159_Inicio")]
    partial class Inicio
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.23")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("BlazorServerCms.Data.UserModel", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Dominio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Permissao")
                        .HasColumnType("bit");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("business.business.Book.Estante", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Descricao")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Instante");
                });

            modelBuilder.Entity("business.business.Book.Livro", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long?>("InstanteId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsBook")
                        .HasColumnType("bit");

                    b.Property<string>("UrlNoBook")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("capitulo")
                        .HasColumnType("int");

                    b.Property<int>("pasta")
                        .HasColumnType("int");

                    b.Property<string>("url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("user")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("versiculo")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("InstanteId");

                    b.ToTable("Livro");
                });

            modelBuilder.Entity("business.business.Cliente", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Cpf")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Cliente");
                });

            modelBuilder.Entity("business.business.Content", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("Data")
                        .HasColumnType("datetime2");

                    b.Property<long>("FiltroId")
                        .HasColumnType("bigint");

                    b.Property<string>("Html")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FiltroId");

                    b.ToTable("Content");
                });

            modelBuilder.Entity("business.business.Endereco", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Bairro")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Cep")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Cidade")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Complemento")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Numero")
                        .HasColumnType("bigint");

                    b.Property<string>("Rua")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Endereco");
                });

            modelBuilder.Entity("business.business.FiltroPagina", b =>
                {
                    b.Property<long>("FiltroId")
                        .HasColumnType("bigint");

                    b.Property<long>("PaginaId")
                        .HasColumnType("bigint");

                    b.Property<int>("QuantidadePorType")
                        .HasColumnType("int");

                    b.HasKey("FiltroId", "PaginaId");

                    b.HasIndex("PaginaId");

                    b.ToTable("FiltroPagina");
                });

            modelBuilder.Entity("business.business.PageLiked", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<int?>("camadaDez")
                        .HasColumnType("int");

                    b.Property<int?>("camadaNove")
                        .HasColumnType("int");

                    b.Property<int?>("camadaOito")
                        .HasColumnType("int");

                    b.Property<int?>("camadaSeis")
                        .HasColumnType("int");

                    b.Property<int?>("camadaSete")
                        .HasColumnType("int");

                    b.Property<int>("capitulo")
                        .HasColumnType("int");

                    b.Property<int?>("grupo")
                        .HasColumnType("int");

                    b.Property<int>("indice")
                        .HasColumnType("int");

                    b.Property<int?>("subgrupo")
                        .HasColumnType("int");

                    b.Property<int>("substory")
                        .HasColumnType("int");

                    b.Property<int?>("subsubgrupo")
                        .HasColumnType("int");

                    b.Property<string>("user")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("verso")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("PageLiked");
                });

            modelBuilder.Entity("business.business.Pergunta", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("FiltroId")
                        .HasColumnType("bigint");

                    b.Property<string>("Questao")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResponseChatGpt")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FiltroId");

                    b.ToTable("Pergunta");
                });

            modelBuilder.Entity("business.business.Rota", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Nome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Registrado")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Rota");
                });

            modelBuilder.Entity("business.business.savedFolder", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("FiltroId")
                        .HasColumnType("bigint");

                    b.Property<string>("user")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FiltroId");

                    b.ToTable("savedFolder");
                });

            modelBuilder.Entity("business.business.Segue", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("seguidor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("seguindo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Segue");
                });

            modelBuilder.Entity("business.business.UserResponse", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<long?>("LivroId")
                        .HasColumnType("bigint");

                    b.Property<int>("capitulo")
                        .HasColumnType("int");

                    b.Property<bool>("exempoloR1")
                        .HasColumnType("bit");

                    b.Property<bool>("exempoloR10")
                        .HasColumnType("bit");

                    b.Property<bool>("exempoloR2")
                        .HasColumnType("bit");

                    b.Property<bool>("exempoloR3")
                        .HasColumnType("bit");

                    b.Property<bool>("exempoloR4")
                        .HasColumnType("bit");

                    b.Property<bool>("exempoloR5")
                        .HasColumnType("bit");

                    b.Property<bool>("exempoloR6")
                        .HasColumnType("bit");

                    b.Property<bool>("exempoloR7")
                        .HasColumnType("bit");

                    b.Property<bool>("exempoloR8")
                        .HasColumnType("bit");

                    b.Property<bool>("exempoloR9")
                        .HasColumnType("bit");

                    b.Property<int>("pasta")
                        .HasColumnType("int");

                    b.Property<int>("resposta1")
                        .HasColumnType("int");

                    b.Property<int>("resposta10")
                        .HasColumnType("int");

                    b.Property<int>("resposta2")
                        .HasColumnType("int");

                    b.Property<int>("resposta3")
                        .HasColumnType("int");

                    b.Property<int>("resposta4")
                        .HasColumnType("int");

                    b.Property<int>("resposta5")
                        .HasColumnType("int");

                    b.Property<int>("resposta6")
                        .HasColumnType("int");

                    b.Property<int>("resposta7")
                        .HasColumnType("int");

                    b.Property<int>("resposta8")
                        .HasColumnType("int");

                    b.Property<int>("resposta9")
                        .HasColumnType("int");

                    b.Property<string>("user")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LivroId");

                    b.ToTable("UserResponse");
                });

            modelBuilder.Entity("business.Comentario", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<int>("Capitulo")
                        .HasColumnType("int");

                    b.Property<long>("IdPagina")
                        .HasColumnType("bigint");

                    b.Property<int>("Verso")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Comentario");
                });

            modelBuilder.Entity("business.Compartilhante", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Admin")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Comissao")
                        .HasColumnType("int");

                    b.Property<string>("CupomDesconto")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Data")
                        .HasColumnType("datetime2");

                    b.Property<string>("Livro")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Compartilhante");
                });

            modelBuilder.Entity("business.Filtro", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Rotas")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("StoryId")
                        .HasColumnType("bigint");

                    b.Property<string>("user")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("StoryId");

                    b.ToTable("Filtro");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Filtro");
                });

            modelBuilder.Entity("business.Group.Story", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PaginaPadraoLink")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Story");
                });

            modelBuilder.Entity("business.ImagemProduto", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("ArquivoImagem")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("ProdutoId")
                        .HasColumnType("bigint");

                    b.Property<int>("WidthImagem")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProdutoId");

                    b.ToTable("ImagemProduto");
                });

            modelBuilder.Entity("business.ItemPedido", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("PedidoId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("PrecoUnitario")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("ProdutoId")
                        .HasColumnType("bigint");

                    b.Property<int>("Quantidade")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PedidoId");

                    b.HasIndex("ProdutoId");

                    b.ToTable("ItemPedido");
                });

            modelBuilder.Entity("business.Pagina", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long?>("Comentario")
                        .HasColumnType("bigint");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContentUser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Data")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImagemContent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Rotas")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("StoryId")
                        .HasColumnType("bigint");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UltimaPasta")
                        .HasColumnType("int");

                    b.Property<int>("Versiculo")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StoryId");

                    b.ToTable("Pagina");
                });

            modelBuilder.Entity("business.Pedido", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("ClienteId")
                        .HasColumnType("bigint");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.ToTable("Pedido");
                });

            modelBuilder.Entity("business.Produto", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Descricao")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Preco")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("QuantEstoque")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Produto");
                });

            modelBuilder.Entity("business.Telefone", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("Celular")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DDD_Celular")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DDD_Telefone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Fone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Telefone");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("business.Group.CamadaDez", b =>
                {
                    b.HasBaseType("business.Filtro");

                    b.Property<long>("CamadaNoveId")
                        .HasColumnType("bigint");

                    b.HasIndex("CamadaNoveId");

                    b.HasDiscriminator().HasValue("CamadaDez");
                });

            modelBuilder.Entity("business.Group.CamadaNove", b =>
                {
                    b.HasBaseType("business.Filtro");

                    b.Property<long>("CamadaOitoId")
                        .HasColumnType("bigint");

                    b.HasIndex("CamadaOitoId");

                    b.HasDiscriminator().HasValue("CamadaNove");
                });

            modelBuilder.Entity("business.Group.CamadaOito", b =>
                {
                    b.HasBaseType("business.Filtro");

                    b.Property<long>("CamadaSeteId")
                        .HasColumnType("bigint");

                    b.HasIndex("CamadaSeteId");

                    b.HasDiscriminator().HasValue("CamadaOito");
                });

            modelBuilder.Entity("business.Group.CamadaSeis", b =>
                {
                    b.HasBaseType("business.Filtro");

                    b.Property<long>("SubSubGrupoId")
                        .HasColumnType("bigint");

                    b.HasIndex("SubSubGrupoId");

                    b.HasDiscriminator().HasValue("CamadaSeis");
                });

            modelBuilder.Entity("business.Group.CamadaSete", b =>
                {
                    b.HasBaseType("business.Filtro");

                    b.Property<long>("CamadaSeisId")
                        .HasColumnType("bigint");

                    b.HasIndex("CamadaSeisId");

                    b.HasDiscriminator().HasValue("CamadaSete");
                });

            modelBuilder.Entity("business.Group.Grupo", b =>
                {
                    b.HasBaseType("business.Filtro");

                    b.Property<long>("SubStoryId")
                        .HasColumnType("bigint");

                    b.HasIndex("SubStoryId");

                    b.HasDiscriminator().HasValue("Grupo");
                });

            modelBuilder.Entity("business.Group.SubGrupo", b =>
                {
                    b.HasBaseType("business.Filtro");

                    b.Property<long>("GrupoId")
                        .HasColumnType("bigint");

                    b.HasIndex("GrupoId");

                    b.HasDiscriminator().HasValue("SubGrupo");
                });

            modelBuilder.Entity("business.Group.SubStory", b =>
                {
                    b.HasBaseType("business.Filtro");

                    b.HasDiscriminator().HasValue("SubStory");
                });

            modelBuilder.Entity("business.Group.SubSubGrupo", b =>
                {
                    b.HasBaseType("business.Filtro");

                    b.Property<long>("SubGrupoId")
                        .HasColumnType("bigint");

                    b.HasIndex("SubGrupoId");

                    b.HasDiscriminator().HasValue("SubSubGrupo");
                });

            modelBuilder.Entity("business.business.Book.Livro", b =>
                {
                    b.HasOne("business.business.Book.Estante", "Instante")
                        .WithMany("livros")
                        .HasForeignKey("InstanteId");

                    b.Navigation("Instante");
                });

            modelBuilder.Entity("business.business.Content", b =>
                {
                    b.HasOne("business.Filtro", "Filtro")
                        .WithMany("Content")
                        .HasForeignKey("FiltroId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Filtro");
                });

            modelBuilder.Entity("business.business.Endereco", b =>
                {
                    b.HasOne("business.business.Cliente", "Cliente")
                        .WithOne("Endereco")
                        .HasForeignKey("business.business.Endereco", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cliente");
                });

            modelBuilder.Entity("business.business.FiltroPagina", b =>
                {
                    b.HasOne("business.Filtro", "Filtro")
                        .WithMany("Pagina")
                        .HasForeignKey("FiltroId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("business.Pagina", "Pagina")
                        .WithMany("Filtro")
                        .HasForeignKey("PaginaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Filtro");

                    b.Navigation("Pagina");
                });

            modelBuilder.Entity("business.business.Pergunta", b =>
                {
                    b.HasOne("business.Filtro", "Filtro")
                        .WithMany("Pergunta")
                        .HasForeignKey("FiltroId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Filtro");
                });

            modelBuilder.Entity("business.business.savedFolder", b =>
                {
                    b.HasOne("business.Filtro", "Filtro")
                        .WithMany("savedFolder")
                        .HasForeignKey("FiltroId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Filtro");
                });

            modelBuilder.Entity("business.business.UserResponse", b =>
                {
                    b.HasOne("business.business.Pergunta", "Pergunta")
                        .WithOne("UserResponse")
                        .HasForeignKey("business.business.UserResponse", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("business.business.Book.Livro", "Livro")
                        .WithMany("respostas")
                        .HasForeignKey("LivroId");

                    b.Navigation("Livro");

                    b.Navigation("Pergunta");
                });

            modelBuilder.Entity("business.Filtro", b =>
                {
                    b.HasOne("business.Group.Story", "Story")
                        .WithMany("Filtro")
                        .HasForeignKey("StoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Story");
                });

            modelBuilder.Entity("business.ImagemProduto", b =>
                {
                    b.HasOne("business.Produto", "Produto")
                        .WithMany("Imagem")
                        .HasForeignKey("ProdutoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Produto");
                });

            modelBuilder.Entity("business.ItemPedido", b =>
                {
                    b.HasOne("business.Pedido", "Pedido")
                        .WithMany("Itens")
                        .HasForeignKey("PedidoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("business.Produto", "Produto")
                        .WithMany("Itens")
                        .HasForeignKey("ProdutoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pedido");

                    b.Navigation("Produto");
                });

            modelBuilder.Entity("business.Pagina", b =>
                {
                    b.HasOne("business.Group.Story", "Story")
                        .WithMany("Pagina")
                        .HasForeignKey("StoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Story");
                });

            modelBuilder.Entity("business.Pedido", b =>
                {
                    b.HasOne("business.business.Cliente", "Cliente")
                        .WithMany()
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cliente");
                });

            modelBuilder.Entity("business.Produto", b =>
                {
                    b.HasOne("business.Pagina", "Pagina")
                        .WithOne("Produto")
                        .HasForeignKey("business.Produto", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pagina");
                });

            modelBuilder.Entity("business.Telefone", b =>
                {
                    b.HasOne("business.business.Cliente", "Cliente")
                        .WithOne("Telefone")
                        .HasForeignKey("business.Telefone", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cliente");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("BlazorServerCms.Data.UserModel", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("BlazorServerCms.Data.UserModel", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BlazorServerCms.Data.UserModel", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("BlazorServerCms.Data.UserModel", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("business.Group.CamadaDez", b =>
                {
                    b.HasOne("business.Group.CamadaNove", "CamadaNove")
                        .WithMany("CamadaDez")
                        .HasForeignKey("CamadaNoveId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CamadaNove");
                });

            modelBuilder.Entity("business.Group.CamadaNove", b =>
                {
                    b.HasOne("business.Group.CamadaOito", "CamadaOito")
                        .WithMany("CamadaNove")
                        .HasForeignKey("CamadaOitoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CamadaOito");
                });

            modelBuilder.Entity("business.Group.CamadaOito", b =>
                {
                    b.HasOne("business.Group.CamadaSete", "CamadaSete")
                        .WithMany("CamadaOito")
                        .HasForeignKey("CamadaSeteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CamadaSete");
                });

            modelBuilder.Entity("business.Group.CamadaSeis", b =>
                {
                    b.HasOne("business.Group.SubSubGrupo", "SubSubGrupo")
                        .WithMany("CamadaSeis")
                        .HasForeignKey("SubSubGrupoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SubSubGrupo");
                });

            modelBuilder.Entity("business.Group.CamadaSete", b =>
                {
                    b.HasOne("business.Group.CamadaSeis", "CamadaSeis")
                        .WithMany("CamadaSete")
                        .HasForeignKey("CamadaSeisId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CamadaSeis");
                });

            modelBuilder.Entity("business.Group.Grupo", b =>
                {
                    b.HasOne("business.Group.SubStory", "SubStory")
                        .WithMany("Grupo")
                        .HasForeignKey("SubStoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SubStory");
                });

            modelBuilder.Entity("business.Group.SubGrupo", b =>
                {
                    b.HasOne("business.Group.Grupo", "Grupo")
                        .WithMany("SubGrupo")
                        .HasForeignKey("GrupoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Grupo");
                });

            modelBuilder.Entity("business.Group.SubSubGrupo", b =>
                {
                    b.HasOne("business.Group.SubGrupo", "SubGrupo")
                        .WithMany("SubSubGrupo")
                        .HasForeignKey("SubGrupoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SubGrupo");
                });

            modelBuilder.Entity("business.business.Book.Estante", b =>
                {
                    b.Navigation("livros");
                });

            modelBuilder.Entity("business.business.Book.Livro", b =>
                {
                    b.Navigation("respostas");
                });

            modelBuilder.Entity("business.business.Cliente", b =>
                {
                    b.Navigation("Endereco")
                        .IsRequired();

                    b.Navigation("Telefone")
                        .IsRequired();
                });

            modelBuilder.Entity("business.business.Pergunta", b =>
                {
                    b.Navigation("UserResponse");
                });

            modelBuilder.Entity("business.Filtro", b =>
                {
                    b.Navigation("Content");

                    b.Navigation("Pagina");

                    b.Navigation("Pergunta");

                    b.Navigation("savedFolder");
                });

            modelBuilder.Entity("business.Group.Story", b =>
                {
                    b.Navigation("Filtro");

                    b.Navigation("Pagina");
                });

            modelBuilder.Entity("business.Pagina", b =>
                {
                    b.Navigation("Filtro");

                    b.Navigation("Produto");
                });

            modelBuilder.Entity("business.Pedido", b =>
                {
                    b.Navigation("Itens");
                });

            modelBuilder.Entity("business.Produto", b =>
                {
                    b.Navigation("Imagem");

                    b.Navigation("Itens");
                });

            modelBuilder.Entity("business.Group.CamadaNove", b =>
                {
                    b.Navigation("CamadaDez");
                });

            modelBuilder.Entity("business.Group.CamadaOito", b =>
                {
                    b.Navigation("CamadaNove");
                });

            modelBuilder.Entity("business.Group.CamadaSeis", b =>
                {
                    b.Navigation("CamadaSete");
                });

            modelBuilder.Entity("business.Group.CamadaSete", b =>
                {
                    b.Navigation("CamadaOito");
                });

            modelBuilder.Entity("business.Group.Grupo", b =>
                {
                    b.Navigation("SubGrupo");
                });

            modelBuilder.Entity("business.Group.SubGrupo", b =>
                {
                    b.Navigation("SubSubGrupo");
                });

            modelBuilder.Entity("business.Group.SubStory", b =>
                {
                    b.Navigation("Grupo");
                });

            modelBuilder.Entity("business.Group.SubSubGrupo", b =>
                {
                    b.Navigation("CamadaSeis");
                });
#pragma warning restore 612, 618
        }
    }
}
