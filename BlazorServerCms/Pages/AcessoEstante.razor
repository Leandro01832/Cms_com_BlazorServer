
@page "/acessoestante/{user?}"
@inject RepositoryPagina repositoryPagina
@inject IJSRuntime js
@inject NavigationManager navigation
@inject UserManager<UserModel> userManager
@layout MeuLayout


@if(user != null)
{
    <PageTitle>Estante de @user </PageTitle>
    <h3>Estante de @user</h3>
    <hr />
}
else if(livrosUser.Count != 0)
{
    <a href="#" onclick="@acessarEstante" >Todos os livros</a>
    <PageTitle>livros do cap. @livro.Livro.StandardChapter </PageTitle>
    <h3>livros do cap. @livro.Livro.StandardChapter</h3>
}
else
{
    <PageTitle>Estante </PageTitle>
    <h3>Estante</h3>
}

<input type="text" placeholder="Usuario ou capitulo" onchange="@((ChangeEventArgs e) => alterarUser(e))" />

@if (livrosUser.Count == 0 && user == null)
{
    <input  type="number" placeholder="n° do livro" @bind="indice" min="1"   />

}


@if (usuarios!.Count > 0)
{

    <div class="users">

        @foreach (var item in usuarios!)
        {
            <p>
                <a href="#" onclick="@(() => navigation.NavigateTo("/acessoestante/" + item.UserName))">
                    Usuario @item.UserName
                    <div class="circulo">
                        <center>

                            <div class="circulo2">
                                @if (item.Image != null)
                                {
                                    <img src="ImgUser/usuario-@(item.UserName)-@(item.Image)" class="ImgUser">
                                }
                                else
                                {
                                    <img src="ImgUser/padrao.jpg" class="ImgUser">

                                }
                            </div>
                        </center>
                    </div>
                </a>
            </p>
        }
    </div>
}


@if(user != null){

    @if(livro != null)
    {    
        <center>
            <a href="@livro.Livro.url" >@livro.Livro.url</a>
        </center>
    }
    else
    {
        <p>Usuario não possui livros</p>
    }

}
else{
    @if (liv != null)
    {
        <center>
            <a href="@liv.url">@liv.url</a>
        </center>
    }
}


<hr />

<a class="carousel-control-prev btn btn-dark" onclick="@anterior">
    <svg xmlns="http://www.w3.org/2000/svg" width="50" height="50" fill="currentColor" class="bi bi-chevron-double-left" viewBox="0 0 16 16">
        <path fill-rule="evenodd" d="M8.354 1.646a.5.5 0 0 1 0 .708L2.707 8l5.647 5.646a.5.5 0 0 1-.708.708l-6-6a.5.5 0 0 1 0-.708l6-6a.5.5 0 0 1 .708 0z" />
        <path fill-rule="evenodd" d="M12.354 1.646a.5.5 0 0 1 0 .708L6.707 8l5.647 5.646a.5.5 0 0 1-.708.708l-6-6a.5.5 0 0 1 0-.708l6-6a.5.5 0 0 1 .708 0z" />
    </svg>
</a>

<a class="carousel-control-next btn btn-dark" onclick="@proximo">
    <svg xmlns="http://www.w3.org/2000/svg" width="50" height="50" fill="currentColor" class="bi bi-chevron-double-right" viewBox="0 0 16 16">
        <path fill-rule="evenodd" d="M3.646 1.646a.5.5 0 0 1 .708 0l6 6a.5.5 0 0 1 0 .708l-6 6a.5.5 0 0 1-.708-.708L9.293 8 3.646 2.354a.5.5 0 0 1 0-.708z" />
        <path fill-rule="evenodd" d="M7.646 1.646a.5.5 0 0 1 .708 0l6 6a.5.5 0 0 1 0 .708l-6 6a.5.5 0 0 1-.708-.708L13.293 8 7.646 2.354a.5.5 0 0 1 0-.708z" />
    </svg>
</a>

@if(user != null)
{
    <div>
        <p> Livro @livro.Livro.BookNumber </p>
    </div>

}
else
{
    <div>
        <p> Livro @liv.BookNumber de livros.Count </p>
    </div>
}

<div class="DivPagina" style="background-color:white;">
    @{

        if (user != null || livrosUser.Count != 0)
        {
            foreach (var ind in livrosUser.OrderBy(l => l.Livro.BookNumber).ToList())
            {
                <div class="DivPag" id="DivPagina@(ind.Livro.BookNumber)">

                    @if (livro!.Livro.BookNumber == ind.Livro.BookNumber)
                    {
                        <div>
                            <span class="indice"><b>@ind.Livro.BookNumber</b> </span>
                        </div>
                        <div class="barra">
                            -
                        </div>

                    }
                    else
                    {

                        <div>
                            <span class="indices"><b>-</b> </span>
                        </div>
                        <div class="barra">
                            -
                        </div>

                    }
                </div>
            }

        }
        else
        {
            foreach (var ind in livros.OrderBy(l => l.BookNumber).ToList())
            {
                <div class="DivPag" id="DivPagina@(ind.BookNumber)">

                    @if(liv.BookNumber == ind.BookNumber)
                    {
                        <div>
                            <span class="indice"><b>@ind.BookNumber</b> </span>
                        </div>
                        <div class="barra">
                            -
                        </div>

                    }
                    else{

                        <div>
                            <span class="indices"><b>@ind.BookNumber</b> </span>
                        </div>
                        <div class="barra">
                            -
                        </div>

                    }



                </div>
            }

        }




    }
</div>

@code {
    private DemoContextFactory db = new DemoContextFactory();
    private ApplicationDbContext Context;
    List<UserModelLivro> livrosUser = new List<UserModelLivro>();
    List<UserModel> usuarios = new List<UserModel>();
    List<Livro> livros = new List<Livro>();
    [Parameter] public string? user { get; set; }
    UserModelLivro livro = null;
    Livro liv = null;
    private int indice = 1;

    protected override async Task OnParametersSetAsync()
    {
        if (user == null)
            livros = await Context.Livro!
            .OrderBy(l => l.Id)
            .ToListAsync();
        else
            livrosUser = await Context.UserModelLivro!
            .Include(ul => ul.UserModel)
            .Include(ul => ul.Livro)
            .Where(ul => ul.UserModel.UserName == user).ToListAsync();

        livro = livrosUser.FirstOrDefault()!;
        liv = livros.FirstOrDefault()!;
    }

    protected override async Task OnInitializedAsync()
    {
        Context = db.CreateDbContext(null);      

        if(user == null)
            livros = await Context.Livro!
            .OrderBy(l => l.Id)
            .ToListAsync();
        else
            livrosUser = await Context.UserModelLivro!
            .Include(ul => ul.UserModel)
            .Include(ul => ul.Livro)
            .Where(ul => ul.UserModel.UserName == user).ToListAsync();

        livro = livrosUser.FirstOrDefault()!;
        liv = livros.FirstOrDefault()!;
    }

    private void proximo()
    {
        if(user != null)
        {
            if (indice != livros.Count)
                indice++;
            else indice = 1;
            livro = livrosUser.Skip(indice - 1).FirstOrDefault()!;
        }
        else
        {
            if (indice != livrosUser.Count)
                indice++;
            else indice = 1;
            liv = livros.Skip(indice - 1).FirstOrDefault()!;
        }

    }

    private void anterior()
    {
        if (user != null)
        {
            if (indice != 1)
                indice--;
            else indice = 1;
            livro = livrosUser.Skip(indice - 1).FirstOrDefault()!;
        }
        else
        {
            if (indice != 1)
                indice--;
            else indice = 1;
            liv = livros.Skip(indice - 1).FirstOrDefault()!;
        }
    }

    private async void alterarUser(ChangeEventArgs args)
    {
        try
        {
            var num = int.Parse(args.Value!.ToString()!);
            user = null;
            livrosUser.Clear();
            livrosUser = 
            await Context.UserModelLivro!
            .Include(ul => ul.UserModel)
            .Include(ul => ul.Livro)
            .Where(ul => ul.Livro.StandardChapter == num).ToListAsync();
        }
        catch(Exception ex)
        {
            if (string.IsNullOrEmpty(args.Value!.ToString()!))
            {
                var users = userManager.Users.Where(u => u.UserName.Contains(args.Value!.ToString()!)).ToList();
                foreach (var item in users)

                    usuarios.Add(item);

                if (string.IsNullOrEmpty(args.Value!.ToString()!))
                    usuarios.Clear();
            }
        }
    }

    private void acessarEstante()
    {
        livrosUser.Clear();
        navigation.NavigateTo("/acessoestante");
    }

}
