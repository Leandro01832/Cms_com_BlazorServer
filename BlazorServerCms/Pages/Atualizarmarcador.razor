@page "/atualizarfiltro/{Id:long}"
@inject IJSRuntime? js
@inject AuthenticationStateProvider AuthenticationStateProvider
@attribute [Authorize]

<BackPage></BackPage>

<h3>Atualizar filtro</h3>


@if (exampleModel != null && exampleModel.user == user.Identity.Name)
{

    <EditForm Model="@exampleModel" OnSubmit="@HandleSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <p>
            <label>Nome:</label>
            <InputTextArea id="questao" @bind-Value="exampleModel.Nome" />
        </p>


        <button type="submit">Atualizar filtro</button>
    </EditForm>
}


@code {
    [Parameter] public long Id { get; set; }

    private Filtro exampleModel = new();

    private DemoContextFactory db = new DemoContextFactory();
    private ApplicationDbContext Context;
    private ClaimsPrincipal user = null;

    protected override async Task OnParametersSetAsync()
    {
         Context = db.CreateDbContext(null);
        var authState = await AuthenticationStateProvider
           .GetAuthenticationStateAsync();
        user = authState.User;
        exampleModel = await Context.Filtro!.FirstAsync(p => p.Id == Id);
    }


    private async void HandleSubmit()
    {
        Context.Update(exampleModel);
        await Context.SaveChangesAsync();
        await js!.InvokeAsync<object>("DarAlert", $"Filtro atualizado com sucesso!!!");
    }


}
