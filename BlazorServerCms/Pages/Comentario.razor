@page "/comentario/{capitulo:int}/{verso:int}"
@inject RepositoryPagina? repositoryPagina
@inject NavigationManager? navigation
@inject IJSRuntime? js
@layout MeuLayout

<PageTitle>Comentar </PageTitle>

<BackPage></BackPage>

<h3>Comentar</h3>

<Editor Id="contentextarea"
            Inline=false
            CloudChannel="5"
            Disable=false
        JsConfSrc="sample"
        ApiKey="m8nq39l31dv5y829ehcjsd0rciwei8crem0yubndhdgs72fd"
        ClassName="tinymce-wrapper" @bind-Value="exampleModel.Html" />
    <a href="#" onclick="@FazerComentario" class="btn btn-dark" >Adicionar comentário</a>

@{
    if (MensagemComentario != null)
    {
        @MensagemComentario
    }
    foreach (var codHtml in comentarios)
    {
        @codHtml
    }

}










@code {
    [Parameter] public int capitulo { get; set; }
    [Parameter] public int verso { get; set; }
    protected List<MarkupString> comentarios = new List<MarkupString>();
    protected string? MensagemComentario = null;
    Pagina exampleModel = new Pagina();
    Pagina Model = new Pagina();
    private DemoContextFactory db = new DemoContextFactory();
    private ApplicationDbContext Context;



    protected override async Task OnInitializedAsync()
    {
        Context = db.CreateDbContext(null);

        if(capitulo != 0)
        {
            var lst = Context.Pagina!.Include(p => p.Story)
            .Where(p => p.Story!.PaginaPadraoLink == capitulo).ToList();
            Model = lst.Skip((int)verso - 1).FirstOrDefault()!;
            List<business.Comentario> listaComentarios =
            await Context.Comentario!.Where(c => c.IdPagina == Model!.Id)
                           .OrderBy(c => c.Id)
                           .ToListAsync();
            comentarios = new List<MarkupString>();

            foreach (var item in listaComentarios)
            {
                var p = Context.Pagina!.Include(p => p.Story)
                .Where(pa => pa.Story!.PaginaPadraoLink == item.Capitulo)
                .OrderBy(pa => pa.Id)
                .Skip(item.Verso - 1).First();
                var html = await repositoryPagina
                .renderizarPagina(p);
                var comentario = new MarkupString(html + $" <hr /> <p> Capitulo {item.Capitulo} Verso {item.Verso} </p>");
                comentarios.Add(comentario);
            }
        }

    }

    protected async void FazerComentario()
    {
        var Quant = await Context.Story!.Where(st => st.Nome != "Padrao").ToListAsync();
        var Story = await Context.Story!.Include(st => st.Pagina)
        .FirstAsync(st => st.PaginaPadraoLink == 2);

        var count2 = await Context.Story.Include(str => str.Pagina).FirstAsync(str => str.Id == Story.Id);
        Pagina.entity = true;
        var pagina = new Pagina(count2)
            {
                Titulo = "Story - " + Story.Nome,
                Comentario = Model.Id,
                Html = $"<div> {exampleModel.Html} </div>"
            };
        Pagina.entity = false;

        Context.Add(pagina);
        Context.SaveChanges();
        pagina.Story.QuantComentario++;


        if (capitulo != 0)
        {
            var comentar = new business.Comentario
                {
                    IdPagina = Model.Id,
                    Capitulo = Story.PaginaPadraoLink,
                    Verso = Story.Pagina!.ToList().Count
                };
            Context.Add(comentar);
            Context.SaveChanges();
            await js!.InvokeAsync<object>("DarAlert", $"Comentário feito com sucesso!!! Compartilhe!!! \n capitulo {Story.PaginaPadraoLink} \n verso {Story.Pagina!.ToList().Count}");
            await js!.InvokeVoidAsync("history.back");
        }
        else
        {
            await js!.InvokeAsync<object>("DarAlert", $"Comentário feito com sucesso!!!");
                await js!.InvokeVoidAsync("history.back");
            
        }

    }

  

}
