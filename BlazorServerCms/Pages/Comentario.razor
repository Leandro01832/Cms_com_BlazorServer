@page "/comentario/{Id:long}"
@inject RepositoryPagina? repositoryPagina
@inject NavigationManager? navigation
@inject IJSRuntime? js
@layout MeuLayout

<PageTitle>Comentar </PageTitle>

<BackPage></BackPage>

<h3>Comentar</h3>

<input type="checkbox" id="data" name="data" @bind="Gemini" />
Utilizar Gemini?

<br />

@if (Gemini)
{
    <input type="text" placeholder="Informe prompt" @bind="prompt" />
    <br />
}
<a href="#" class="btn btn-danger" onclick"@(buscarResposta)" >Run</a>

<Editor Id="contentextarea"
Inline=false
CloudChannel="5"
Disable=false
JsConfSrc="sample"
ApiKey="m8nq39l31dv5y829ehcjsd0rciwei8crem0yubndhdgs72fd"
ClassName="tinymce-wrapper" @bind-Value="exampleModel.Html" />
<a href="#" onclick="@FazerComentario" class="btn btn-dark" >Adicionar comentário</a>

@{
    if (MensagemComentario != null)
    {
        @MensagemComentario
    }
    foreach (var codHtml in comentarios)
    {
        @codHtml
    }

}










@code {
    [Parameter] public long Id { get; set; }
    protected List<MarkupString> comentarios = new List<MarkupString>();
    protected string? MensagemComentario = null;
    Comment exampleModel = new Comment();
    private DemoContextFactory db = new DemoContextFactory();
    private ApplicationDbContext Context;

    private bool Gemini = false;
    private string prompt = "";

    protected override async Task OnInitializedAsync()
    {
        Context = db.CreateDbContext(null);

        if(Id != 0)
        {            
            List<business.Comment> listaComentarios =
            await Context.Comentario!.Where(c => c.ContentId == Id)
                           .OrderBy(c => c.Id)
                           .ToListAsync();
            comentarios = new List<MarkupString>();


            foreach (var item in listaComentarios)
            {
                var comentario = new MarkupString(item.Html + $" <hr /> ");
                comentarios.Add(comentario);
            }
        }
    }

    protected async void FazerComentario()
    {
        if (Id != 0)
        exampleModel.ContentId = Id;
        Context.Add(exampleModel);
        Context.SaveChanges();

        await js!.InvokeAsync<object>("DarAlert", $"Comentário feito com sucesso!!!");
        await js!.InvokeVoidAsync("history.back");
    }

    private async void buscarResposta()
    {
       var reposta =  await js!.InvokeAsync<object>("GeminiResponse", prompt);
    }

}
