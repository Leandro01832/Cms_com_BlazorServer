@page "/config"
@attribute [Authorize(Roles = "Admin")]
@inject NavigationManager navigation
@inject RepositoryPagina? repositoryPagina


<h3>Upload de videos do youtube do usuario</h3>

@if(Mensagem != null)
{
    <a href="/livro">livros</a>
    <a href="/story">stories</a>
    <a href="/sub-story">sub-stories</a>
    <a href="/grupo">grupos</a>
    <a href="/sub-grupo">sub-grupos</a>
    <a href="/sub-sub-grupo">sub-sub-grupos</a>
    <a href="/camadaseis">camada seis</a>
    <a href="/camadasete">camada sete</a>
    <a href="/camadaoito">camada oito</a>
    <a href="/camadanove">camada nove</a>
    <a href="/camadadez">camada dez</a>
    <p>Mensagem</p><br />
    <a class="btn btn-danger" href="/story/create" >Criar story</a>
}
else
{
    <a href="/livro">livros</a>
    <a href="/story" >stories</a>
    <a href="/sub-story">sub-stories</a>
    <a href="/grupo">grupos</a>
    <a href="/sub-grupo">sub-grupos</a>
    <a href="/sub-sub-grupo">sub-sub-grupos</a>
    <a href="/camadaseis">camada seis</a>
    <a href="/camadasete">camada sete</a>
    <a href="/camadaoito">camada oito</a>
    <a href="/camadanove">camada nove</a>
    <a href="/camadadez">camada dez</a>

    <EditForm Model="data" OnSubmit="@HandleSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
        <p>
            <label>Story:</label>
            <select @bind="data.StoryId">

                @foreach (var item in lista)
                {
                    <option value="@item.Id" id="option@(item.Id)">@item.Nome</option>
                }
            </select>
        </p>
    
        <p>
            <label>Nome:</label>
            <InputText id="Nome" @bind-Value="data.Usuario" />
        </p>

        <button type="submit">Adicionar videos</button>
    </EditForm>
}


@code {
    
    DataForm data = new DataForm();
    string Mensagem;
    List<Story> lista = new List<Story>();


    protected override async Task OnInitializedAsync()
    {
        lista = await repositoryPagina!.Context.Story!
           .Where(str => str.Nome != "Padrao" && !str.Comentario).ToListAsync();

        if (lista.Count == 0)
        {
            Mensagem = "Crie seu primeiro story!!!";

        }
        data.StoryId = lista.First().Id;
    }

    private async void HandleSubmit()
    {
        var story = await repositoryPagina!.Context.Story!.FirstAsync(str => str.Id == data.StoryId);
        var cap = story.PaginaPadraoLink;
        Pagina pag = null;
        if (data.Usuario.Contains("@"))
            data.Usuario.Replace("@", "");

        var url = $"https://www.youtube.com/@{data.Usuario}/shorts";

        var html = await repositoryPagina!.Verificar(url);

        var arr = html.Split('"');

        foreach (var texto in arr)
        {
            if (texto.Contains("/shorts/"))
            {
                var text = texto.Replace("shorts", "embed");
                text += "?autoplay=1";
                if (cap != 0)
                {
                    pag = await repositoryPagina!.Context!.Pagina!.Include(pa => pa!.Story!)
                   .FirstOrDefaultAsync(pa => pa!.Content == null &&
                   pa!.Produto! == null && pa!.Story!.PaginaPadraoLink == cap);
                    if (pag == null)
                        break;

                    pag.Content = $"<iframe width='320' height='560' src='https://www.youtube.com{text}' " +
                        "frameborder='0' title='video' allow='accelerometer; autoplay; clipboard-write; encrypted-media; " +
                        "gyroscope; picture-in-picture; web-share' allowfullscreen ></iframe>";

                    repositoryPagina!.Context.Update(pag);
                    repositoryPagina!.Context.SaveChanges();
                }
                else
                {
                    pag = await repositoryPagina!.Context.Pagina.Include(pa => pa.Story!)
                .FirstOrDefaultAsync(pa => pa!.Content == null && pa!.Produto! == null);
                    if (pag == null)
                        break;

                    
                    pag.Content = $"<iframe width='320' height='560' src='https://www.youtube.com{text}' " +
                        "frameborder='0' title='video' allow='accelerometer; autoplay; clipboard-write; encrypted-media; " +
                        "gyroscope; picture-in-picture; web-share' allowfullscreen ></iframe>";

                    repositoryPagina!.Context.Update(pag);
                    repositoryPagina!.Context.SaveChanges();
                }
            }
        }

        if (pag != null)
            Mensagem = ObterMensagem(pag.StoryId);

        if (repositoryPagina.paginas! != null)
        repositoryPagina.paginas!.RemoveAll(p => p.Story!.PaginaPadraoLink == cap);
        
        if (pag != null)
        navigation.NavigateTo($"/mensagem/{Mensagem}");
        else
            navigation.NavigateTo("/");
    }

    private string ObterMensagem(long StoryId)
    {
        var story = repositoryPagina!.Context.Story!
        .Include(str => str.Pagina!)
        .Include(str => str.Pagina!)
        .ThenInclude(str => str.Produto)
        .First(str => str.Id == StoryId);

        bool teste = false;
        foreach (var item in story.Pagina!)
            if (item.Content == null && item.Produto == null)
                teste = true;

        if (teste)
            return $"Existem paginas sem conteudo no capitulo {story.PaginaPadraoLink}";
        else
            return "Story Completo";
    }

    class DataForm
    {
        public long StoryId { get; set; }
        public string Usuario { get; set; }
    }
}
