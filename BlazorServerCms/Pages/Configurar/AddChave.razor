@page "/addchave/{Filtro:long}"
@inject IJSRuntime js
<h3>Add Chave</h3>

@if(add)
{
    <a @onclick="() => adicionar(filtro)" class="btn btn-warning" >Adicionar</a>
}
else
{
    <p>Só é possivel adicionar chave na ultima pasta</p>
}

@code
{
    [Parameter] public long? Filtro { get; set; } = null;
    private Filtro filtro;
    private DemoContextFactory db = new DemoContextFactory();
    private ApplicationDbContext Context;
    private bool add;

    protected override async Task OnParametersSetAsync()
    {
        Context = db.CreateDbContext(null);
        filtro = await Context.Filtro!
        .Include(f => f.Pagina)!
        .ThenInclude(f => f.Content)
        .FirstAsync(f => f.Id == Filtro);

        add = await verificarFiltro(filtro);
    }

    private async Task<bool> verificarFiltro(Filtro fil)
    {
        if (fil is SubStory)
        {
            var filtro = await Context.SubStory!.Include(f => f.Grupo).FirstAsync(f => f.Id == fil.Id);
            if (filtro.Grupo != null && filtro.Grupo.Count > 0)
                return false;
            else return true;
        }
        else
        if (fil is Grupo)
        {
            var filtro = await Context.Grupo!.Include(f => f.SubGrupo).FirstAsync(f => f.Id == fil.Id);
            if (filtro.SubGrupo != null && filtro.SubGrupo.Count > 0)
                return false;
            else return true;
        }
        else
        if (fil is SubGrupo)
        {
            var filtro = await Context.SubGrupo!.Include(f => f.SubSubGrupo).FirstAsync(f => f.Id == fil.Id);
            if (filtro.SubSubGrupo != null && filtro.SubSubGrupo.Count > 0)
                return false;
            else return true;
        }
        else
        if (fil is SubSubGrupo)
        {
            var filtro = await Context.SubSubGrupo!.Include(f => f.CamadaSeis).FirstAsync(f => f.Id == fil.Id);
            if (filtro.CamadaSeis != null && filtro.CamadaSeis.Count > 0)
                return false;
            else return true;
        }
        else
        if (fil is CamadaSeis)
        {
            var filtro = await Context.CamadaSeis!.Include(f => f.CamadaSete).FirstAsync(f => f.Id == fil.Id);
            if (filtro.CamadaSete != null && filtro.CamadaSete.Count > 0)
                return false;
            else return true;
        }
        else
        if (fil is CamadaSete)
        {
            var filtro = await Context.CamadaSete!.Include(f => f.CamadaOito).FirstAsync(f => f.Id == fil.Id);
            if (filtro.CamadaOito != null && filtro.CamadaOito.Count > 0)
                return false;
            else return true;
        }
        else
        if (fil is CamadaOito)
        {
            var filtro = await Context.CamadaOito!.Include(f => f.CamadaNove).FirstAsync(f => f.Id == fil.Id);
            if (filtro.CamadaNove != null && filtro.CamadaNove.Count > 0)
                return false;
            else return true;
        }
        else
        if (fil is CamadaNove)
        {
            var filtro = await Context.CamadaNove!.Include(f => f.CamadaDez).FirstAsync(f => f.Id == fil.Id);
            if (filtro.CamadaDez != null && filtro.CamadaDez.Count > 0)
                return false;
            else return true;
        }

        return true;
    }

    private async void adicionar(Filtro fil)
    {
        if(fil.Pagina!.FirstOrDefault(p => p.Content is Chave) == null)
        {
            var chave = await verificar(fil);
            if (chave is not null)
            {
                var teste = fil;
                while (teste is not null)
                {
                    if (chave is not null && teste.Pagina!.FirstOrDefault(p => p.Content is Chave) == null)
                    {
                        Context.Add(new FiltroContent { ContentId = chave.Id, FiltroId = teste.Id });
                        Context.SaveChanges();
                    }
                    teste = verificarTipo(teste);
                }
                await js!.InvokeAsync<object>("DarAlert", "Chave adicionada com sucesso.");
            }
            else 
            {
                chave = await Context.Chave
                .Include(f => f.Filtro)
                .OrderBy(f => f.Id)
                .FirstOrDefaultAsync(c => c.Filtro == null || c.Filtro.Count == 0);

                var teste = fil;

                while(teste is not null)
                {
                    if (chave is not null && teste.Pagina!.FirstOrDefault(p => p.Content is Chave) == null)
                    {
                        Context.Add(new FiltroContent { ContentId = chave.Id, FiltroId = teste.Id });
                        Context.SaveChanges();
                    }
                    teste = verificarTipo(teste);
                }
                await js!.InvokeAsync<object>("DarAlert", "Chave adicionada com sucesso.");
            }
        }
    }

    private async Task<Content?> verificar(Filtro fil)
    {
        if (fil is Grupo)
        {
            Grupo fi = (Grupo)fil;
            Filtro? filtro = await Context.SubStory!
            .Include(f => f.Pagina)!
            .ThenInclude(f => f.Content)
            .FirstAsync(f => f.Id == fi.SubStoryId);
            var fc = filtro.Pagina!.FirstOrDefault(p => p.Content is Chave);
            while(fc is null && filtro is not SubStory)
            {
                filtro = verificarTipo(filtro);
                if(filtro != null)
                fc = filtro.Pagina!.FirstOrDefault(p => p.Content is Chave);
            }

            var sub = Context.Grupo!
            .Include(f => f.Pagina)!
            .ThenInclude(f => f.Content)
            .FirstOrDefault(p => p.Pagina!.FirstOrDefault(p => fc != null && p.Content is Chave &&
             p.Content!.Id == fc.Content!.Id) != null);

            if (fc != null && sub == null)
                return fc.Content!;
            else return null;
        }
        else
        if (fil is SubGrupo)
        {
            SubGrupo fi = (SubGrupo)fil;
            Filtro? filtro = await Context.Grupo!
            .Include(f => f.Pagina)!
            .ThenInclude(f => f.Content)
            .FirstAsync(f => f.Id == fi.GrupoId);
            var fc = filtro.Pagina!.FirstOrDefault(p => p.Content is Chave);
            while (fc is null && filtro is not SubStory)
            {
                filtro = verificarTipo(filtro);
                if (filtro != null)
                    fc = filtro.Pagina!.FirstOrDefault(p => p.Content is Chave);
            }

            var sub = Context.SubGrupo!
            .Include(f => f.Pagina)!
            .ThenInclude(f => f.Content)
           .FirstOrDefault(p => p.Pagina!.FirstOrDefault(p => fc != null && p.Content is Chave &&
            p.Content!.Id == fc.Content!.Id) != null);

            if (fc != null && sub == null)
                return fc.Content!;
            else return null;
        }
        else
        if (fil is SubSubGrupo)
        {
            SubSubGrupo fi = (SubSubGrupo)fil;
            Filtro? filtro = await Context.SubGrupo!
            .Include(f => f.Pagina)!
            .ThenInclude(f => f.Content)
            .FirstAsync(f => f.Id == fi.SubGrupoId);
            var fc = filtro.Pagina!.FirstOrDefault(p => p.Content is Chave);
            while (fc is null && filtro is not SubStory)
            {
                filtro = verificarTipo(filtro);
                if (filtro != null)
                    fc = filtro.Pagina!.FirstOrDefault(p => p.Content is Chave);
            }

            var sub = Context.SubSubGrupo!
            .Include(f => f.Pagina)!
            .ThenInclude(f => f.Content)
            .FirstOrDefault(p => p.Pagina!.FirstOrDefault(p => fc != null && p.Content is Chave &&
             p.Content!.Id == fc.Content!.Id) != null);

            if (fc != null &&  sub == null)
                return fc.Content!;
            else return null;
        }
        else
        if (fil is CamadaSeis)
        {
            CamadaSeis fi = (CamadaSeis)fil;
            Filtro? filtro = await Context.SubSubGrupo!
            .Include(f => f.Pagina)
            .FirstAsync(f => f.Id == fi.SubSubGrupoId);
            var fc = filtro.Pagina!.FirstOrDefault(p => p.Content is Chave);
            while (fc is null && filtro is not SubStory)
            {
                filtro = verificarTipo(filtro);
                if (filtro != null)
                    fc = filtro.Pagina!.FirstOrDefault(p => p.Content is Chave);
            }

            var sub = Context.CamadaSeis!
            .Include(f => f.Pagina)!
            .ThenInclude(f => f.Content)
            .FirstOrDefault(p => p.Pagina!.FirstOrDefault(p => fc != null && p.Content is Chave &&
             p.Content!.Id == fc.Content!.Id) != null);

            if (fc != null && sub == null)
                return fc.Content!;
            else return null;
        }
        else
        if (fil is CamadaSete)
        {
            CamadaSete fi = (CamadaSete)fil;
            Filtro? filtro = await Context.CamadaSeis!
            .Include(f => f.Pagina)!
            .ThenInclude(f => f.Content)
            .FirstAsync(f => f.Id == fi.CamadaSeisId);
            var fc = filtro.Pagina!.FirstOrDefault(p => p.Content is Chave);
            while (fc is null && filtro is not SubStory)
            {
                filtro = verificarTipo(filtro);
                if (filtro != null)
                    fc = filtro.Pagina!.FirstOrDefault(p => p.Content is Chave);
            }

            var sub = Context.CamadaSete!
            .Include(f => f.Pagina)!
            .ThenInclude(f => f.Content)
            .FirstOrDefault(p => p.Pagina!.FirstOrDefault(p => fc != null && p.Content is Chave &&
             p.Content!.Id == fc.Content!.Id) != null);

            if (fc != null && sub == null)
                return fc.Content!;
            else return null;
        }
        else
        if (fil is CamadaOito)
        {
            CamadaOito fi = (CamadaOito)fil;
            Filtro? filtro = await Context.CamadaSete!
            .Include(f => f.Pagina)!
            .ThenInclude(f => f.Content)
            .FirstAsync(f => f.Id == fi.CamadaSeteId);
            var fc = filtro.Pagina!.FirstOrDefault(p => p.Content is Chave);
            while (fc is null && filtro is not SubStory)
            {
                filtro = verificarTipo(filtro);
                if (filtro != null)
                    fc = filtro.Pagina!.FirstOrDefault(p => p.Content is Chave);
            }

            var sub = Context.CamadaOito!
            .Include(f => f.Pagina)!
            .ThenInclude(f => f.Content)
           .FirstOrDefault(p => p.Pagina!.FirstOrDefault(p => fc != null && p.Content is Chave &&
            p.Content!.Id == fc.Content!.Id) != null);

            if (fc != null && sub == null)
                return fc.Content!;
            else return null;
        }
        else
        if (fil is CamadaNove)
        {
            CamadaNove fi = (CamadaNove)fil;
            Filtro? filtro = await Context.CamadaOito!
            .Include(f => f.Pagina)!
            .ThenInclude(f => f.Content)
            .FirstAsync(f => f.Id == fi.CamadaOitoId);
            var fc = filtro.Pagina!.FirstOrDefault(p => p.Content is Chave);
            while (fc is null && filtro is not SubStory)
            {
                filtro = verificarTipo(filtro);
                if (filtro != null)
                    fc = filtro.Pagina!.FirstOrDefault(p => p.Content is Chave);
            }

            var sub = Context.CamadaNove!
            .Include(f => f.Pagina)!
            .ThenInclude(f => f.Content)
            .FirstOrDefault(p => p.Pagina!.FirstOrDefault(p => fc != null && p.Content is Chave &&
             p.Content!.Id == fc.Content!.Id) != null);

            if (fc != null && sub == null)
                return fc.Content!;
            else return null;
        }
        else
        if (fil is CamadaDez)
        {
            CamadaDez fi = (CamadaDez)fil;
            Filtro? filtro = await Context.CamadaNove!
            .Include(f => f.Pagina)!
            .ThenInclude(f => f.Content)
            .FirstAsync(f => f.Id == fi.CamadaNoveId);
            var fc = filtro.Pagina!.FirstOrDefault(p => p.Content is Chave);
            while (fc is null && filtro is not SubStory)
            {
                filtro = verificarTipo(filtro);
                if (filtro != null)
                    fc = filtro.Pagina!.FirstOrDefault(p => p.Content is Chave);
            }

            var sub = Context.CamadaDez!
            .Include(f => f.Pagina)!
            .ThenInclude(f => f.Content)
            .FirstOrDefault(p => p.Pagina!.FirstOrDefault(p => fc != null && p.Content is Chave &&
             p.Content!.Id == fc.Content!.Id) != null);

            if (fc != null && sub == null)
                return fc.Content!;
            else return null;
        }

        return null;
    }

    private Filtro? verificarTipo(Filtro f)
    {
        if (f == null)
            return f;
        else
        if (f is CamadaDez)
        {
            CamadaDez camada = (CamadaDez)f;
            return Context.CamadaNove!
            .Include(f => f.Pagina)!
            .ThenInclude(f => f.Content)
            .First(fil => fil.Id == camada.CamadaNoveId);
        }
        else if (f is CamadaNove)
        {
            CamadaNove camada = (CamadaNove)f;
            return Context.CamadaOito!
            .Include(f => f.Pagina)!
            .ThenInclude(f => f.Content)
            .First(fil => fil.Id == camada.CamadaOitoId);
        }
        else if (f is CamadaOito)
        {
            CamadaOito camada = (CamadaOito)f;
            return Context.CamadaSete!
            .Include(f => f.Pagina)!
            .ThenInclude(f => f.Content)
            .First(fil => fil.Id == camada.CamadaSeteId);
        }
        else if (f is CamadaSete)
        {
            CamadaSete camada = (CamadaSete)f;
            return Context.CamadaSeis!
            .Include(f => f.Pagina)!
            .ThenInclude(f => f.Content)
            .First(fil => fil.Id == camada.CamadaSeisId);
        }
        else if (f is CamadaSeis)
        {
            CamadaSeis camada = (CamadaSeis)f;
            return Context.SubSubGrupo!
            .Include(f => f.Pagina)!
            .ThenInclude(f => f.Content)
            .First(fil => fil.Id == camada.SubSubGrupoId);
        }
        else if (f is SubSubGrupo)
        {
            SubSubGrupo camada = (SubSubGrupo)f;
            return Context.SubGrupo!
            .Include(f => f.Pagina)!
            .ThenInclude(f => f.Content)
            .First(fil => fil.Id == camada.SubGrupoId);
        }
        else if (f is SubGrupo)
        {
            SubGrupo camada = (SubGrupo)f;
            return Context.Grupo!
            .Include(f => f.Pagina)!
            .ThenInclude(f => f.Content)
            .First(fil => fil.Id == camada.GrupoId);
        }
        else if (f is Grupo)
        {
            Grupo camada = (Grupo)f;
            return Context.SubStory!
            .Include(f => f.Pagina)!
            .ThenInclude(f => f.Content)
            .First(fil => fil.Id == camada.SubStoryId);
        }
        else
        {
            return null;
        }

    }
}
