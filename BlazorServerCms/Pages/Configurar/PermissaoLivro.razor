@page "/permissaolivro"
@inject UserManager<UserModel> userManager
@inject IJSRuntime? js
@attribute [Authorize(Roles = "Admin")]
<h3>Permissao para acesso ao Livro</h3>

<div class="container">
    <input type="text" placeholder="Usuario" onchange="@((ChangeEventArgs e) => alterarUser(e))" />
    <br />
    <a id="acessoPaginaComInput2" href="#"
       class="btn btn-primary">
        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-search" viewBox="0 0 16 16">
            <path d="M11.742 10.344a6.5 6.5 0 1 0-1.397 1.398h-.001c.03.04.062.078.098.115l3.85 3.85a1 1 0 0 0 1.415-1.414l-3.85-3.85a1.007 1.007 0 0 0-.115-.1zM12 6.5a5.5 5.5 0 1 1-11 0 5.5 5.5 0 0 1 11 0z" />
        </svg>
    </a>
</div>
<div class="users">

    @foreach (var item in usuarios!)
    {
        <p>

            Usuario @item.user - <input type="radio" value="@item.UserModel.Permissao" onclick="@(() => alterarPermissao(item.user))" /> Permissão concedida - <a href="@item.UserModel.Dominio">@item.UserModel.Dominio</a>
                
            
        </p>
    }
</div>

@code {
    List<IdentityUserImage> usuarios = new List<IdentityUserImage>();

    private void alterarUser(ChangeEventArgs args)
    {
        var users = userManager.Users.Where(u => u.UserName.Contains(args.Value!.ToString()!) && u.Dominio != null).ToList();
        foreach (var item in users)

            usuarios.Add(new IdentityUserImage { user = item.UserName, UserModel = item });

        if (string.IsNullOrEmpty(args.Value!.ToString()!))
            usuarios.Clear();
    }

    private async void alterarPermissao(string user)
    {
        var usuario = await userManager.Users.FirstAsync(u => u.UserName == user);
        usuario.Permissao = !usuario.Permissao;
        var result = await userManager.UpdateAsync(usuario);
        if (result.Succeeded)
            await js!.InvokeAsync<object>("DarAlert", "Permissão alterada com sucesso");
           
    }

    private class IdentityUserImage
    {
        public string? user { get; set; }
        public UserModel UserModel { get; set; }
    }
}
