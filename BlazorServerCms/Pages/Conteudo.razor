@page "/conteudo"
@page "/conteudo/{Id:long}"
@layout LayoutContent
@inject RepositoryPagina repositoryPagina
@inject NavigationManager navigation

@if(f != null)
{
    <a onclick="@(() => { navigation.NavigateTo($"/{c.UserModel.UserName}"); })"> @c.UserModel.UserName </a>
    <br />
    <a onclick="@(() => { acessar(f); })" > @f.Nome </a>
}
else if (c != null)
{
    <a onclick="@(() => { navigation.NavigateTo($"/{c.UserModel.UserName}"); })"> @c.UserModel.UserName </a>
}
@if(c != null)
{
    if(capitulo == null){
        <input type="number" placeholder="Capitulo" @bind="cap" />
        <a onclick="@filtrar" >Filtrar</a>

    }
    else{
        <a class="btn btn-primary" onclick="@generalizar" >Capitulo @cap X</a>

    }
    <center>
        @markup
    </center>

}
else
{
    <p>No momento não existe conteudo... Aguarde!!!</p>
}

<a class="carousel-control-prev btn btn-dark" onclick="@anterior">
    <svg xmlns="http://www.w3.org/2000/svg" width="50" height="50" fill="currentColor" class="bi bi-chevron-double-left" viewBox="0 0 16 16">
        <path fill-rule="evenodd" d="M8.354 1.646a.5.5 0 0 1 0 .708L2.707 8l5.647 5.646a.5.5 0 0 1-.708.708l-6-6a.5.5 0 0 1 0-.708l6-6a.5.5 0 0 1 .708 0z" />
        <path fill-rule="evenodd" d="M12.354 1.646a.5.5 0 0 1 0 .708L6.707 8l5.647 5.646a.5.5 0 0 1-.708.708l-6-6a.5.5 0 0 1 0-.708l6-6a.5.5 0 0 1 .708 0z" />
    </svg>
</a>

<a class="carousel-control-next btn btn-dark" onclick="@proximo">
    <svg xmlns="http://www.w3.org/2000/svg" width="50" height="50" fill="currentColor" class="bi bi-chevron-double-right" viewBox="0 0 16 16">
        <path fill-rule="evenodd" d="M3.646 1.646a.5.5 0 0 1 .708 0l6 6a.5.5 0 0 1 0 .708l-6 6a.5.5 0 0 1-.708-.708L9.293 8 3.646 2.354a.5.5 0 0 1 0-.708z" />
        <path fill-rule="evenodd" d="M7.646 1.646a.5.5 0 0 1 .708 0l6 6a.5.5 0 0 1 0 .708l-6 6a.5.5 0 0 1-.708-.708L13.293 8 7.646 2.354a.5.5 0 0 1 0-.708z" />
    </svg>
</a>

@code {

    List<UserContent> content = new List<UserContent>();
    UserContent c = null;
    Filtro f = null;
    Story s = null;
    private MarkupString markup;
    private DemoContextFactory db = new DemoContextFactory();
    private ApplicationDbContext Context;
    int? cap = 1;
    int? capitulo = 1;
    int? indice = null;
    long? filtro = null;

    [Parameter] public long? Id { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        if (Id == null)
            c = content.First();
        else
            c = content.First(co => co.Id == Id);

        markup = new MarkupString(c.Html);

    }

    protected override async Task OnInitializedAsync()
    {
        Context = db.CreateDbContext(null);
        content = randomizar( repositoryPagina.Conteudo.OfType<UserContent>()
        .Where(c => c.Data > DateTime.Now.AddDays(-repositoryPagina.dias))
        .OrderBy(co => co.Id).ToList());

        indice = 1;
    }

    private void filtrar()
    {
        capitulo = cap;
        var story = repositoryPagina.stories.First(str => str.PaginaPadraoLink == cap);
        content = randomizar( repositoryPagina.Conteudo.OfType<UserContent>()
        .Where(c => c.StoryId == story.Id &&
        c.Data > DateTime.Now.AddDays(-repositoryPagina.dias))
        .OrderBy(co => co.Id).ToList());
    }

    private void generalizar()
    {
        capitulo = null;
        content = randomizar( repositoryPagina.Conteudo.OfType<UserContent>()
        .Where(c => c.Data > DateTime.Now.AddDays(-repositoryPagina.dias))
        .OrderBy(co => co.Id).ToList());
    }

    private void proximo(long Id)
    {
        var index = content.IndexOf(c);
        c = content.Skip(index + 1).FirstOrDefault()!;
        navigation.NavigateTo($"/content/{c.Id}");

    }

    private void anterior(long Id)
    {
        var index = content.IndexOf(c);
        c = content.Skip(index - 1).FirstOrDefault()!;
        navigation.NavigateTo($"/content/{c.Id}");
    }

    private void acessar(Filtro fi)
    {
        filtro = fi.Id;
        var url = retornarUrl();

        navigation.NavigateTo($"{url}");
    }

    private List<UserContent> randomizar(List<UserContent> lista)
    {
        List<UserContent> retorno = new List<UserContent>();
        while(lista.Count != 0){
            var indice = repositoryPagina.random.Next(0, lista.Count - 1);
            retorno.Add(lista[indice]);
            lista.Remove(lista[indice]);
        }

        return retorno;
    }

    private string retornarUrl()
    {
        string url = null;
        if (filtro != null)
            url = $"/Renderizar/{repositoryPagina.CapituloLivro}/{indice}/0/11/0/0/0/dominio/{c.UserModel.HashUserName}/comp/comp/comp/comp/comp/comp/{filtro}";          
        else
            url = $"/Renderizar/{repositoryPagina.CapituloLivro}/{indice}/0/11/0/0/0/dominio/{c.UserModel.HashUserName}/comp/comp/comp/comp/comp/comp";
        return url;
    }


}
