@page "/conteudo"
@page "/conteudo/{Id:long}"
@layout LayoutContent
@inject RepositoryPagina repositoryPagina
@inject NavigationManager navigation
@inject IJSRuntime js

<div class="menu">
    <a href="/" class="btn btn-primary" data-3>
        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-house" viewBox="0 0 16 16">
            <path d="M8.707 1.5a1 1 0 0 0-1.414 0L.646 8.146a.5.5 0 0 0 .708.708L2 8.207V13.5A1.5 1.5 0 0 0 3.5 15h9a1.5 1.5 0 0 0 1.5-1.5V8.207l.646.647a.5.5 0 0 0 .708-.708L13 5.793V2.5a.5.5 0 0 0-.5-.5h-1a.5.5 0 0 0-.5.5v1.293L8.707 1.5ZM13 7.207V13.5a.5.5 0 0 1-.5.5h-9a.5.5 0 0 1-.5-.5V7.207l5-5 5 5Z" />
        </svg>
    </a>

    @if(f != null)
    {
        <a onclick="@(() => { navigation.NavigateTo($"/{c.UserModel.UserName}"); })"> @c.UserModel.UserName </a>
        <br />
        <a onclick="@(() => { acessar(f); })" > @f.Nome </a>
    }
    else if (c != null)
    {
        <a onclick="@(() => { navigation.NavigateTo($"/{c.UserModel.UserName}"); })"> @c.UserModel.UserName </a>
    }
</div>
@if(c != null)
{
    <div class="content">

        @if(capitulo == null){
            <input type="number" placeholder="Filtrar por capitulo" @bind="cap" />
            <a onclick="@filtrar" >Filtrar</a>

        }
        else{
            <a class="btn btn-primary" onclick="@generalizar" >Capitulo @cap X</a>

        }
        <div style="text-align:center; width:100%;">
            @markup
        </div>
    </div>

}
else
{
    <p>No momento não existe conteudo... Aguarde!!!</p>
}

<a class="prev" onclick="@anterior">
    <svg xmlns="http://www.w3.org/2000/svg" width="50" height="50" fill="currentColor" class="bi bi-chevron-double-left" viewBox="0 0 16 16">
        <path fill-rule="evenodd" d="M8.354 1.646a.5.5 0 0 1 0 .708L2.707 8l5.647 5.646a.5.5 0 0 1-.708.708l-6-6a.5.5 0 0 1 0-.708l6-6a.5.5 0 0 1 .708 0z" />
        <path fill-rule="evenodd" d="M12.354 1.646a.5.5 0 0 1 0 .708L6.707 8l5.647 5.646a.5.5 0 0 1-.708.708l-6-6a.5.5 0 0 1 0-.708l6-6a.5.5 0 0 1 .708 0z" />
    </svg>
</a>

<a class="prox" onclick="@proximo">
    <svg xmlns="http://www.w3.org/2000/svg" width="50" height="50" fill="currentColor" class="bi bi-chevron-double-right" viewBox="0 0 16 16">
        <path fill-rule="evenodd" d="M3.646 1.646a.5.5 0 0 1 .708 0l6 6a.5.5 0 0 1 0 .708l-6 6a.5.5 0 0 1-.708-.708L9.293 8 3.646 2.354a.5.5 0 0 1 0-.708z" />
        <path fill-rule="evenodd" d="M7.646 1.646a.5.5 0 0 1 .708 0l6 6a.5.5 0 0 1 0 .708l-6 6a.5.5 0 0 1-.708-.708L13.293 8 7.646 2.354a.5.5 0 0 1 0-.708z" />
    </svg>
</a>

@code {

    List<UserContent> content = new List<UserContent>();
    UserContent c = null;
    Filtro f = null;
    Story s = null;
    private MarkupString markup;
    private DemoContextFactory db = new DemoContextFactory();
    private ApplicationDbContext Context;
    int? cap = null;
    int? capitulo = null;
    int? indice = null;
    long? filtro = null;

    [Parameter] public long? Id { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        if (Id == null)
            c = content.First();
        else
            c = content.First(co => co.Id == Id);

        markup = new MarkupString(c.Html);

    }

    protected override async Task OnInitializedAsync()
    {
        Context = db.CreateDbContext(null);
        content = randomizar( RepositoryPagina.Conteudo.OfType<UserContent>()
        .Where(c => c.Data > DateTime.Now.AddDays(-repositoryPagina.dias))
        .OrderBy(co => co.Id).ToList());

        indice = 1;
    }

    private async void filtrar()
    {
        if(cap != null)
        {

            capitulo = cap;
            var story = RepositoryPagina.stories.First(str => str.PaginaPadraoLink == cap);
            content = randomizar( RepositoryPagina.Conteudo.OfType<UserContent>()
            .Where(c => c.StoryId == story.Id &&
            c.Data > DateTime.Now.AddDays(-repositoryPagina.dias))
            .OrderBy(co => co.Id).ToList());
        }
        else        
            await js!.InvokeAsync<object>("DarAlert", "Informe o numero do capitulo para filtrar.");


    }

    private void generalizar()
    {
        capitulo = null;
        content = randomizar( RepositoryPagina.Conteudo.OfType<UserContent>()
        .Where(c => c.Data > DateTime.Now.AddDays(-repositoryPagina.dias))
        .OrderBy(co => co.Id).ToList());
    }

    private void proximo()
    {
        var index = content.IndexOf(c);
        if(index + 1 <= content.Count )
        {
            c = content.Skip(index + 1).FirstOrDefault()!;
            navigation.NavigateTo($"/conteudo/{c.Id}");

        }
        else
        {
            content = randomizar(content);
            c = content.FirstOrDefault()!;
            navigation.NavigateTo($"/conteudo/{c.Id}");
        }

    }

    private void anterior()
    {
        var index = content.IndexOf(c);
        if(index > 0)
        {
            c = content.Skip(index - 1).FirstOrDefault()!;
            colocarAutoPlay(c.Html);
            navigation.NavigateTo($"/conteudo/{c.Id}");
        }
        else
        {
            content = randomizar(content);
            c = content.LastOrDefault()!;
            colocarAutoPlay(c.Html);
            navigation.NavigateTo($"/conteudo/{c.Id}");
        }
    }

    private void acessar(Filtro fi)
    {
        filtro = fi.Id;
        var url = retornarUrl();

        navigation.NavigateTo($"{url}");
    }

    private List<UserContent> randomizar(List<UserContent> lista)
    {
        List<UserContent> retorno = new List<UserContent>();
        while(lista.Count != 0){
            var indice = repositoryPagina.random.Next(0, lista.Count - 1);
            retorno.Add(lista[indice]);
            lista.Remove(lista[indice]);
        }

        return retorno;
    }

    private string retornarUrl()
    {
        string url = null;
        if (filtro != null)
            url = $"/Renderizar/{repositoryPagina.CapituloLivro}/{indice}/0/11/0/0/dominio/{c.UserModel.HashUserName}/{filtro}";          
        else
            url = $"/Renderizar/{repositoryPagina.CapituloLivro}/{indice}/0/11/0/0/dominio/{c.UserModel.HashUserName}";
        return url;
    }

    private string colocarAutoPlay(string html)
    {
        if(html.Contains("youtube"))
        {

            var conteudoHtml = html;
            var arr = conteudoHtml!.Split("/");
            var id_video = "";
            for (var index = 0; index < arr.Length; index++)
            {
                if (arr[index] == "embed")
                {
                    var text = arr[index + 1];
                    var arr2 = text.Split('"');
                    id_video = arr2[0];
                    break;
                }
            }
            html = html.Replace(id_video, id_video + "?autoplay=1");
            html = html.Replace("<iframe", "<iframe" + " allow=' autoplay;' ");
            return html;
        }
        return html;
    }


}
