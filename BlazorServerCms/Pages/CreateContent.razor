@page "/createcontent"
@inject NavigationManager navigation
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime js
@inject RepositoryPagina repositoryPagina
@attribute [Authorize]

<h3>Criar conteudo</h3>     

    <Editor Id="contentextarea"
            Inline=false
            CloudChannel="5"
            Disable=false
            JsConfSrc="sample"
            ApiKey="m8nq39l31dv5y829ehcjsd0rciwei8crem0yubndhdgs72fd"
            ClassName="tinymce-wrapper" @bind-Value="exampleModel.Html" />

    <EditForm Model="@exampleModel" OnSubmit="@HandleSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        @if (lista != null)
        {
            <label>
                Classifique o conteudo
            </label>
            <select @bind="@FiltroId">

                <option value="0"> (Opcional) </option>
                @foreach (var item in lista)
                {
                    <option value="@item.Id"> @item.Nome </option>

                }
            </select>
            <br />

        }

        <button type="submit">Adicionar</button>
    </EditForm>

@code {
    private UserContent? exampleModel = new UserContent();
    private DemoContextFactory db = new DemoContextFactory();
    private ApplicationDbContext Context;
    private List<Filtro> lista = null;
    private long FiltroId;
    private ClaimsPrincipal user = null;
    private Story story = null;

    protected override async Task OnInitializedAsync()
    {
        Context = db.CreateDbContext(null);
        var authState = await AuthenticationStateProvider
           .GetAuthenticationStateAsync();
        user = authState.User;

        var usermodel = await Context.Users
                .Include(u => u.Pastas)!
                .ThenInclude(u => u.Filtro)!
                .Include(u => u.PastaSalvas)!
                .ThenInclude(u => u.PastaSalva)!
                .FirstOrDefaultAsync(u => u.UserName == user.Identity.Name)!;

        
            story = Context.Story!.Include(str => str.Filtro).First(str => str.Id == repositoryPagina.CapituloLivro);
            lista = usermodel.Pastas.Select(p => p.Filtro).ToList();
        
    }

    private async void HandleSubmit()
    {
        

        var u = Context.Users.First(u => u.UserName == user.Identity!.Name);
        exampleModel.UserModelId = u.Id;
        await Context.AddAsync(exampleModel);
        await Context.SaveChangesAsync();

        await js!.InvokeAsync<object>("DarAlert", $"Conteudo criado com sucesso");
        navigation.NavigateTo("/");

    }
}
