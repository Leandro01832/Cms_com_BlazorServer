@page "/camadadez/edit/{Id:long}"
@inject NavigationManager navigation
@inject RepositoryPagina repositoryPagina
@attribute [Authorize(Roles = "Admin")]

<EditForm Model="@exampleModel" OnSubmit="@HandleSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <p>
        <label>Nome:</label>
        <InputText id="Nome" @bind-Value="exampleModel.Nome" />
    </p>
    <p>
        <label>Story:</label>
        <select @bind="StoryId">
            @foreach (var item in lista)
            {
                <option value="@item.Id" id="option@(item.Id)">@item.Nome</option>
            }
        </select>
    </p>
    <p>
        <label>Sub-Story:</label>
        <select @bind="SubStoryId">
            @foreach (var item in SubStory!.Where(sub => sub.StoryId == StoryId))
            {
                <option value="@item.Id" id="option@(item.Id)">@item.Nome</option>
            }
        </select>
    </p>
    <p>
        <label>Grupo:</label>
        <select @bind="GrupoId">
            @foreach (var item in Grupo!.Where(sub => sub.SubStoryId == SubStoryId))
            {
                <option value="@item.Id" id="option@(item.Id)">@item.Nome</option>
            }
        </select>
    </p>
    <p>
        <label>Sub-Grupo:</label>
        <select @bind="SubGrupoId">
            @foreach (var item in SubGrupo!.Where(sub => sub.GrupoId == GrupoId))
            {
                <option value="@item.Id" id="option@(item.Id)">@item.Nome</option>
            }
        </select>
    </p>
    <p>
        <label>Sub-Sub-Grupo:</label>
        <select @bind="SubSubGrupoId">
            @foreach (var item in SubSubGrupo!.Where(sub => sub.SubGrupoId == SubGrupoId))
            {
                <option value="@item.Id" id="option@(item.Id)">@item.Nome</option>
            }
        </select>
    </p>
    <p>
        <label>Camada Seis:</label>
        <select @bind="CamadaSeisId">
            @foreach (var item in CamadaSeis!.Where(sub => sub.SubSubGrupoId == SubSubGrupoId))
            {
                <option value="@item.Id" id="option@(item.Id)">@item.Nome</option>
            }
        </select>
    </p>
    <p>
        <label>Camada Sete:</label>
        <select @bind="CamadaSeteId">
            @foreach (var item in CamadaSete!.Where(sub => sub.CamadaSeisId == CamadaSeisId))
            {
                <option value="@item.Id" id="option@(item.Id)">@item.Nome</option>
            }
        </select>
    </p>
    <p>
        <label>Camada Oito:</label>
        <select @bind="CamadaOitoId">
            @foreach (var item in CamadaOito!.Where(sub => sub.CamadaSeteId == CamadaSeteId))
            {
                <option value="@item.Id" id="option@(item.Id)">@item.Nome</option>
            }
        </select>
    </p>
    <p>
        <label>Camada Nove:</label>
        <select @bind="exampleModel.CamadaNoveId">
            @foreach (var item in CamadaNove!.Where(sub => sub.CamadaOitoId == CamadaOitoId))
            {
                <option value="@item.Id" id="option@(item.Id)">@item.Nome</option>
            }
        </select>
    </p>
    

    <button type="submit">Alterar</button>
</EditForm>

@code {
    
    private CamadaDez exampleModel = new();
    
    long StoryId = 0;
    long SubStoryId = 0;
    long GrupoId = 0;
    long SubGrupoId = 0;
    long SubSubGrupoId = 0;
    long CamadaSeisId = 0;
    long CamadaSeteId = 0;
    long CamadaOitoId = 0;
    private List<Story> lista = new List<Story>();
    public List<SubStory> SubStory = new List<SubStory>();
    public List<Grupo> Grupo = new List<Grupo>();
    public List<SubGrupo> SubGrupo = new List<SubGrupo>();
    public List<SubSubGrupo> SubSubGrupo = new List<SubSubGrupo>();
    public List<CamadaSeis> CamadaSeis = new List<CamadaSeis>();
    public List<CamadaSete> CamadaSete = new List<CamadaSete>();
    public List<CamadaOito> CamadaOito = new List<CamadaOito>();
    public List<CamadaNove> CamadaNove = new List<CamadaNove>();
    private DemoContextFactory db = new DemoContextFactory();
    private ApplicationDbContext Context;

    [Parameter]public long Id{ get; set; }

    protected async override Task OnParametersSetAsync()
    {
        Context = db.CreateDbContext(null);
        exampleModel = await Context.CamadaDez!.Include(l => l.Filtro).FirstAsync(l => l.Id == Id);
        var camadanove = await Context.CamadaNove!.FirstAsync(l => l.Id == exampleModel.CamadaNoveId);
        CamadaOitoId = camadanove.CamadaOitoId;
        var camadaoito = await Context.CamadaOito!.FirstAsync(l => l.Id == CamadaOitoId);
        CamadaSeteId = camadaoito.CamadaSeteId;
        var camadasete = await Context.CamadaSete!.FirstAsync(l => l.Id == CamadaSeteId);
        CamadaSeisId = camadasete.CamadaSeisId;
        var camadaseis = await Context.CamadaSeis!.FirstAsync(l => l.Id == CamadaSeisId);
        SubSubGrupoId = camadaseis.SubSubGrupoId;
        var subsubgrupo = await Context.SubSubGrupo!.FirstAsync(l => l.Id == SubSubGrupoId);
        SubGrupoId = subsubgrupo.SubGrupoId;
        var subgrupo = await Context.SubGrupo!.FirstAsync(l => l.Id == SubGrupoId);
        GrupoId = subgrupo.GrupoId;
        var grupo = await Context.Grupo!.FirstAsync(l => l.Id == GrupoId);
        SubStoryId = grupo.SubStoryId;
        lista = await Context.Story!
        .Where(str => str.Nome != "Padrao").ToListAsync();
        StoryId = lista.First().Id;
        SubStory = await Context.SubStory!.ToListAsync();
        Grupo = await Context.Grupo!.ToListAsync();
        SubGrupo = await Context.SubGrupo!.ToListAsync();
        SubSubGrupo = await Context.SubSubGrupo!.ToListAsync();
        CamadaSeis = await Context.CamadaSeis!.ToListAsync();
        CamadaSete = await Context.CamadaSete!.ToListAsync();
        CamadaOito = await Context.CamadaOito!.ToListAsync();
        CamadaNove = await Context.CamadaNove!.ToListAsync();
    }

    private async void HandleSubmit()
    {
        exampleModel.Filtro!.Nome = exampleModel.Nome;
        Context.Update(exampleModel);
        Context.Update(exampleModel.Filtro);
        await Context.SaveChangesAsync();
        navigation.NavigateTo("crud/camadadez");
        // Process the form
    }
}

