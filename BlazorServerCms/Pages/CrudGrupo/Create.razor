@page "/grupo/create"
@inject NavigationManager navigation
@inject IJSRuntime js

<EditForm Model="@exampleModel" OnSubmit="@HandleSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <p>
        <label>Nome:</label>
        <InputText id="Nome" @bind-Value="exampleModel.Nome" />
    </p>
    <p>
        <label>Story:</label>
        <select  @bind="StoryId">
            @foreach (var item in lista)
            {
                <option value="@item.Id" id="option@(item.Id)">@item.Nome</option>
            }
        </select>
    </p>
    <p>
        <label>Sub-Story:</label>
        <select @bind="exampleModel.SubStoryId">
            @foreach (var item in SubStory!.Where(sub => sub.StoryId == StoryId))
            {
                <option value="@item.Id" id="option@(item.Id)">@item.Nome</option>
            }
        </select>
    </p>  

    <button type="submit">Adicionar</button>
</EditForm>

@code {
    static string conexao = "Data Source=DESKTOP-7TI5J9C\\SQLEXPRESS;Initial Catalog=BlazorCms;Integrated Security=True;Connect Timeout=15;Encrypt=False;TrustServerCertificate=False";
    ApplicationDbContext contexto = new ApplicationDbContext(conexao);
    private Grupo exampleModel = new();
    long StoryId = 0;
    private List<Story> lista = new List<Story>();
    public List<SubStory> SubStory = new List<SubStory>();

    protected override async Task OnInitializedAsync()
    {
        lista = await contexto.Story!
        .Where(str => str.Nome != "Padrao").ToListAsync();
        StoryId = lista.First().Id;
        SubStory = await contexto.SubStory!.ToListAsync();
    }

    private async void HandleSubmit()
    {
        var filtro = new Filtro
            {
                Grupo = exampleModel,
                Nome = exampleModel.Nome,
                StoryId = StoryId,
                Rotas = exampleModel.Nome + ", "
            };
        await contexto.AddAsync(filtro);
        await contexto.SaveChangesAsync();
        navigation.NavigateTo("grupo");
    }
}
