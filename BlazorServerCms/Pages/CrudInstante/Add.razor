@page "/add/{Id:long}"
@inject RepositoryPagina repositoryPagina
@inject NavigationManager navigation
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<IdentityUser> userManager
@attribute [Authorize]
@inject IJSRuntime js
<h3>Definir Livro</h3>




<EditForm Model="@livro" OnSubmit="@HandleSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <select @bind="LivroId">
        <option value="0">Selecione uma opção</option>
        @{
            if (livros.Count > 0)
                foreach (var item in livros!.Where(sub => sub.InstanteId == null && sub.IsBook ||
                sub.InstanteId == null && !sub.IsBook && user.Identity!.Name == repositoryPagina.buscarAdmin()))
                {
                    if (item.IsBook)
                    {
                        <option value="@item.Id">@item.url</option>

                    }
                    else
                    {
                        <option value="@item.Id">@item.UrlNoBook</option>

                    }
                }
        }
    </select>
    
    <p>
        <label>Capitulo:</label>
        <InputNumber id="Capitulo" @bind-Value="@livro.capitulo"></InputNumber>
    </p>
    <p>
        <label>Pasta:</label>
        <InputNumber id="Pasta" @bind-Value="@livro.pasta"></InputNumber>
    </p>
    <button type="submit">Definir</button>
</EditForm>

@code {
    Livro livro = new Livro();
    List<Livro> livros = new List<Livro>();
    private long LivroId = 0;
    private DemoContextFactory db = new DemoContextFactory();
    private ApplicationDbContext Context;
    [Parameter] public long Id { get; set; }
    private Instante instante;
    private ClaimsPrincipal user;

    protected override async Task OnInitializedAsync()
    {
        Context = db.CreateDbContext(null);
        livros = await Context.Livro!.ToListAsync();

        var authState = await AuthenticationStateProvider
           .GetAuthenticationStateAsync();
        user = authState.User;

    }


    private async void HandleSubmit()
    {
        var liv = await Context.Livro!.FirstOrDefaultAsync(l => l.Id == LivroId);
        if (liv != null && livro.capitulo > 0 && livro.pasta > 0) 
        {
            livro.user = user.Identity!.Name;
            livro.InstanteId = Id;
            if (liv.IsBook) { livro.url = liv.url; livro.UrlNoBook = null; }
            else livro.UrlNoBook = liv.UrlNoBook;
            Context.Add(livro);
            await Context.SaveChangesAsync();
            navigation.NavigateTo("crud/instante/1");
        }
    }

   


}
