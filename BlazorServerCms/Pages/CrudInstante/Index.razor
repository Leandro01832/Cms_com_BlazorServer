@page "/crud/instante/{pagina:int}"
@inject NavigationManager navigation
@inject RepositoryPagina repositoryPagina
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<UserModel> userManager

    <p>
        <strong>
        Instantes do usuario <a href="/@usuario">@usuario</a>
    </strong>
     </p>
@if (camadas == null)
{
<p><em>Carregando...</em></p>
}
else if (camadas.Count == 0)
{
    <p><em>Não existem instantes...</em></p>
}
else
{
    @if (user.Identity!.IsAuthenticated)
    {
        <div>
            <a class="btn btn-success" href="instante/create">Nova instante</a>
        </div>        
    }
<table class="table">
    <thead>
        <tr>
                <th>Descrição</th>
                <th>Nº da instante</th>
            <th>Editar</th>
            <th>Adicionar</th>
        </tr>
    </thead>
    <tbody>
            @foreach (var instante in camadas)
        {
                var num = camadas.IndexOf(instante) + 1;
                <tr>
                <td>@instante.Descricao</td>
                <td>@num</td>
                    @if (user.Identity!.IsAuthenticated && instante.livros.FirstOrDefault(l => l.user == user.Identity!.Name) != null)
                    {
                    <td><a class="btn btn-primary" href="instante/edit/@instante.Id">Editar</a> </td>                        
                    }
                    @if(instante.livros.Count < 9 && user.Identity!.IsAuthenticated &&
                   instante.livros.FirstOrDefault(l => l.user == user.Identity!.Name) != null)
                    {
                        <td><a class="btn btn-primary" href="add/@instante.Id">Adicionar Livro</a> </td>                        
                    }
               
            </tr>
        }
    </tbody>
</table>

}
<div>
    <label>Lista:</label>
    <input type="number" onchange="@acessarPagina" min="1" />
    @if (user.Identity!.IsAuthenticated)
    {
        <a class="btn btn-success" href="instante/create">Nova instante</a>        
    }
</div>

@code {
    protected List<Estante> camadas = new List<Estante>();
    [Parameter] public int pagina { get; set; } = 1;
    private string usuario;
    private DemoContextFactory db = new DemoContextFactory();
    private ApplicationDbContext Context;
    private ClaimsPrincipal user;

    protected override async Task OnParametersSetAsync()
    {
        await CarregaCamadas(pagina);
    }

    protected override async Task OnInitializedAsync()
    {
        Context = db.CreateDbContext(null);
        var authState = await AuthenticationStateProvider
           .GetAuthenticationStateAsync();
        user = authState.User;
        var users = await userManager.GetUsersInRoleAsync("Admin");
        usuario = users.First().UserName;
    }

    async Task CarregaCamadas(int pag)
    {
        camadas.Clear();
        camadas.AddRange( await Context.Instante!.Include(i => i.livros)
            .Where(i => i.livros.FirstOrDefault(l => l.user == usuario) != null)
                .OrderBy(p => p.Id)
                .Skip((pag - 1) * 10)
                .Take(10)
                .ToListAsync());        
    }

    private void acessarPagina(ChangeEventArgs e)
    {
        if (!string.IsNullOrEmpty(e.Value!.ToString()) && e.Value!.ToString() != "0")
            navigation.NavigateTo($"/crud/instante/{usuario}/{e.Value!.ToString()}");
        else
            navigation.NavigateTo($"/crud/instante/{usuario}/1");
    }

}
