@page "/user-book"
@inject RepositoryPagina repositoryPagina
@inject NavigationManager navigation
@inject AuthenticationStateProvider AuthenticationStateProvider
@attribute [Authorize]
@inject IJSRuntime js
<h3>Definir Livro</h3>

<p>
    <label>Pesquisar:</label>
    <input id="url" @bind-value="Url" @bind-value:event="oninput" />
</p>


<EditForm Model="@livro" OnSubmit="@HandleSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />  
    <select @bind="livro.url">
        <option value="" >Selecione uma opção</option>
        @{
            if(Url != null)
            foreach (var item in livros!.Where(sub => sub.url.Contains(Url)))
            {
                <option value="@item.url">@item.url</option>
            }
         }
    </select>
    <p>
        <label>Capitulo:</label>
        <InputNumber id="Capitulo" @bind-Value="@livro.Capitulo"></InputNumber>
    </p>
    <p>
        <label>Pasta:</label>
        <InputNumber id="Pasta" @bind-Value="@livro.Pasta"></InputNumber>
    </p>
    <button type="submit">Definir</button>
</EditForm>

@code {
    LivroUser livro = new LivroUser();
    List<Livro> livros = new List<Livro>();
    public string? Url { get; set; }
    private DemoContextFactory db = new DemoContextFactory();
    private ApplicationDbContext Context;

    protected override async Task OnInitializedAsync()
    {
        Context = db.CreateDbContext(null);
        livros = await Context.Livro!.ToListAsync();
    }


    private async void HandleSubmit()
    {
        var authState = await AuthenticationStateProvider
           .GetAuthenticationStateAsync();
        var user = authState.User;
        InstanteUser instante = null;
        List<InstanteUser>? instantes = await Context.InstanteUser.Include(i => i.Livros)
            .Where(i => i.Livros.FirstOrDefault(l => l.user == user.Identity!.Name) != null)
            .OrderBy(l => l.Id).ToListAsync();

        if(!string.IsNullOrEmpty(livro.url) && livro.Pasta != 0 && livro.Capitulo != 0)
        {
            if(instantes.Count == 0 ||   Context.InstanteUser.Include(i => i.Livros)
                .Where(i => 
                i.Livros.FirstOrDefault(l => l.user == user.Identity!.Name) != null).OrderBy(i => i.Id).Last().Livros.Count  < 9)
            {
                            if(instantes.Count == 0)
                            {
                                instante = new InstanteUser();
                                await Context.AddAsync(instante);
                                Context.SaveChanges();

                                livro.user = user.Identity!.Name;
                                livro.InstanteUserId = instante.Id;
                                await Context.AddAsync(livro);
                                await Context.SaveChangesAsync();
                            }
                            else
                            {
                                instante = Context.InstanteUser.Include(i => i.Livros)
                                .Where(i => i.Livros.First(l => l.user == user.Identity!.Name) != null).OrderBy(i => i.Id).Last();
                                livro.user = user.Identity!.Name;
                                livro.InstanteUserId = instante.Id;
                                await Context.AddAsync(livro);
                                await Context.SaveChangesAsync();
                            }
            
                }
                else
                {
                instante = new InstanteUser();
                await Context.AddAsync(instante);
                Context.SaveChanges();

                livro.user = user.Identity!.Name;
                livro.InstanteUserId = instante.Id;
                await Context.AddAsync(livro);
                await Context.SaveChangesAsync();
                }
        }
        navigation.NavigateTo("/");
    }

   async void selecionar(Livro liv)
    {
        await js!.InvokeAsync<object>("SelecionarLivro", liv.Id);
    }

    
}
