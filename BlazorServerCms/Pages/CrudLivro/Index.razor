@page "/crud/livro/{pagina:int}"

@inherits IndexCamdaDezBase
@attribute [Authorize]
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<UserModel> userManager
@inject IJSRuntime? js



@if (camadas == null)
{
    <p><em>Carregando...</em></p>
}
else if (camadas.Length == 0)
{
    <p><em>Não existem livros cadastrados...</em></p>
}
else
{
    <div>
        <a class="btn btn-success" href="livro/create">Novo livro</a>
    </div>
    <table class="table">
        <thead>
            <tr>
                <th>Livros</th>
                <th>Capitulo</th>
                @if (admin)
                {
                    <th>Edita</th>
                    <th>Deleta</th>

                }
                <th>Estante</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var livro in camadas)
            {

                <tr>
                    <td>@livro.url</td>
                    <td>@livro.StandardChapter</td>
                    @if (admin)
                    {
                        <td><a class="btn btn-primary" href="livro/edit/@livro.Id">Editar</a> </td>
                        <td><a class="btn btn-danger" @onclick="(()=> DeletarLivro(livro.Id))">Deletar</a> </td>
                    }
                    @if (verificarLivro(livro))
                    {
                        <td><a class="btn btn-dark" @onclick="(()=> Remover(livro.Id))">Remover da minha estante</a> </td>

                    }
                    else
                    {
                        <td><a class="btn btn-warning" @onclick="(()=> Incluir(livro.Id))">Colocar na minha estante</a> </td>

                    }

                </tr>
            }
        </tbody>
    </table>

}
<div>
    <label>Lista:</label>
    <input type="number" onchange="@acessarPagina" min="1" />
    <a class="btn btn-success" href="livro/create">Novo livro</a>
</div>

@code {

    protected Livro[] camadas { get; set; }
    [Parameter] public int pagina { get; set; } = 1;
    private DemoContextFactory db = new DemoContextFactory();
    private ApplicationDbContext Context;
    private ClaimsPrincipal usuario = null;
    private UserModel user = null;
    private bool admin;

    protected override async Task OnParametersSetAsync()
    {
        await CarregaCamadas(pagina);
    }

    protected override async Task OnInitializedAsync()
    {
        Context = db.CreateDbContext(null);
        await CarregaCamadas(pagina);

        var authState = await AuthenticationStateProvider
               .GetAuthenticationStateAsync();
        usuario = authState.User;

        var u = await userManager.GetUserAsync(usuario);
        user = await Context.Users.Include(u => u.Livro).ThenInclude(u => u.Livro)
        .FirstAsync(us => us.Id == u.Id);

        admin = await userManager.IsInRoleAsync(user, "Admin");
    }

    async Task CarregaCamadas(int pag)
    {
        camadas = await Context.Livro!
        .OrderBy(p => p.StandardChapter)
               .Skip((pag - 1) * 10)
               .Take(10)
        .ToArrayAsync();
    }

    private void acessarPagina(ChangeEventArgs e)
    {
        if (!string.IsNullOrEmpty(e.Value!.ToString()) && e.Value!.ToString() != "0")
            navigation.NavigateTo($"/crud/livro/{e.Value!.ToString()}");
        else
            navigation.NavigateTo($"/crud/livro/1");
    }

    private async void Incluir(long Id)
    {
        var livro = await Context.Livro!.FirstAsync(l => l.Id == Id);

        if(user.Livro != null && user.Livro.FirstOrDefault(l => l.Livro.StandardChapter == livro.StandardChapter) == null)
        {
            user.IncluiLivro(livro);
            await Context.SaveChangesAsync();
            await js!.InvokeAsync<object>("DarAlert", $"Livro incluido com sucesso!!");
            await js!.InvokeAsync<object>("ExecutarReload", $"teste");
        }
        else
        {
            await js!.InvokeAsync<object>("DarAlert", $"Só poderá ser incluido apenas um livro para cada segmento ou capitulo");
        }
        
    }

    private async void Remover(long Id)
    {
        var obj = await Context.UserModelLivro!
        .FirstAsync(l => l.LivroId == Id && l.UserModelId == user.Id);

        Context.Remove(obj);
        await Context.SaveChangesAsync();
        await js!.InvokeAsync<object>("DarAlert", $"Livro removido com sucesso!!");
        await js!.InvokeAsync<object>("ExecutarReload", $"teste");
    }

    private bool verificarLivro(Livro livro)
    {
        var liv = user.Livro.FirstOrDefault(l => l.LivroId == livro.Id);

        if (liv != null) return true;
        else return false;
    }

}
