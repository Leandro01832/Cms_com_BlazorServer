@page "/user-book/livro1"
@inject RepositoryPagina repositoryPagina
@inject NavigationManager navigation
@inject AuthenticationStateProvider AuthenticationStateProvider
@attribute [Authorize]
@inject IJSRuntime js
<h3>Definir Livro 1</h3>

<a href="#" onclick="@(() => navigation.NavigateTo("/user-book/livro2"))" class="btn btn-primary" >Definir Livro 2</a>

<p>
    <label>Pesquisar:</label>
    <input id="url" @bind-value="Url" @bind-value:event="oninput" />
</p>


<EditForm Model="@livro" OnSubmit="@HandleSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <select @bind="livro.url">
        <option value="0">Selecione uma opção</option>
        @{
            if (Url != null)
                foreach (var item in livros!.Where(sub => sub.url.Contains(Url)))
                {
                    <option value="@item.url">@item.url</option>
                }
        }
    </select>
    <p>
        <label>Capitulo:</label>
        <InputNumber id="Capitulo" @bind-Value="@livro.Capitulo"></InputNumber>
    </p>
    <button type="submit">Definir</button>
</EditForm>

@code {
    Livro livro = new Livro();
    List<Livro> livros = new List<Livro>();
    public string? Url { get; set; }
    private DemoContextFactory db = new DemoContextFactory();
    private ApplicationDbContext Context;

    protected override async Task OnInitializedAsync()
    {
        Context = db.CreateDbContext(null);
        livros = await Context.Livro!.ToListAsync();
    }


    private async void HandleSubmit()
    {
        var authState = await AuthenticationStateProvider
           .GetAuthenticationStateAsync();
        var user = authState.User;


        var liv = await Context.Livro!.FirstOrDefaultAsync(l => l.url == livro.url);
        liv.Capitulo = livro.Capitulo;

        var userBook = await Context.UserBook.FirstOrDefaultAsync(u => u.user == user.Identity!.Name);
        if (userBook == null)
        {
            userBook = new business.business.UserBook
                {
                    LivroId = liv.Id,
                    user = user.Identity!.Name,
                    Capitulo = liv.Capitulo
                };
            var userBook1 = new business.business.UserBook1
                {
                    LivroId = liv.Id,
                    user = user.Identity!.Name,
                    Capitulo = liv.Capitulo
                };
            var userBook2 = new business.business.UserBook2
                {
                    LivroId = liv.Id,
                    user = user.Identity!.Name,
                    Capitulo = liv.Capitulo
                };
            var userBook3 = new business.business.UserBook3
                {
                    LivroId = liv.Id,
                    user = user.Identity!.Name,
                    Capitulo = liv.Capitulo
                };
            var userBook4 = new business.business.UserBook4
                {
                    LivroId = liv.Id,
                    user = user.Identity!.Name,
                    Capitulo = liv.Capitulo
                };
            var userBook5 = new business.business.UserBook5
                {
                    LivroId = liv.Id,
                    user = user.Identity!.Name,
                    Capitulo = liv.Capitulo
                };
            var userBook6 = new business.business.UserBook6
                {
                    LivroId = liv.Id,
                    user = user.Identity!.Name,
                    Capitulo = liv.Capitulo
                };
            var userBook7 = new business.business.UserBook7
                {
                    LivroId = liv.Id,
                    user = user.Identity!.Name,
                    Capitulo = liv.Capitulo
                };
            var userBook8 = new business.business.UserBook8
                {
                    LivroId = liv.Id,
                    user = user.Identity!.Name,
                    Capitulo = liv.Capitulo
                };
            var userBook9 = new business.business.UserBook9
                {
                    LivroId = liv.Id,
                    user = user.Identity!.Name,
                    Capitulo = liv.Capitulo
                };
            var userBook10 = new business.business.UserBook10
                {
                    LivroId = liv.Id,
                    user = user.Identity!.Name,
                    Capitulo = liv.Capitulo
                };
            await Context.AddAsync(userBook);
            await Context.AddAsync(userBook1);
            await Context.AddAsync(userBook2);
            await Context.AddAsync(userBook3);
            await Context.AddAsync(userBook4);
            await Context.AddAsync(userBook5);
            await Context.AddAsync(userBook6);
            await Context.AddAsync(userBook7);
            await Context.AddAsync(userBook8);
            await Context.AddAsync(userBook9);
            await Context.AddAsync(userBook10);
            await Context.SaveChangesAsync();
        }
        else
        {
            var userBook1 = new UserBook1();
            userBook1.LivroId = liv.Id;
            userBook1.user = user.Identity!.Name;
            userBook1.Capitulo = liv.Capitulo;
            Context.Update(userBook1);
            await Context.SaveChangesAsync();
        }
        navigation.NavigateTo("/user-book/livro2");
    }

    async void selecionar(Livro liv)
    {
        await js!.InvokeAsync<object>("SelecionarLivro", liv.Id);
    }


}
