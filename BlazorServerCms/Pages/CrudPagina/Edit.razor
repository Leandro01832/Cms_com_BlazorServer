@page "/pagina/edit/{Id:long}"
@inject NavigationManager navigation
@inject RepositoryPagina repositoryPagina
@attribute [Authorize(Roles = "Admin")]

<EditForm Model="@exampleModel" OnSubmit="@HandleSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <p>
        <label>Titulo:</label>
        <InputText id="Titulo" @bind-Value="exampleModel.Titulo" />
    </p>
    
    <p>
        <label>Pasta (Opcional):</label>
        <select @bind="exampleModel.SubStoryId">
            <option value="0" >Selecione uma opção</option>
            @foreach (var item in Filtro!.Where(sub => sub.StoryId == exampleModel.StoryId))
            {
                var filtros = repositoryPagina.paginas!.First(p => p.StoryId == item.StoryId).Story!.Filtro;
                var fil = filtros!.First(f => f.Id == item.Id);
                var pasta = filtros!.IndexOf(fil) + 1;
                <option value="@item.Id" id="option@(item.Id)">@item.Nome - pasta @pasta</option>
            }
        </select>
    </p>
    

    <button type="submit">Alterar</button>
</EditForm>

@code {
    private Pagina exampleModel = new();
    
    private List<Story> lista = new List<Story>();
    public List<Filtro> Filtro = new List<Filtro>();

    [Parameter]public long Id{ get; set; }

    protected async override Task OnParametersSetAsync()
    {
        exampleModel = await repositoryPagina!.Context.Pagina!.FirstAsync(l => l.Id == Id);
        lista = await repositoryPagina!.Context.Story!
           .Where(str => str.Nome != "Padrao").ToListAsync();
        Filtro = await repositoryPagina!.Context.Filtro!.ToListAsync();
    }

    private async void HandleSubmit()
    {
        repositoryPagina!.Context.Update(exampleModel);
        await repositoryPagina!.Context.SaveChangesAsync();
        navigation.NavigateTo("pagina");
        // Process the form
    }
}

