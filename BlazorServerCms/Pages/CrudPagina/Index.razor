@page "/pagina"
@inject RepositoryPagina repositoryPagina

@if (camadas == null)
{
<p><em>Carregando...</em></p>
}
else if (camadas.Length == 0)
{
<p><em>Não existem camadas cadastradas...</em></p>
    <div>
        <a class="btn btn-success" href="pagina/create">Nova camada</a>
    </div>
}
else
{
<table class="table">
    <thead>
        <tr>
            <th>Titulo</th>
            <th>Edita</th>
            <th>Deleta</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var camada in camadas)
        {
            <tr>
                <td>@camada.Titulo</td>
                <td><a class="btn btn-primary" href="pagina/edit/@camada.Id">Editar</a> </td>
                <td><a class="btn btn-danger" @onclick="(()=> DeletarCamada(camada.Id))">Deletar</a> </td>
               
            </tr>
        }
    </tbody>
</table>
<div>
    <a class="btn btn-success" href="pagina/create">Nova Camada</a>
</div>
}

@code {

    protected Pagina[] camadas { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await CarregaCamadas();
    }

    async Task CarregaCamadas()
    {
        camadas = await repositoryPagina!.Context.Pagina!.ToArrayAsync();
    }

    protected async void DeletarCamada(long Id)
    {
        var camada = await repositoryPagina!.Context.Pagina!.FirstAsync(l => l.Id == Id);
        repositoryPagina!.Context.Remove(camada);
        await repositoryPagina!.Context.SaveChangesAsync();
        await CarregaCamadas();
    }

}
