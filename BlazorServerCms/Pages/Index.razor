@page "/"
@page "/{capitulo:int}/{filtrar:int}"
@page "/{capitulo:int}/{indice}"
@page "/acesso/{indice}"
@page "/{filtrar:int}"
@page "/mensagem/{MensagemSistema}"
@using business.business.Group


@inject NavigationManager navigation
@inject RepositoryPagina repositoryPagina
@inject UserManager<UserModel> userManager
@inject IJSRuntime js
@inject ITourService TourService


<PageTitle>Instagleo</PageTitle>




@if(marcar)
{
    <h5>capitulo @repositoryPagina.CapituloLivro</h5>
}

<button class="btn btn-primary" type="button" @onclick="StartTour">Start Tour</button>



<h3>@Mensagem</h3>



@if (MensagemSistema != null)
{
    <h3>@MensagemSistema</h3>
}
<div class="info">



    <p>
        <a href="https://api.whatsapp.com/send/?phone=5532999884958" class="btn btn-success" target="_blank">
            Peça seu livro
        </a>
    </p>

    <p>
        Usuarios inscritos: @users
    </p>

    <p>
        <a data-8 href="#" onclick="@(() => navigation.NavigateTo("/createcontent"))">
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-plus-circle-fill" viewBox="0 0 16 16">
                <path d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0M8.5 4.5a.5.5 0 0 0-1 0v3h-3a.5.5 0 0 0 0 1h3v3a.5.5 0 0 0 1 0v-3h3a.5.5 0 0 0 0-1h-3z" />
            </svg>
        </a>
        <a  href="#" onclick="@(() => navigation.NavigateTo("/conteudo"))" style="margin-left: 10px;" >
            <strong>Content</strong>
        </a>
    </p>
</div>
<div data-first>

    <p style="font-family: 'League Script', cursive; font-size:large;">
        A beleza da vida se multiplica cada vez Que a gente partilha com alguém que a gente ama.
        Se você quiser multiplicar a vida Você precisa dividí-la.
    </p>

</div>


<div class="container">
    <div>
        <input type="text" placeholder="Usuario" onchange="@((ChangeEventArgs e) => alterarUser(e))" />
        <br />
        <input type="text" @bind="Query" placeholder="@placeholder" data-2 />
        <a id="acessoPaginaComInput2" onclick="@buscar"
        class="btn btn-primary">
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-search" viewBox="0 0 16 16">
                <path d="M11.742 10.344a6.5 6.5 0 1 0-1.397 1.398h-.001c.03.04.062.078.098.115l3.85 3.85a1 1 0 0 0 1.415-1.414l-3.85-3.85a1.007 1.007 0 0 0-.115-.1zM12 6.5a5.5 5.5 0 1 1-11 0 5.5 5.5 0 0 1 11 0z" />
            </svg>
        </a>
    </div>
    <div>
        <input type="checkbox"  onchange="@(() => alterarPlaceholder())" /> Marcar?
    </div>

</div>

@if (usuarios!.Count > 0)
{

    <div class="users">

        @foreach (var item in usuarios!)
        {
            <p>
                <a href="@item.user">
                    Usuario @item.user
                    <div class="circulo">
                        <center>

                            <div class="circulo2">
                                @if (item.UserModel.Image != null)
                                {
                                    <img src="ImgUser/usuario-@(item.user)-@(item.UserModel.Image)" class="ImgUser">
                                }
                                else
                                {
                                    <img src="ImgUser/padrao.jpg" class="ImgUser">

                                }
                            </div>
                        </center>
                    </div>
                </a>
            </p>
        }
    </div>
}

@if (filtros!.Count > 0)
{
    <div style="position:absolute; background-color:aliceblue; width:75%;">
        <table cellspacing="50" border="5" cellpadding="50" style="width:100%">
            <tr>
                <th>Capitulo</th>
                <th>Pasta</th>
                <th>Nome</th>
                <th></th>
            </tr>
            @foreach (var item in filtros!)
            {
                var fil = filtros2
                .Where(p => p.StoryId == item.StoryId).OrderBy(p => p.Id).ToList();
                var f = fil!.First(fi => fi.Id == item.Id);
                <tr>
                    <td>Capitulo @f.Story!.PaginaPadraoLink </td>
                    <td>Pasta @(fil!.IndexOf(f) + 1) </td>
                    <td>Pasta @f.Nome </td>

                    <td><a href="#" onclick="@(() => Acessar(item))">Acessar</a></td>
                </tr>
            }

        </table>
    </div>
}

<div class="apresentacao">


    <img src="/story.jpg" style="width:90%" />

    <div class="circuloCompartilhando">
        <center>

            <div class="circulo2Compartilhando">
                <a href="/comentario/0" >
                    Compartilhe seu comentário
                </a>
            </div>
        </center>
    </div>

    <div class="circuloCompartilhando">
        <center>

            <div class="circulo2Compartilhando">
                <a href="#">
                    Ganhe descontos, prêmios e dinheiro compartilhando!!!
                </a>
            </div>
        </center>
    </div>


</div>

<GuidedTour TourId="FormGuidedTour" OverlayEnabled="true">
    <GuidedTourStep Title="Instagleo" StepName="firstStep" TourStepSequence="1"
    ElementSelector="[data-first]">
        <span>Seja Bem-vindo ao nosso sistema de compartilhamento de paginas</span>
    </GuidedTourStep>
    <GuidedTourStep Title="acessando stories" StepName="Step2" TourStepSequence="2"
    ElementSelector="[data-2]">
        <span>Informe o capitulo 1 e acesse a primeira story</span>
    </GuidedTourStep>
    <GuidedTourStep Title="Sumario" StepName="Step3" TourStepSequence="3"
    ElementSelector="[data-3]">
        <span>No sumário você poderá ver todos os capitulos </span>
    </GuidedTourStep>
    <GuidedTourStep Title="Instante" StepName="Step4" TourStepSequence="4"
    ElementSelector="[data-4]">
        <span>
            Após acessar os stories poderá usar instantes.
            É mais uma forma  compartilhar conteudos.
            Sendo que cada instante poderá ter apenas 9 livros.
        </span>
    </GuidedTourStep>
    <GuidedTourStep Title="Plataformas" StepName="Step5" TourStepSequence="5"
    ElementSelector="[data-5]">
        <span>
            Neste link você terá acesso a todas as plataformas utilizadas pelo administrador.
        </span>
    </GuidedTourStep>
    <GuidedTourStep Title="Livro compartilhado" StepName="Step6" TourStepSequence="6"
    ElementSelector="[data-6]">
        <span>
            No livro compartilhado pode-se definir o livro e o capitulo.
            Só será necessário informar o versiculo.
        </span>
    </GuidedTourStep>
    <GuidedTourStep Title="Configurações" StepName="Step7" TourStepSequence="7"
    ElementSelector="[data-7]">
        <span>
            Somente o administrador pode acessar.
            Gerencia todo o sistema criando pastas, paginas e stories.
        </span>
    </GuidedTourStep>
    <GuidedTourStep Title="Configurações" StepName="Step8" TourStepSequence="8"
    ElementSelector="[data-8]">
        <span>
            Crie conteudos para filtros que foram criados por você
        </span>
    </GuidedTourStep>
</GuidedTour>

@code {

    [Parameter] public int? capitulo { get; set; }

    [Parameter] public string? indice { get; set; }
    [Parameter] public int? filtrar { get; set; }
    [Parameter] public string? MensagemSistema { get; set; }
    [Parameter] public string? dominio { get; set; }
    [Parameter] public string? compartilhante { get; set; }
    public string? Query { get; set; }
    public string? Usuario { get; set; }
    List<Filtro>? filtros = new List<Filtro>();
    List<Filtro>? filtros2 = new List<Filtro>();
    List<IdentityUserImage> usuarios = new List<IdentityUserImage>();
    int cap = 1;
    string? Mensagem { get; set; }
    private DemoContextFactory db = new DemoContextFactory();
    private ApplicationDbContext Context;
    private int users = 0;
    private string placeholder = "Nº do capitulo ou pesquisar";
    private bool marcar;

    public ClassArray Arr = new ClassArray();
    private Story story = null;

    int? verso = null;
    int? substory = null;
    int? grupo = null;
    int? subgrupo = null;
    int? subsubgrupo = null;
    int? camadaseis = null;
    int? camadasete = null;
    int? camadaoito = null;
    int? camadanove = null;
    int? camadadez = null;

    private string erro1 = "Voce ainda não esta compartilhando nenhum livro";


    protected override async Task OnParametersSetAsync()
    {
        try
        {
            repositoryPagina.CapituloLivro = 1;
            PatternStory padrao = null;
            string? dominio = await js.InvokeAsync<string>("retornarSubdominio", "url");

            var lista = await repositoryPagina.buscarPatternStory();

            if (dominio != null)
            {

                string? subdominio = dominio.Split('.')[0];
                padrao = lista.FirstOrDefault(i => i.Nome.Replace(" ", "").Contains(subdominio))!;
            }

            if (padrao != null) repositoryPagina.CapituloLivro = padrao.PaginaPadraoLink;
        }
        catch(Exception ex){

        }

    }

    protected override async Task OnInitializedAsync()
    {
        Context = db.CreateDbContext(null);
        var quant = await userManager.Users.ToListAsync();
        users = quant.Count;


        if (story == null)
        {
            story = await Context.Story!
                      .Include(p => p.Filtro)!
                     .ThenInclude(p => p.Pagina)!
                     .ThenInclude(p => p.Content)!
                     .FirstOrDefaultAsync(p => p.PaginaPadraoLink == repositoryPagina.CapituloLivro)!;
        }


        filtros2 = await Context.Filtro!
                .Include(f => f.Story)
                .Include(f => f.Pagina)!
                .ThenInclude(f => f.Content)
                .Where(f => f.StoryId == story.Id)
                .OrderBy(f => f.Id)
                .ToListAsync();

        filtros2.Reverse();

        if (compartilhante == null)
            compartilhante = "comp";
        if (dominio == null)
            dominio = repositoryPagina.buscarDominio();

        else if (dominio != repositoryPagina.buscarDominio())
        {
            var domi = await Context.Compartilhante!.FirstOrDefaultAsync(l => l.Livro == dominio);
            if (domi == null)
            {
                var compartilhant = new business.Compartilhante
                    {
                        Livro = dominio,
                        Data = DateTime.Now,
                        Comissao = 5
                    };
                await Context.AddAsync(compartilhant);
                await Context.SaveChangesAsync();
            }
        }

        if (dominio == null)
        {
            dominio = "dominio";
        }


        if (capitulo != null && indice != null && indice.Contains("verso"))
        {
            navigation.NavigateTo($"/renderizar/{capitulo}/{indice.Replace("verso-", "")}/1/11/0/0/0/0/{dominio}/{compartilhante}");
        }
        else if (capitulo != null && filtrar != null)
        {
            navigation.NavigateTo($"/filtro/{capitulo}/pasta-{filtrar}/0/0/0/{dominio}/{compartilhante}/0/0/0/0/0/0/0/0/0/0/1");
        }       


    }

    private async void Acessar(Filtro item)
    {
        var cap = Context.Pagina!.Include(p => p.Story).First(p => p.StoryId == item.StoryId).Story!.PaginaPadraoLink;
        var filtros = Context.Pagina!.Include(p => p.Story).ThenInclude(p => p.Filtro).First(p => p.StoryId == item.StoryId).Story!.Filtro;
        var fil = filtros!.First(f => f.Id == item.Id);
        var indiceFiltro = filtros!.IndexOf(fil) + 1;
        dominio = repositoryPagina.buscarDominio();
        navigation.NavigateTo($"/renderizar/{cap}/{indiceFiltro}/0/11/1/0/0/0/{dominio}/comp/0/0/0/0/0/0/0/0/0/0");
    }

    private async void buscar()
    {
            string prompted = await js.InvokeAsync<string>("prompt", "Informe o usuario.");
            if (!string.IsNullOrEmpty(prompted))
            {
                prompted = prompted.Replace(" ", "");
                var us = await Context.Users.FirstOrDefaultAsync(u => u.UserName == prompted);
                if (us != null)
                    compartilhante = us.HashUserName;
                else
                    compartilhante = "comp";
            }
            else
                compartilhante = "comp";
       

        if (marcar)
        {
            string? url = null;
            // Filtro[] fils = null;

            if (Query[Query.Length - 1] == ',')
                Query = Query.Replace(Query.Last().ToString(), "");
            if (Query.Contains(","))
            {
                var arr = Query.Replace(" ", "").Split(",");
                bool teste = true;

                int[] numeros = new int[arr.Length];

                for (var i = 0; i < arr.Length; i++)
                {
                    try
                    {
                        numeros[i] = int.Parse(arr[i]);
                    }
                    catch (Exception)
                    {
                        await js!.InvokeAsync<object>("DarAlert", "Informe apenas numeros separando por virgula");
                        teste = false;
                        break;
                    }
                }

                if (teste)
                {
                    for (var j = 0; j < numeros.Length; j++)
                    {
                        url = null;
                        foreach (var item in filtros2)
                        {
                            foreach (var item2 in item.Pagina)
                            {
                                if(item2.Content is Pagina)
                                {
                                    var pag = (Pagina)item2.Content;

                                    if (compartilhante == "comp")
                                    {
                                        if (pag.Versiculo == numeros[j] && url == null )
                                        {
                                            var pages = item.Pagina
                                            .Where(c => c.Content is Pagina)
                                            .OrderBy(c => c.Content.Id)
                                            .ToList();
                                            verso = pages.IndexOf(item2) + 1;
                                            var a = retornarArray(item);
                                            setarCamadas(a);
                                            url = retornarUrl();
                                            await js!.InvokeAsync<object>("AcessarSites", $"{url}");

                                        }
                                    }
                                    else
                                    {
                                        if (pag.Versiculo == numeros[j] && url == null &&
                                            item.usuarios.Count > 0)
                                        {
                                            var pages = item.Pagina
                                            .Where(c => c.Content is Pagina)
                                            .OrderBy(c => c.Content.Id)
                                            .ToList();
                                            verso = pages.IndexOf(item2) + 1;
                                            var a = retornarArray(item);
                                            setarCamadas(a);
                                            url = retornarUrl();
                                            await js!.InvokeAsync<object>("AcessarSites", $"{url}");
                                        }
                                    }
                                }
                            }
                        }
                    }
                }


            }
            else
            {
                try
                {
                    var num = int.Parse(Query);

                    foreach(var item in filtros2)
                    {
                        foreach (var item2 in item.Pagina)
                        {
                            if(item2.Content is Pagina)
                            {

                                var pag = (Pagina)item2.Content;
                                if (compartilhante == "comp")
                                {
                                    if (pag.Versiculo == num && url == null)
                                    {
                                        var pages = item.Pagina
                                        .Where(c => c.Content is Pagina)
                                        .OrderBy(c => c.Content.Id)
                                        .ToList();
                                        verso = pages.IndexOf(item2) + 1;
                                        var a = retornarArray(item);                                    
                                        setarCamadas(a);
                                        url = retornarUrl();

                                    }
                                }
                                else
                                {
                                    if (pag.Versiculo == num && url == null && item.usuarios.Count > 0)
                                    {
                                        var pages = item.Pagina
                                        .Where(c => c.Content is Pagina)
                                        .OrderBy(c => c.Content.Id)
                                        .ToList();
                                        verso = pages.IndexOf(item2) + 1;
                                        var a = retornarArray(item);                                    
                                        setarCamadas(a);
                                        url = retornarUrl();

                                    }
                                }
                            }
                        }
                    }

                    await js!.InvokeAsync<object>("AcessarSites", $"{url}");
                    url = null;
                }
                catch (Exception)
                {
                    await js!.InvokeAsync<object>("DarAlert", $"Informe apenas numeros separando por virgula");

                }
            }
        }
        else
        {
            try
            {
                cap = int.Parse(Query!);
                navigation.NavigateTo($"/renderizar/{cap}/1/1/11/0/0/0/0/{dominio}/{compartilhante}");
            }
            catch (Exception ex)
            {
                if (!string.IsNullOrEmpty(Query))
                {
                    filtros = await Context.Filtro!
                    .Include(f => f.Story)
                    .Include(f => f.usuarios)
                    .Where(f => f.Rotas!.ToLower().Contains(Query!.ToLower()) && f.usuarios.Count == 0).ToListAsync();


                    if (filtros.Count == 0)
                    {
                        var paginas = Context.Pagina.Where(r => r.Rotas.ToLower().Contains(Query.ToLower())).ToList();
                        List<Pagina> pages = new List<Pagina>();

                        foreach (var item in paginas)
                        {
                            var rotas = item.Rotas.Split(",");
                            foreach (var rota in rotas)
                                if (rota.ToLower().TrimEnd().TrimStart() == Query.ToLower().TrimEnd().TrimStart())
                                    pages.Add(item);
                        }

                        if (pages.Count == 0)
                        {
                            var rot = Context.Rota.FirstOrDefaultAsync(r => r.Nome.ToLower().Contains(Query.ToLower()));

                            if (rot == null)
                            {
                                var rota = new Rota
                                {
                                    Nome = Query.ToLower(),
                                    Registrado = false
                                };
                                Context.Add(rota);
                                await Context.SaveChangesAsync();
                            }
                        }
                        else
                        {
                            var stories = await Context.Story!.Where(str => str.Nome != "Padrao").OrderBy(st => st.Id).ToListAsync();
                            var story = stories.First(str => str.Id == paginas[0].StoryId);
                            var cap = stories.IndexOf(story) + 1;
                            navigation.NavigateTo($"/camada2/{cap}/1/1/0/11/0/0/0/{dominio}/{compartilhante}/{Query.ToLower()}");
                        }
                    }
                }
                else if (string.IsNullOrEmpty(Query))
                {
                    filtros = new List<Filtro>();
                }
                cap = 1;
            }

        }

    }

    

    private void alterarUser(ChangeEventArgs args)
    {
        var users = userManager.Users.Where(u => u.UserName.Contains(args.Value!.ToString()!)).ToList();
        foreach (var item in users)

            usuarios.Add(new IdentityUserImage { user = item.UserName, UserModel = item });

        if (string.IsNullOrEmpty(args.Value!.ToString()!))
            usuarios.Clear();
    }

    private class IdentityUserImage
    {
        public string? user { get; set; }
        public UserModel UserModel { get; set; }
    }

    private async Task StartTour()
    {
        await TourService.StartTour("FormGuidedTour");
    }

    private void alterarPlaceholder()
    {
        marcar = !marcar;
        if (marcar)
        placeholder = "Nº dos versiculos";
        else
        placeholder = "Nº do capitulo ou pesquisar";
    }

    private int?[] retornarArray(Filtro fi)
    {
        int?[] arr = null;
        if (fi is CamadaDez)
            arr = Arr.RetornarArray(story.Filtro, story, 3, (long)fi.Id, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1);
        else if (fi is CamadaNove)
            arr = Arr.RetornarArray(story.Filtro, story, 3, (long)fi.Id, 1, 1, 1, 1, 1, 1, 1, 1, 1);
        else if (fi is CamadaOito)
            arr = Arr.RetornarArray(story.Filtro, story, 3, (long)fi.Id, 1, 1, 1, 1, 1, 1, 1, 1);
        else if (fi is CamadaSete)
            arr = Arr.RetornarArray(story.Filtro, story, 3, (long)fi.Id, 1, 1, 1, 1, 1, 1, 1);
        else if (fi is CamadaSeis)
            arr = Arr.RetornarArray(story.Filtro, story, 3, (long)fi.Id, 1, 1, 1, 1, 1, 1);
        else if (fi is SubSubGrupo)
            arr = Arr.RetornarArray(story.Filtro, story, 3, (long)fi.Id, 1, 1, 1, 1, 1);
        else if (fi is SubGrupo)
            arr = Arr.RetornarArray(story.Filtro, story, 3, (long)fi.Id, 1, 1, 1, 1);
        else if (fi is Grupo)
            arr = Arr.RetornarArray(story.Filtro, story, 3, (long)fi.Id, 1, 1, 1);
        else if (fi is SubStory)
            arr = Arr.RetornarArray(story.Filtro, story, 3, (long)fi.Id, 1, 1);
        return arr;
    }

    private void setarCamadas(int?[] arr)
    {


        if (arr.Length == 10)
        {
            substory = arr[1];
            grupo = arr[2];
            subgrupo = arr[3];
            subsubgrupo = arr[4];
            camadaseis = arr[5];
            camadasete = arr[6];
            camadaoito = arr[7];
            camadanove = arr[8];
            camadadez = arr[9];
        }
    }

    private string retornarUrl()
    {
        string url = null;
        if (camadadez != null)
            url = $"/camada10/{story.Id}/{substory}/{grupo}/{subgrupo}/{subsubgrupo}/{camadaseis}/{camadasete}/{camadaoito}/{camadanove}/{camadadez}/{verso}/0/11/1/0/0/dominio/{compartilhante}/0/0/0/0/0/0/0/0/0/0";
        else if (camadanove != null)
            url = $"/camada9/{story.Id}/{substory}/{grupo}/{subgrupo}/{subsubgrupo}/{camadaseis}/{camadasete}/{camadaoito}/{camadanove}/{verso}/0/11/1/0/0/dominio/{compartilhante}/0/0/0/0/0/0/0/0/0/0";
        else if (camadaoito != null)
            url = $"/camada8/{story.Id}/{substory}/{grupo}/{subgrupo}/{subsubgrupo}/{camadaseis}/{camadasete}/{camadaoito}/{verso}/0/11/1/0/0/dominio/{compartilhante}/0/0/0/0/0/0/0/0/0/0";
        else if (camadasete != null)
            url = $"/camada7/{story.Id}/{substory}/{grupo}/{subgrupo}/{subsubgrupo}/{camadaseis}/{camadasete}/{verso}/0/11/1/0/0/dominio/{compartilhante}/0/0/0/0/0/0/0/0/0/0";
        else if (camadaseis != null)
            url = $"/camada6/{story.Id}/{substory}/{grupo}/{subgrupo}/{subsubgrupo}/{camadaseis}/{verso}/0/11/1/0/0/dominio/{compartilhante}/0/0/0/0/0/0/0/0/0/0";
        else if (subsubgrupo != null)
            url = $"/camada5/{story.Id}/{substory}/{grupo}/{subgrupo}/{subsubgrupo}/{verso}/0/11/1/0/0/dominio/{compartilhante}/0/0/0/0/0/0/0/0/0/0";
        else if (subgrupo != null)
            url = $"/camada4/{story.Id}/{substory}/{grupo}/{subgrupo}/{verso}/0/11/1/0/0/dominio/{compartilhante}/0/0/0/0/0/0/0/0/0/0";
        else if (grupo != null)
            url = $"/camada3/{story.Id}/{substory}/{grupo}/{verso}/0/11/1/0/0/dominio/{compartilhante}/0/0/0/0/0/0/0/0/0/0";
        else if (substory != null)
            url = $"/camada2/{story.Id}/{substory}/{verso}/0/11/1/0/0/dominio/{compartilhante}/0/0/0/0/0/0/0/0/0/0";
        else
            url = $"/Renderizar/{story.Id}/{verso}/0/11/0/0/0/dominio/{compartilhante}/0/0/0/0/0/0/0/0/0/0";
        return url;
    }

}