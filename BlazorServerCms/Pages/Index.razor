@page "/"
@page "/info/{dominio}/{compartilhante}"
@page "/{capitulo:int}/{filtrar:int}"
@page "/{capitulo:int}/{indice}"
@page "/acesso/{indice}"
@page "/{filtrar:int}"
@page "/mensagem/{MensagemSistema}"




@inject NavigationManager navigation
@inject RepositoryPagina repositoryPagina
@inject UserManager<UserModel> userManager
@inject IJSRuntime js


    <PageTitle>Instagleo</PageTitle>
    



<h3>@Mensagem</h3>



@if (MensagemSistema != null)
{
    <h3>@MensagemSistema</h3>    
}   
<div>

    <p style="font-family: 'League Script', cursive; font-size:large;">
        A beleza da vida se multiplica cada vez Que a gente partilha com alguém que a gente ama.
        Se você quiser multiplicar a vida Você precisa dividí-la.
    </p>

</div>
<p>
    Usuarios inscritos: @users
</p>
    
 <div class="container">
    <input type="text" placeholder="Usuario" onchange="@((ChangeEventArgs e) => alterarUser(e))" />
    <br />
    <input type="text" @bind="Query" placeholder="Nº do capitulo ou pesquisar" />
    <a id="acessoPaginaComInput2"  onclick="@buscar"
       class="btn btn-primary">
        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-search" viewBox="0 0 16 16">
            <path d="M11.742 10.344a6.5 6.5 0 1 0-1.397 1.398h-.001c.03.04.062.078.098.115l3.85 3.85a1 1 0 0 0 1.415-1.414l-3.85-3.85a1.007 1.007 0 0 0-.115-.1zM12 6.5a5.5 5.5 0 1 1-11 0 5.5 5.5 0 0 1 11 0z" />
        </svg>
    </a>     
 </div>

@if (usuarios!.Count > 0)
{

    <div class="users">

        @foreach (var item in usuarios!)
        {
            <p>
                <a href="@item.user">
                    Usuario @item.user
                    <div class="circulo">
                        <center>

                        <div class="circulo2">
                            @if (item.UserModel.Image != null)
                            {
                                    <img src="ImgUser/usuario-@(item.user)-@(item.UserModel.Image)" class="ImgUser">
                            }
                            else
                            {
                                <img src="ImgUser/padrao.jpg" class="ImgUser">

                            }
                        </div>
                        </center>
                    </div>
                </a>
            </p>
        }
    </div>
}

@if(filtros!.Count > 0)
{
    <div style="position:absolute; background-color:aliceblue;">
        <table cellspacing="10" border="1" cellpadding="10" >
            <tr>
                <th>Capitulo</th>
                <th>Pasta</th>
                <th>Nome</th>
                <th></th>
            </tr>
            @foreach (var item in filtros!)
            {
                var fil = Context.Pagina!.Include(p => p.Story).ThenInclude(p => p.Filtro)
                .First(p => p.StoryId == item.StoryId).Story!.Filtro;
                var f = fil!.First(fi => fi.Id == item.Id);
                <tr>
                    <td>Capitulo @Context.Pagina!.Include(p => p.Story).First(p => p.StoryId == item.StoryId).Story!.PaginaPadraoLink </td>
                    <td>Pasta @(fil!.IndexOf(f) + 1) </td>
                    <td>@item.Nome</td>
                    <td><a href="#" onclick="@(() => Acessar(item))">Acessar</a></td>
                </tr>
            }

        </table>
    </div>
}
<img src="/story.jpg" style="width:60%" />

<a href="/comentario/0/1" style="background-color:rgb(208, 146, 61); font-size:large;color:rgb(95, 56, 23);">
        Compartilhe seu comentário
    </a>




@code{

    [Parameter] public int? capitulo { get; set; }
   
    [Parameter] public string? indice { get; set; }
    [Parameter] public int? filtrar { get; set; }
    [Parameter] public string? MensagemSistema { get; set; }
    [Parameter] public string? dominio { get; set; }
    [Parameter] public string? compartilhante { get; set; }
    public string? Query { get; set; }
    public string? Usuario { get; set; }
    List<Filtro>? filtros = new List<Filtro>();
    List<IdentityUserImage> usuarios = new List<IdentityUserImage>();
    int cap = 1;
    string? Mensagem { get; set; }
    private DemoContextFactory db = new DemoContextFactory();
    private ApplicationDbContext Context;
    private int users = 0;

    private string erro1 = "Voce ainda não esta compartilhando nenhum livro";



    protected override async Task OnInitializedAsync()
    {
        Context = db.CreateDbContext(null);
        var quant = await userManager.Users.ToListAsync();
        users = quant.Count;

        var livro = await Context.Livro!.FirstOrDefaultAsync(l => l.user == repositoryPagina.buscarDominio());
        if (compartilhante == null)        
            compartilhante = "comp";
        if(dominio == null)
            dominio = repositoryPagina.buscarDominio();

        else if (dominio != repositoryPagina.buscarDominio())
        {
            var domi = await Context.Compartilhante!.FirstOrDefaultAsync(l => l.Livro == dominio);
            if (domi == null)
            {
                var compartilhant = new business.Compartilhante
                    {
                        Livro = dominio,
                        Admin = compartilhante,
                        Data = DateTime.Now,
                        Comissao = 5
                    };
                await Context.AddAsync(compartilhant);
                await Context.SaveChangesAsync();
            }
        }

        if(dominio == null)
        {
            dominio = "dominio";
        }


        if (capitulo != null && indice != null && indice.Contains("verso"))
        {
            navigation.NavigateTo($"/renderizar/{capitulo}/{indice.Replace("verso-", "")}/1/11/1/0/0/0/0/{dominio}/{compartilhante}");
        }
        else if (capitulo != null && filtrar != null)
        {
            navigation.NavigateTo($"/filtro/{capitulo}/pasta-{filtrar}/0/0/0/{dominio}/{compartilhante}/0/0/0/0/0/0/0/0/0/0/1");
        }        
        else if (indice != null)
        { 
            var number = Regex.Match(indice, @"d+").Value;
            if (livro != null)
                navigation.ToAbsoluteUri($"{livro.url}/renderizar/{livro.capitulo}/{number}/1/11/1/0/0/0/0/{dominio}/{compartilhante}");
            else
                Mensagem = erro1;
        }
        else if (filtrar != null)
        {
            if (livro != null)
                navigation.ToAbsoluteUri($"{livro.url}/filtro/{livro.capitulo}/pasta-{filtrar}/0/0/0/{dominio}/{compartilhante}/0/0/0/0/0/0/0/0/0/0");
            else
                Mensagem = erro1;
        }


    }

    private async void Acessar(Filtro item)
    {
        var cap = Context.Pagina!.Include(p => p.Story).First(p => p.StoryId == item.StoryId).Story!.PaginaPadraoLink;
        var filtros = Context.Pagina!.Include(p => p.Story).ThenInclude(p => p.Filtro).First(p => p.StoryId == item.StoryId).Story!.Filtro;
        var fil = filtros!.First(f => f.Id == item.Id);
        var indiceFiltro = filtros!.IndexOf(fil) + 1;
        dominio = repositoryPagina.buscarDominio();
        navigation.NavigateTo($"/renderizar/{cap}/{indiceFiltro}/0/11/1/1/0/0/0/{dominio}/{compartilhante}/user");
    }

    private async void buscar()
    {
        try
        {
            cap = int.Parse(Query!);
            navigation.NavigateTo($"/renderizar/{cap}/1/1/11/1/0/0/0/0/{dominio}/{compartilhante}");
        }
        catch(Exception ex)
        {
            if (!string.IsNullOrEmpty(Query))
            {
                filtros = await Context.Filtro!
                .Include(f => f.Story)
                .Where(f => f.Rotas!.ToLower().Contains(Query!.ToLower())).ToListAsync();


                if(filtros.Count == 0)
                {
                    var rota = new Rota
                        {
                            Nome = Query,
                            Registrado = false
                        };
                    Context.Add(rota);
                    await Context.SaveChangesAsync();
                }
            }
            else if (string.IsNullOrEmpty(Query))
            {
                filtros = new List<Filtro>();
            }
            cap = 1;
        }
    }

    private void alterarUser(ChangeEventArgs args)
    {
        var users = userManager.Users.Where(u => u.UserName.Contains(args.Value!.ToString()!)).ToList();
        foreach(var item in users)

            usuarios.Add(new IdentityUserImage { user = item.UserName, UserModel = item });

        if (string.IsNullOrEmpty(args.Value!.ToString()!))
            usuarios.Clear();
    }
    
    private class IdentityUserImage
    {
        public string? user { get; set; }
        public UserModel UserModel { get; set; }
    }
}