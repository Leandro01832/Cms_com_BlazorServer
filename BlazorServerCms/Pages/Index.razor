@page "/"
@page "/acesso/{indice}"
@page "/livro/{nomeLivro}"
@page "/{nomeLivro}/{capitulo:int}/{indice}"
@using business.business.Group

@inject NavigationManager navigation
@inject RepositoryPagina repositoryPagina
@inject UserManager<UserModel> userManager
@inject IJSRuntime js
@inject ITourService TourService
@inject AuthenticationStateProvider? AuthenticationStateProvider 

<PageTitle>Instagleo</PageTitle>

<div class="row">
    <LoginDisplay />
</div>

<button class="btn btn-primary" type="button" @onclick="StartTour">Start Tour</button>

<div class="info">

    <p>
        Usuarios inscritos: @users
    </p>

    <p>
        <a data-5 href="#" onclick="@(() => navigation.NavigateTo("/createcontent"))">
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-plus-circle-fill" viewBox="0 0 16 16">
                <path d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0M8.5 4.5a.5.5 0 0 0-1 0v3h-3a.5.5 0 0 0 0 1h3v3a.5.5 0 0 0 1 0v-3h3a.5.5 0 0 0 0-1h-3z" />
            </svg>
        </a>
        <a  href="#" onclick="@(() => navigation.NavigateTo("/conteudo"))" style="margin-left: 10px;" >
            <strong>Content</strong>
        </a>
    </p>
</div>

<div data-first>

    <p style="font-family: 'League Script', cursive; font-size:large;">
        A beleza da vida se multiplica cada vez Que a gente partilha com alguém que a gente ama.
        Se você quiser multiplicar a vida Você precisa dividí-la.
    </p>

</div>


<div class="container">
    <div>
        <input type="text" placeholder="Usuario" onchange="@((ChangeEventArgs e) => alterarUser(e))" />
        <br />
        <input type="text" @bind="Query" placeholder="@placeholder" data-2 />
        <a id="acessoPaginaComInput2" onclick="@buscar"
        class="btn btn-primary">
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-search" viewBox="0 0 16 16">
                <path d="M11.742 10.344a6.5 6.5 0 1 0-1.397 1.398h-.001c.03.04.062.078.098.115l3.85 3.85a1 1 0 0 0 1.415-1.414l-3.85-3.85a1.007 1.007 0 0 0-.115-.1zM12 6.5a5.5 5.5 0 1 1-11 0 5.5 5.5 0 0 1 11 0z" />
            </svg>
        </a>
    </div>
    

</div>

@if (usuarios!.Count > 0)
{
    <div class="users">

        @foreach (var item in usuarios!)
        {
            <p>
                <a href="@item.user">
                    Usuario @item.user
                    <div class="circulo">
                        <center>

                            <div class="circulo2">
                                @if (item.UserModel.Image != null)
                                {
                                    <img src="ImgUser/usuario-@(item.user)-@(item.UserModel.Image)" class="ImgUser">
                                }
                                else
                                {
                                    <img src="ImgUser/padrao.jpg" class="ImgUser">

                                }
                            </div>
                        </center>
                    </div>
                </a>
            </p>
        }
    </div>
}

@if (filtros!.Count > 0)
{
    <div class="filtros">

        <p style="text-align: center;"> <strong>Livro - capitulo - verso</strong> </p>

        <hr />

        @foreach (var item in filtros!)
        {
            <p>
                <a  onclick="@(() => Acessar(item))" >

                    @if (item.Livro != null)
                    {
                        <span> @item.Livro.Nome - </span>
                    }
                    else
                    {
                        <span>Instagleo - </span>
                    }
                    <span> Cap. @item.Story!.Capitulo - </span>
                    <span> ( @item.Nome ) Versículo @retornarVerso(item.Pagina!.First(p => p.Content is Chave).Content!)</span>

                </a>
            </p>
        }
    </div>
}

<div class="apresentacao">

    @if(nomeLivro == null)
    {
        <img src="/story.jpg" style="width:70%" />
    }
    else if(livro != null)
    {
        @markup
    }
    else
    {
        <div style="text-align:center;">
            <h1>Livro não encontrado</h1>

        </div>
    }

   


</div>

<GuidedTour TourId="FormGuidedTour" OverlayEnabled="true">
    <GuidedTourStep Title="Instagleo" StepName="firstStep" TourStepSequence="1"
    ElementSelector="[data-first]">
        <span>Seja Bem-vindo ao nosso sistema de compartilhamento de paginas</span>
    </GuidedTourStep>
    <GuidedTourStep Title="acessando stories" StepName="Step2" TourStepSequence="2"
    ElementSelector="[data-2]">
        <span>
            Pesquise sobre qualquer assunto e saiba qual é o livro,
             capitulo e versiculo
             </span>
    </GuidedTourStep>
    <GuidedTourStep Title="Sumario" StepName="Step3" TourStepSequence="3"
    ElementSelector="[data-3]">
        <span>No sumário você poderá ver todos os capitulos </span>
    </GuidedTourStep>
    <GuidedTourStep Title="Estante" StepName="Step4" TourStepSequence="4"
    ElementSelector="[data-4]">
        <span>
            Defina todos os livros que você quer compartilhar.
        </span>
    </GuidedTourStep>
    
    <GuidedTourStep Title="Configurações" StepName="Step5" TourStepSequence="8"
    ElementSelector="[data-5]">
        <span>
            Compartilhe mais conteudos para capitulos e pastas.
        </span>
    </GuidedTourStep>
</GuidedTour>

@code
{

    [Parameter] public int? capitulo { get; set; }

    [Parameter] public string? nomeLivro { get; set; } = "";
    [Parameter] public string? indice { get; set; }
    public string? Query { get; set; }
    public string? Usuario { get; set; }
    List<Filtro>? filtros = new List<Filtro>();
    List<Filtro>? filtros2 = new List<Filtro>();
    List<IdentityUserImage> usuarios = new List<IdentityUserImage>();
   
    private DemoContextFactory db = new DemoContextFactory();
    private ApplicationDbContext Context;
    private int users = 0;
    private int? carregando = null;
    private string placeholder = "Pesquisar";
   //private bool marcar;

    private MarkupString markup;

    private Story _story = null;

    private Livro livro = null;

    int? verso = null;
    long? filtro = null;

   

    protected override async Task OnParametersSetAsync()
    {
        if (livro == null)
            filtros2 = await Context.Filtro!
            .Include(f => f.Story)
            .Include(f => f.Pagina)!
            .ThenInclude(f => f.Content)
            .Where(f => f.StoryId == _story.Id && f.LivroId == null)
            .OrderBy(f => f.Id)
            .ToListAsync();
        else
            filtros2 = await Context.Filtro!
           .Include(f => f.Story)
           .Include(f => f.Pagina)!
           .ThenInclude(f => f.Content)
           .Where(f => f.StoryId == _story.Id && f.LivroId == livro.Id)
           .OrderBy(f => f.Id)
           .ToListAsync();

        filtros2.Reverse();
        try
        {
            repositoryPagina.CapituloLivro = 1;
            Story padrao = null;
            string? dominio = await js.InvokeAsync<string>("retornarSubdominio", "url");

            var lista =  RepositoryPagina.stories;

            if (dominio != null)
            {

                string? subdominio = dominio.Split('.')[0];
                padrao = lista.FirstOrDefault(i => i.Nome.Replace(" ", "").Contains(subdominio))!;
            }

            if (padrao != null) repositoryPagina.CapituloLivro = padrao.Capitulo;
        }
        catch(Exception ex)
        {

        }



    }

    protected override async Task OnInitializedAsync()
    {
        // var authState = await AuthenticationStateProvider
        // .GetAuthenticationStateAsync();
        // var user = authState.User;

        // if (!user.Identity!.IsAuthenticated)
        // {
        //     navigation.NavigateTo("/Identity/Account/Login");

        // }


        Context = db.CreateDbContext(null);
        var quant = await userManager.Users.ToListAsync();
        users = quant.Count;

        if (nomeLivro != null)
            livro = await Context.Livro.FirstOrDefaultAsync(l => l.Nome == nomeLivro);

        repositoryPagina.exibir = true;

        if (_story == null)
        {
            _story = await Context.Story!
                     .FirstOrDefaultAsync(p => p.Capitulo == repositoryPagina.CapituloLivro)!;
        }



        if(livro != null && capitulo != null )
        {
            var filtros = await Context.Filtro!
             .Include(f => f.Story)
             .Include(f => f.usuarios)
             .Where(f => f.Rotas!.ToLower().Contains(Query!.ToLower()) && f.LivroId == livro.Id)
             .ToListAsync();
            var str = RepositoryPagina.stories.FirstOrDefault(st => st.Capitulo == capitulo);
            if(str != null)
                navigation.NavigateTo($"/renderizar/{livro.Nome}/{str.Id}/{indice}/0/11/1/0/dominio/comp");
        }

        if(livro != null)
        markup = new MarkupString(livro.Capa);

    }

    private async void Acessar(Filtro item)
    {
        List<Filtro> filtros = null;
        if(livro == null)
            filtros = Context.Filtro!.Where(p => p.LivroId == null).ToList();
        else 
            filtros = Context.Filtro!.Where(p => p.LivroId == livro.Id).ToList();
        var fil = filtros!.First(f => f.Id == item.Id);
        var indiceFiltro = filtros!.IndexOf(fil) + 1;

        if(item.Livro == null)
            navigation.NavigateTo($"/renderizar/{item.StoryId}/{indiceFiltro}/0/11/1/0/dominio/comp/{item.Id}");
        else
            navigation.NavigateTo($"/renderizar/{item.Livro.Nome}/{item.StoryId}/{indiceFiltro}/0/11/1/0/dominio/comp/{item.Id}");
    }

    private async void buscar()
    {
        carregando = null;

        if (!string.IsNullOrEmpty(Query))
                {
                    filtros = await Context.Filtro!
                    .Include(f => f.Pagina)!
                    .ThenInclude(f => f.Content)
                    .Include(f => f.Story)
                    .Include(f => f.Livro)
                .Where(f => f.Nome!.ToLower().Contains(Query.ToLower()))
                    .ToListAsync();


                    if (filtros.Count == 0)
                    {
                        List<Pagina> paginas = null;
                        if(livro == null)
                            paginas = Context.Pagina.Where(r => r.Rotas.ToLower().Contains(Query.ToLower())
                           && r.LivroId == null).ToList();
                        else
                            paginas = Context.Pagina.Where(r => r.Rotas.ToLower().Contains(Query.ToLower())
                           && r.LivroId == livro.Id).ToList();
                        List<Pagina> pages = new List<Pagina>();

                        foreach (var item in paginas)
                        {
                            var rotas = item.Rotas.Split(",");
                            foreach (var rota in rotas)
                                if (rota.ToLower().TrimEnd().TrimStart() == Query.ToLower().TrimEnd().TrimStart())
                                    pages.Add(item);
                        }

                        if (pages.Count == 0)
                        {
                            var rot = Context.Rota.FirstOrDefaultAsync(r => r.Nome.ToLower().Contains(Query.ToLower()));

                            if (rot == null)
                            {
                                var rota = new Rota
                                {
                                    Nome = Query.ToLower(),
                                    Registrado = false
                                };
                                Context.Add(rota);
                                await Context.SaveChangesAsync();
                            }
                        }
                        else
                        {
                            var stories = await Context.Story!.Where(str => str.Nome != "Padrao").OrderBy(st => st.Id).ToListAsync();
                            var story = stories.First(str => str.Id == paginas[0].StoryId); 
                            if(livro == null)
                                navigation.NavigateTo($"/renderizar/{story.Id}/1/0/11/0/0/dominio/comp/{Query.ToLower()}");
                            else
                                navigation.NavigateTo($"/renderizar/{livro.Nome}/{story.Id}/1/0/11/0/0/dominio/comp/{Query.ToLower()}");
                        }
                    }
                    // else
                    // {
                    //     if(livro == null)
                    //     navigation.NavigateTo($"/Renderizar/{story.Id}/1/0/11/0/0/dominio/comp/{filtros.First().Id}");
                    //     else
                    //     navigation.NavigateTo($"/Renderizar/{livro.Nome}/{story.Id}/1/0/11/0/0/dominio/comp/{filtros.First().Id}");
                    // }
                }
        else if (string.IsNullOrEmpty(Query))
                {
                    filtros = new List<Filtro>();
                }            
    }

    private void alterarUser(ChangeEventArgs args)
    {
        usuarios.Clear();
        var users = userManager.Users.Where(u => u.UserName.Contains(args.Value!.ToString()!)).ToList();
        foreach (var item in users)

            usuarios.Add(new IdentityUserImage { user = item.UserName, UserModel = item });

        if (string.IsNullOrEmpty(args.Value!.ToString()!))
            usuarios.Clear();
    }

    private class IdentityUserImage
    {
        public string? user { get; set; }
        public UserModel UserModel { get; set; }
    }

    private async Task StartTour()
    {
        await TourService.StartTour("FormGuidedTour");
    }

    private string retornarUrl()
    {
        string liv = "";

        if (livro != null)
            liv += $"/{livro.Nome}";

        string url = null;
        if (filtro != null)
        {
            if(carregando == null)
                url = $"/Renderizar{liv}/{_story.Id}/{verso}/0/11/0/0/dominio/comp/{filtro}";
            else
                url = $"/Renderizar{liv}/{_story.Id}/{verso}/0/11/0/0/dominio/comp/{filtro}/{carregando}";
        }
        else
            url = $"/Renderizar{liv}/{_story.Id}/{verso}/0/11/0/0/dominio/comp";
        return url;
    }

    private void limparFiltros()
    {
        filtros.Clear();
    }

    private int retornarVerso(Content c)
    {
        Pagina pag = (Pagina)c;
        return pag.Versiculo;
    }

}