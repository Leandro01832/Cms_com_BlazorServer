@page "/lista-filtro/{pagina:int}/{ordenar}/{compartilhante}/{auto:int}/{interval:int}/{tamanho:int}/{Capitulo:int}/{indiceFiltro:int}/{verso1:int}/{verso2:int}/{verso3:int}/{verso4:int}/{verso5:int}/{verso6:int}/{verso7:int}/{verso8:int}/{verso9:int}/{verso10:int}/{exemplo1:int}/{exemplo2:int}/{exemplo3:int}/{exemplo4:int}/{exemplo5:int}/{exemplo6:int}/{exemplo7:int}/{exemplo8:int}/{exemplo9:int}/{exemplo10:int}/{questao?}"
@inject RepositoryPagina repositoryPagina
@inject NavigationManager navigation
@inject AuthenticationStateProvider? AuthenticationStateProvider
@inject IJSRuntime js
@layout MeuLayout

<PageTitle>listas de filtro</PageTitle>

@if(questao == null)
{
    <BackPage></BackPage>    
    <a onclick="@desmarcar" class="btn btn-primary" >Desmarcar</a>
}

@if(questao == null && verso1 != 0)
{ 
    <a onclick="@criarFiltro" class="btn btn-primary" >Criar Filtro</a>
}


<div id="configuracao">
    <p id="livro">www.instagleo.net.br</p>
    <p id="config">
        <strong>
            @if (Model.FirstOrDefault(p => p.Produto != null) != null)
    {
                <a  id="configurar" onclick="@(() => clicou())">Info e Config</a>
            }
            else
            {
                <a  id="configurar" onclick="@(() => clicou())">Config</a>                
            }
        </strong>
    </p>
    
   
    <p id="automatico">
        <strong>
            @{
                if (auto == 1)
                {
                    <a href="#"
                       onclick="@( () => desabilitar())">
                        Desabilitar automático
                    </a>
                }
                else
                {
                    <a href="#"
                       onclick="@( () => abilitar())">
                        Habilitar automático
                    </a>
                }
            }

        </strong>
    </p>

    <p id="lista">
        <strong>
            @{
                if (pagina > 1)
                {
                    <a href="#"
                       onclick="@( () => navigation.NavigateTo($"/lista-filtro/{pagina -1}/{ordenar}/{compartilhante}/{auto}/{interval}/{tamanho}/{Capitulo}/{indiceFiltro}/{verso1}/{verso2}/{verso3}/{verso4}/{verso5}/{verso6}/{verso7}/{verso8}/{verso9}/{verso10}/{exemplo1}/{exemplo2}/{exemplo3}/{exemplo4}/{exemplo5}/{exemplo6}/{exemplo7}/{exemplo8}/{exemplo9}/{exemplo10}/{questao}"))">
                        Lista Anterior ||
                    </a>
                }

            }

            <a href="#"
               onclick="@( () => navigation.NavigateTo($"/lista-filtro/{pagina +1}/{ordenar}/{compartilhante}/{auto}/{interval}/{tamanho}/{Capitulo}/{indiceFiltro}/{verso1}/{verso2}/{verso3}/{verso4}/{verso5}/{verso6}/{verso7}/{verso8}/{verso9}/{verso10}/{exemplo1}/{exemplo2}/{exemplo3}/{exemplo4}/{exemplo5}/{exemplo6}/{exemplo7}/{exemplo8}/{exemplo9}/{exemplo10}/{questao}"))">
                Proxima lista >>>
            </a>

        </strong>
    </p>
</div>

<div id="cabecalho">   

    @if (Model.FirstOrDefault(p => p.Produto != null) != null)
    {
         <div id="ordenacao">
        <h4>Ordenar</h4>

        <input type="hidden" value="@auto" id="auto" name="auto">
        <a href="#"
           onclick="@( () => navigation.NavigateTo($"/lista-filtro/{pagina}/nome/1/{interval}/{tamanho}/{Capitulo}/{indiceFiltro}"))">
            Ordenar por nome
        </a>
        <a href="#"
           onclick="@( () => navigation.NavigateTo($"/lista-filtro/{pagina}/preco/1/{interval}/{tamanho}/{Capitulo}/{indiceFiltro}"))">
            Ordenar por preço
        </a>
        <a href="#"
           onclick="@( () => navigation.NavigateTo($"/lista-filtro/{pagina}/descricao/1/{interval}/{tamanho}/{Capitulo}/{indiceFiltro}"))">
            Ordenar por capitulo
        </a>
    </div>
   
        
    <div id="proxima-lista">
        <h3>Tamanho da lista</h3>
        <strong>
            <a href="#"
               onclick="@( () => navigation.NavigateTo($"/lista-filtro/1/{ordenar}/{compartilhante}/1/{interval}/11/{Capitulo}/{indiceFiltro}"))">
                10 itens
            </a>

        </strong>
        <strong>
            <a href="#"
               onclick="@( () => navigation.NavigateTo($"/lista-filtro/1/{ordenar}/{compartilhante}/1/{interval}/41/{Capitulo}/{indiceFiltro}"))">
                40 itens
            </a>

        </strong>
        <strong>
            <a href="#"
               onclick="@( () => navigation.NavigateTo($"/lista-filtro/1/{ordenar}/{compartilhante}/1/{interval}/81/{Capitulo}/{indiceFiltro}"))">
                80 itens
            </a>
        </strong>
        </div>
    }
    else
    {
        <div id="proxima-lista">
            <h3>Tamanho da lista</h3>
            <strong>
                <a href="#"
                   onclick="@( () => navigation.NavigateTo($"/lista-filtro/1/{ordenar}/{compartilhante}/1/{interval}/6/{Capitulo}/{indiceFiltro}"))">
                    5 itens
                </a>

            </strong>
            <strong>
                <a href="#"
                   onclick="@( () => navigation.NavigateTo($"/lista-filtro/1/{ordenar}/{compartilhante}/1/{interval}/11/{Capitulo}/{indiceFiltro}"))">
                    10 itens
                </a>

            </strong>
            <strong>
                <a href="#"
                   onclick="@( () => navigation.NavigateTo($"/lista-filtro/1/{ordenar}/{compartilhante}/1/{interval}/16/{Capitulo}/{indiceFiltro}"))">
                    15 itens
                </a>
            </strong>
        </div>
    }

    <div>
        <label for="interval"> <strong>Time em segundos (s):</strong> </label>
        <input type="number" @bind="interval"  max="600" min="5">


    </div>

</div>

<h3>Lista de Filtro</h3>

<a href="#" onclick="@(() => acessarPasta())" style="font-size:22px;">
 Capitulo @Capitulo - Pasta @indiceFiltro
</a>

@if(questao != "")
{
    <p style="font-size:30px; background-color:aquamarine;" >@questao</p>
}

@if(filtro != null)
{
    <p> <header>@filtro.Nome</header> </p>
}

@{
    if(Model == null || Model.Count == 0)
    {
        <p>Aguarde um momento... quantidade igual a @Model.Count</p>
    }
    else
    {
        <div class="container">

            @if (Model.FirstOrDefault(p => p.Produto != null) != null)
            {
                foreach(var item in Model)
            {
                    var paginaItem = Context.Pagina!.Include(p => p.Produto).ThenInclude(p => p.Imagem).First(p => p.Id == item.Id);
                    var path = paginaItem.Produto!.Imagem!.First().ArquivoImagem;
                        var markup = new MarkupString(item.Content);
                    var largura = paginaItem.Produto!.Imagem!.First().WidthImagem;

            <div class="divs"> 
               
                    @if (item.Content.Contains("ContentIframe"))
                    {
                        <div class="content" >
                            @markup
                        </div>
                    }
                    else
                    {
                         <div class="produto" onclick="cancelar()">
                           
                    
                    <div class="info">
                        <p> Nome: @item.Produto!.Nome </p>
                        <p> Descrição: @item.Produto!.Descricao </p>
                        <p> Preço: @item.Produto!.Preco </p>
                        <p> Estoque: @item.Produto!.QuantEstoque </p>
                    </div>
                            @if (item.Versiculo == verso1 || item.Versiculo == verso2 || item.Versiculo == verso3 ||
                       item.Versiculo == verso4 || item.Versiculo == verso5 || item.Versiculo == verso6 ||
                       item.Versiculo == verso7 || item.Versiculo == verso8 || item.Versiculo == verso9 ||
                       item.Versiculo == verso10)
                                    {
                                        <div class="caps" style="background-color:yellow;">
                                               <center>
                                                                Versiculo @item.Versiculo foi marcado
                                        @{
                                            if(questao != null && questao != "")
                                            {
                                                
                                                    if (
                                                        item.Versiculo ==   verso1 && exemplo1 == 1 ||
                                                        item.Versiculo ==   verso2 && exemplo2 == 1 ||
                                                        item.Versiculo ==   verso3 && exemplo3 == 1 ||
                                                        item.Versiculo ==   verso4 && exemplo4 == 1 ||
                                                        item.Versiculo ==   verso5 && exemplo5 == 1 ||
                                                        item.Versiculo ==   verso6 && exemplo6 == 1 ||
                                                        item.Versiculo ==   verso7 && exemplo7 == 1 ||
                                                        item.Versiculo ==   verso8 && exemplo8 == 1 ||
                                                        item.Versiculo ==   verso9 && exemplo9 == 1 ||
                                                        item.Versiculo == verso10 && exemplo10 == 1 
                                                    )
                                                    {
                                                        <p> como exemplo</p>
                                                    }
                                                    else
                                                    {
                                                        <p> como resposta</p>
                                                
                                                    }
                                            }
                                           
                                        }
                                               
                                               </center>
                                        </div>

                                    }
                                    else
                                    {
                                         <div class="caps" style="background-color:transparent;">
                                               <center>
                                                                Versiculo @item.Versiculo
                                               </center>
                                                @if (questao == null)
                                                {
                                                    <p>
                                                        <a onclick="@(() => marcar(item.Versiculo))" class="btn btn-dark">Marcar</a>
                                                    </p>
                                                }
                                        </div>
                                    }
                                    <p>
                        <img src="@path" alt="Imagem do produto" />
                    </p>

                </div>
                        
                    }


                
            </div>
            

        }
                
            }
             else
        {
            @foreach (var item in Model)
            {                   
                    var markup = new MarkupString(item.ContentUser);

            <div class="divs">
               

                    <div class="conteudo" onclick="cancelar()">
                       
                        
                            
                        <div class="content" style="width:100%; height:auto;" >
                            @markup
                        </div>

                            @if (item.Versiculo == verso1 || item.Versiculo == verso2 || item.Versiculo == verso3 ||
                                item.Versiculo == verso4 || item.Versiculo == verso5 || item.Versiculo == verso6 ||
                                item.Versiculo == verso7 || item.Versiculo == verso8 || item.Versiculo == verso9 ||
                                item.Versiculo == verso10)
                                {
                                     <div class="caps" style="background-color:yellow;">  
                        <center>                            
                                Versiculo @item.Versiculo foi marcado
                                        @{
                                            if (questao != null && questao != "")
                                            {
                                                if (
                                                item.Versiculo == verso1 && exemplo1 == 1 ||
                                                item.Versiculo == verso2 && exemplo2 == 1 ||
                                                item.Versiculo == verso3 && exemplo3 == 1 ||
                                                item.Versiculo == verso4 && exemplo4 == 1 ||
                                                item.Versiculo == verso5 && exemplo5 == 1 ||
                                                item.Versiculo == verso6 && exemplo6 == 1 ||
                                                item.Versiculo == verso7 && exemplo7 == 1 ||
                                                item.Versiculo == verso8 && exemplo8 == 1 ||
                                                item.Versiculo == verso9 && exemplo9 == 1 ||
                                                item.Versiculo == verso10 && exemplo10 == 1
                                                )
                                                {
                                                    <p> como exemplo</p>
                                                }
                                                else
                                                {
                                                    <p> como resposta</p>                                                
                                                }                                                
                                            }
                                            

                                        }
                        </center>
                                   
                                    </div>

                                }
                                else
                                {
                                    <div class="caps" style="background-color: transparent;">  
                                    <center>                            
                                            Versiculo @item.Versiculo
                                            @if (questao == null)
                                            {
                                                <p>
                                                    <a onclick="@(() => marcar(item.Versiculo))" class="btn btn-dark">Marcar</a>
                                                </p>
                                            }
                                    </center>
                                               
                                    </div>
                                }

                    </div>
                    <br />
                    <hr />
                    <br />
                
            </div>
            }
        }
       
        </div>
    }
}

@code {

    Filtro filtro = new Filtro();
    List<Pagina> Model = new List<Pagina>();
    List<Filtro>? filtros { get; set; }
    protected ClaimsPrincipal user;
    private int indiceMarcador;

    [Parameter] public string? compartilhante { get; set; }

    [Parameter] public int verso1 { get; set; }
    [Parameter] public int verso2 { get; set; }
    [Parameter] public int verso3 { get; set; }
    [Parameter] public int verso4 { get; set; }
    [Parameter] public int verso5 { get; set; }
    [Parameter] public int verso6 { get; set; }
    [Parameter] public int verso7 { get; set; }
    [Parameter] public int verso8 { get; set; }
    [Parameter] public int verso9 { get; set; }
    [Parameter] public int verso10 { get; set; }

    [Parameter] public int exemplo1 { get; set; }
    [Parameter] public int exemplo2 { get; set; }
    [Parameter] public int exemplo3 { get; set; }
    [Parameter] public int exemplo4 { get; set; }
    [Parameter] public int exemplo5 { get; set; }
    [Parameter] public int exemplo6 { get; set; }
    [Parameter] public int exemplo7 { get; set; }
    [Parameter] public int exemplo8 { get; set; }
    [Parameter] public int exemplo9 { get; set; }
    [Parameter] public int exemplo10 { get; set; }


    [Parameter] public string questao { get; set; }


    [Parameter] public int auto { get; set; }
    [Parameter] public int pagina { get; set; }
    [Parameter] public int indiceFiltro { get; set; }
    [Parameter] public int Capitulo { get; set; }

    [Parameter] public int? redirecionar { get; set; }
    [Parameter] public string? ordenar { get; set; }
    [Parameter] public int interval { get; set; }
    [Parameter] public int? tamanho { get; set; }
    private DemoContextFactory db = new DemoContextFactory();
    private ApplicationDbContext Context;

    protected override async Task OnParametersSetAsync()
    {
        filtro = filtros[indiceFiltro - 1];
        VerificarFiltro(filtro);

        Model = await RetornarLista(pagina, ordenar!, (int)tamanho!);
        try
        {
            await js!.InvokeAsync<object>("ConfigurarPaginacao", "1");
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }

    }

    protected override async Task OnInitializedAsync()
    {
        Context = db.CreateDbContext(null);
        filtros = await Context.Filtro!
        .Include(f => f.Pagina)!
        .ThenInclude(f => f.Pagina)
        .ThenInclude(f => f.Produto)
        .Include(f => f.Story)
         .Where(f => f.Story.PaginaPadraoLink == Capitulo)
     .OrderBy(f => f.StoryId)
     .OrderBy(f => f.Id)
     .ToListAsync();

        if(questao == null)
        {
            questao = "";
        }


        filtro = filtros[indiceFiltro];
        VerificarFiltro(filtro);

        var authState = await AuthenticationStateProvider
                .GetAuthenticationStateAsync();
        user = authState.User;

    }

    private void VerificarFiltro(Filtro fil)
    {
        Model = fil.Pagina!.Select(f => f.Pagina).ToList()!;
    }

    private async Task<List<Pagina>> RetornarLista(int numeroPagina, string ordem, int tamanhoPagina)
    {
        List<Pagina>? applicationDbContext = null;

        @if (Model.FirstOrDefault(p => p.Produto != null) != null)
        {
            if (ordem == "preco")
                applicationDbContext = Model!
                   .OrderBy(p => p.Produto!.Preco)
                   .Skip((numeroPagina - 1) * tamanhoPagina)
                   .Take(tamanhoPagina).ToList();
            else if(ordem == "descricao")
                applicationDbContext = Model!
                   .OrderBy(p => p.Produto!.Descricao)
                   .Skip((numeroPagina - 1) * tamanhoPagina)
                   .Take(tamanhoPagina).ToList();
            else if (ordem == "nome")
                applicationDbContext = Model!
                   .OrderBy(p => p.Produto!.Nome)
                   .Skip((numeroPagina - 1) * tamanhoPagina)
                   .Take(tamanhoPagina).ToList();
            else 
                applicationDbContext = Model!
                   .OrderBy(p => p.Id)
                   .Skip((numeroPagina - 1) * tamanhoPagina)
                   .Take(tamanhoPagina).ToList();            
        }
        else
        {
            applicationDbContext = Model!
                   .OrderBy(p => p.Id)
                   .Skip((numeroPagina - 1) * tamanhoPagina)
                   .Take(tamanhoPagina).ToList();
        }

        foreach(var item in Model)
        {
            if (item.ContentUser != null && item.ContentUser.Contains("iframe"))
            {
                var id = buscarId(item);
                var url = await GetYouTubeVideo(id);
                item.ContentUser = $"<center><img src='{url[0]}' class='ContentIframe' /><p>{url[1]}</p></center>";

            }
            else if (item.Content != null && item.Content.Contains("iframe"))
            {
                var id = buscarId(item);
                var url = await GetYouTubeVideo(id);
                item.Content = $"<center><img src='{url[0]}' class='ContentIframe' /><p>{url[1]}</p></center>";

            }
        }

        return applicationDbContext;
    }

    private void desabilitar()
    {
        auto = 0;
        navigation.NavigateTo($"/lista-filtro/1/{ordenar}/{compartilhante}/{auto}/{interval}/{tamanho}/{Capitulo}/{indiceFiltro}/{verso1}/{verso2}/{verso3}/{verso4}/{verso5}/{verso6}/{verso7}/{verso8}/{verso9}/{verso10}/{exemplo1}/{exemplo2}/{exemplo3}/{exemplo4}/{exemplo5}/{exemplo6}/{exemplo7}/{exemplo8}/{exemplo9}/{exemplo10}/{questao}");
    }

    private void abilitar()
    {
        auto = 1;
        navigation.NavigateTo($"/lista-filtro/{pagina}/{ordenar}/{compartilhante}/{auto}/{interval}/{tamanho}/{Capitulo}/{indiceFiltro}/{verso1}/{verso2}/{verso3}/{verso4}/{verso5}/{verso6}/{verso7}/{verso8}/{verso9}/{verso10}/{exemplo1}/{exemplo2}/{exemplo3}/{exemplo4}/{exemplo5}/{exemplo6}/{exemplo7}/{exemplo8}/{exemplo9}/{exemplo10}/{questao}");
    }

    private void acessarPasta()
    {
        auto = 0;
        navigation.NavigateTo($"/filtro/{Capitulo}/pasta-{indiceFiltro}/0/0/0/dominio/{compartilhante}");
    }

    private async void clicou()
    {
        await js!.InvokeAsync<object>("Clicou", "1");
    }

    private async Task<string[]> GetYouTubeVideo(string id_video)
    {
        int calculo = 0;
        var youtubeService = new YouTubeService(new BaseClientService.Initializer()
            {
                ApiKey = "",
                ApplicationName = this.GetType().ToString()
            });
        var searchListRequest = youtubeService.Videos.List("snippet,contentDetails,statistics,status");
        searchListRequest.Id = id_video;
        var search = await searchListRequest.ExecuteAsync();
        var p = search.Items[0].Snippet.Thumbnails.Medium;
        var p2 = search.Items[0].Snippet.Title;
        string[] pesquisa = new string[2];
        pesquisa[0] = p.Url;
        pesquisa[1] = p2;


        return pesquisa;
    }

    private  string buscarId(Pagina p)
    {
        var id_video = "";
        if (p != null && p.Content != null && p.Content.Contains("iframe")  ||
                        p != null && p.ContentUser != null && p.ContentUser.Contains("iframe") )
        {
            var conteudoHtml = "";
            if (p.Content != null) conteudoHtml = p.Content;
            else conteudoHtml = p.ContentUser;
            var arr = conteudoHtml!.Split("/");
            for (var index = 0; index < arr.Length; index++)
            {
                if (arr[index] == "embed" && conteudoHtml.Contains("?autoplay="))
                {
                    var text = arr[index + 1];
                    var arr2 = text.Split("?");
                    id_video = arr2[0];
                    break;
                }
                else if (arr[index] == "embed")
                {
                    var text = arr[index + 1];
                    var arr2 = text.Split('"');
                    id_video = arr2[0];
                    break;
                }
            }

        }
        return id_video;
    }
    
    protected async void marcar(int Versiculo)
    {
        if (!user.Identity!.IsAuthenticated)
        {
            await js!.InvokeAsync<object>("DarAlert", $"Por favor faça login para poder marcar versiculos");
        }
        else
        {

            auto = 0;

            if(verso1 == 0)    verso1  = Versiculo; else
            if(verso2 == 0)    verso2  = Versiculo; else
            if(verso3 == 0)    verso3  = Versiculo; else
            if(verso4 == 0)    verso4  = Versiculo; else
            if(verso5 == 0)    verso5  = Versiculo; else
            if(verso6 == 0)    verso6  = Versiculo; else
            if(verso7 == 0)    verso7  = Versiculo; else
            if(verso8 == 0)    verso8  = Versiculo; else
            if(verso9 == 0)    verso9  = Versiculo; else
            if(verso10 == 0)   verso10 = Versiculo; else
            await js!.InvokeAsync<object>("DarAlert", $"É possível marcar somente 10 versículos.");

            await js!.InvokeAsync<object>("DarAlert", $"O versiculo {Versiculo} foi marcado com sucesso!!!");
            navigation.NavigateTo($"/lista-filtro/{pagina}/{ordenar}/{compartilhante}/{auto}/{interval}/{tamanho}/{Capitulo}/{indiceFiltro}/{verso1}/{verso2}/{verso3}/{verso4}/{verso5}/{verso6}/{verso7}/{verso8}/{verso9}/{verso10}/{exemplo1}/{exemplo2}/{exemplo3}/{exemplo4}/{exemplo5}/{exemplo6}/{exemplo7}/{exemplo8}/{exemplo9}/{exemplo10}/{questao}");

        }

    }

    protected async void desmarcar()
    {
        if (!user.Identity!.IsAuthenticated)
        {
            await js!.InvokeAsync<object>("DarAlert", $"Por favor faça login para poder desmarcar versiculos");

        }
        else
        {
            auto = 0;

                verso1 = 0;                       
                verso2 = 0;                       
                verso3 = 0;                       
                verso4 = 0;                       
                verso5 = 0;                       
                verso6 = 0;                       
                verso7 = 0;                       
                verso8 = 0;                       
                verso9 = 0;                       
                verso10 = 0;                      

            await js!.InvokeAsync<object>("DarAlert", $"Versiculos desmarcados com sucesso.");
            navigation.NavigateTo($"/lista-filtro/{pagina}/{ordenar}/{compartilhante}/{auto}/{interval}/{tamanho}/{Capitulo}/{indiceFiltro}/{verso1}/{verso2}/{verso3}/{verso4}/{verso5}/{verso6}/{verso7}/{verso8}/{verso9}/{verso10}/{exemplo1}/{exemplo2}/{exemplo3}/{exemplo4}/{exemplo5}/{exemplo6}/{exemplo7}/{exemplo8}/{exemplo9}/{exemplo10}/{questao}");
        }

    }

    private async void criarFiltro()
    {
        string prompted = await js.InvokeAsync<string>("prompt", "Informe o nome do filtro.");
        highlighter filtro = new highlighter
            {
                capitulo = Capitulo,
                Nome = prompted,
                pasta = indiceFiltro,
                user = user.Identity.Name,
                verso1 = verso1,
                verso2 = verso2,
                verso3 = verso3,
                verso4 = verso4,
                verso5 = verso5,
                verso6 = verso6,
                verso7 = verso7,
                verso8 = verso8,
                verso9 = verso9,
                verso10 = verso10
            };
            Context.Add(filtro);
            await Context.SaveChangesAsync();
        await js!.InvokeAsync<object>("DarAlert", $"Filtro criado com sucesso pelo usuario!!! ");

        verso1 = 0;
        verso2 = 0;
        verso3 = 0;
        verso4 = 0;
        verso5 = 0;
        verso6 = 0;
        verso7 = 0;
        verso8 = 0;
        verso9 = 0;
        verso10 = 0;
        navigation.NavigateTo($"/lista-filtro/{pagina}/{ordenar}/{compartilhante}/{auto}/{interval}/{tamanho}/{Capitulo}/{indiceFiltro}/{verso1}/{verso2}/{verso3}/{verso4}/{verso5}/{verso6}/{verso7}/{verso8}/{verso9}/{verso10}/{exemplo1}/{exemplo2}/{exemplo3}/{exemplo4}/{exemplo5}/{exemplo6}/{exemplo7}/{exemplo8}/{exemplo9}/{exemplo10}/{questao}");
    }

}
