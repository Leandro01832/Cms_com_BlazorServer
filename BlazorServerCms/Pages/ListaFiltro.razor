@page "/lista-filtro/{pagina:int}"
@page "/lista-filtro/{pagina:int}/{Id:long}"
@inject RepositoryPagina repositoryPagina
@inject NavigationManager navigation
@inject IJSRuntime js
@layout MeuLayout

<PageTitle>listas de filtro</PageTitle>
<BackPage></BackPage>

<div id="configuracao">
    <p id="livro">www.instagleo.net.br</p>
    <p id="config">
        <strong>
            @if (Model.FirstOrDefault() != null)
            {
                <a id="configurar" onclick="@(() => clicou())">Info e Config</a>
            }
            else
            {
                <a id="configurar" onclick="@(() => clicou())">Config</a>
            }
        </strong>
    </p>


    <p id="home">
        <a href="/" class="btn btn-primary">

            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-house" viewBox="0 0 16 16">
                <path d="M8.707 1.5a1 1 0 0 0-1.414 0L.646 8.146a.5.5 0 0 0 .708.708L2 8.207V13.5A1.5 1.5 0 0 0 3.5 15h9a1.5 1.5 0 0 0 1.5-1.5V8.207l.646.647a.5.5 0 0 0 .708-.708L13 5.793V2.5a.5.5 0 0 0-.5-.5h-1a.5.5 0 0 0-.5.5v1.293L8.707 1.5ZM13 7.207V13.5a.5.5 0 0 1-.5.5h-9a.5.5 0 0 1-.5-.5V7.207l5-5 5 5Z" />
            </svg>

        </a>
    </p>

    <p id="lista">
        <strong>
            @{
                if (pagina > 1)
                {
                    <a href="#"
                    onclick="@( () => navigation.NavigateTo($"/lista-filtro/{pagina -1}/{Id}"))">
                        Lista Anterior ||
                    </a>
                }

            }

            <a href="#"
            onclick="@( () => navigation.NavigateTo($"/lista-filtro/{pagina +1}/{Id}"))">
                Proxima lista >>>
            </a>

        </strong>
    </p>
</div>

<div id="cabecalho">

    @if (Model.FirstOrDefault() != null)
    {
        <div id="ordenacao">
            <h4>Ordenar</h4>

            <a href="#"
            onclick="@( () => navigation.NavigateTo($"/lista-filtro/{pagina}/{Id}"))">
                Ordenar por nome
            </a>
            <a href="#"
            onclick="@( () => navigation.NavigateTo($"/lista-filtro/{pagina}/{Id}"))">
                Ordenar por preço
            </a>
            <a href="#"
            onclick="@( () => navigation.NavigateTo($"/lista-filtro/{pagina}/{Id}"))">
                Ordenar por capitulo
            </a>
        </div>


        <div id="proxima-lista">
            <h3>Tamanho da lista</h3>
            <strong>
                <a href="#"
                onclick="@( () => navigation.NavigateTo($"/lista-filtro/1/{Id}"))">
                    10 itens
                </a>

            </strong>
            <strong>
                <a href="#"
                onclick="@( () => navigation.NavigateTo($"/lista-filtro/1/{Id}"))">
                    40 itens
                </a>

            </strong>
            <strong>
                <a href="#"
                onclick="@( () => navigation.NavigateTo($"/lista-filtro/1/{Id}"))">
                    80 itens
                </a>
            </strong>
        </div>
    }
    else
    {
        <div id="proxima-lista">
            <h3>Tamanho da lista</h3>
            <strong>
                <a href="#"
                onclick="@( () => navigation.NavigateTo($"/lista-filtro/1/{Id}"))">
                    5 itens
                </a>

            </strong>
            <strong>
                <a href="#"
                onclick="@( () => navigation.NavigateTo($"/lista-filtro/1/{Id}"))">
                    10 itens
                </a>

            </strong>
            <strong>
                <a href="#"
                onclick="@( () => navigation.NavigateTo($"/lista-filtro/1/{Id}"))">
                    15 itens
                </a>
            </strong>
        </div>
    }


</div>

<h3>Lista de Filtro</h3>

<a href="#" onclick="@(() => acessarPasta())" style="font-size:22px;">
    Pasta @filtro.Nome
</a>

@if (filtro != null)
{
    <p> <header>@filtro.Nome</header> </p>

}


@{
    if (Model == null || Model.Count == 0)
    {
        <p>Aguarde um momento... quantidade igual a @Model.Count</p>
    }
    else
    {
        <div class="container">


            @foreach (var item in Model)
            {
                if (item.Produto.Count != 0)
                {
                    foreach (var item2 in item.Produto)
                    {

                        var path = item2.Produto!.Imagem!.First().ArquivoImagem;
                        var markup = new MarkupString(item.Html);
                        var largura = item2.Produto!.Imagem!.First().WidthImagem;

                        <div class="divs">

                            @if (item.Html.Contains("ContentIframe"))
                            {
                                <div class="content">
                                    @markup
                                </div>
                            }
                            else
                            {
                                <div class="produto" onclick="cancelar()">


                                    <div class="info">
                                        <p> Nome: @item2.Produto.Nome </p>
                                        <p> Descrição: @item2.Produto!.Descricao </p>
                                        <p> Preço: @item2.Produto!.Preco </p>
                                        <p> Estoque: @item2.Produto!.QuantEstoque </p>
                                    </div>


                                    <p>
                                        <img src="" alt="Imagem do produto" />
                                    </p>

                                </div>

                            }
                            @if (item is Pagina)
                            {
                                var p = (Pagina)item;
                                <p>Versiculo @p.Versiculo</p>
                            }


                        </div>


                    }

                }
                else
                {

                    var markup = new MarkupString(item.Html);


                    <div class="divs">


                        <div class="conteudo" onclick="cancelar()">



                            <div class="content" style="width:100%; height:auto;">
                                @markup
                            </div>
                            @if(item is Pagina)
                            {
                                var p = (Pagina)item;
                                <p>Versiculo @p.Versiculo</p>
                            }

                        </div>
                        <br />
                        <hr />
                        <br />

                    </div>

                }

            }



        </div>
    }
}

@code {

    Filtro filtro = new Filtro();
    List<Content> Model = new List<Content>();
    List<Content> lista = new List<Content>();
    private int indiceMarcador;

    [Parameter] public long Id { get; set; }
    [Parameter] public int pagina { get; set; }

    public string? ordenar { get; set; } 
    public int? tamanho { get; set; } 
    private DemoContextFactory db = new DemoContextFactory();
    private ApplicationDbContext Context;
    private bool repository = false;

    protected override async Task OnParametersSetAsync()
    {
        Model.Clear();

        if(Model.Count == 0){
            if(!repository)
            Model.AddRange(filtro.Pagina!.Select(p => p.Content!).ToList()!);
            else
            Model.AddRange(lista);
            Model = await RetornarLista(pagina, ordenar!, (int)tamanho!);
        }

        try
        {
            await js!.InvokeAsync<object>("ConfigurarPaginacao", "1");
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }

    }

    protected override async Task OnInitializedAsync()
    {
        Context = db.CreateDbContext(null);


        repository = RepositoryPagina.Conteudo
                  .Where(c => c is Pagina && c.Filtro != null &&
                  c.Filtro!.FirstOrDefault(f => f.FiltroId == Id) != null).ToList().Count ==
                  CountPagesInFilterAsync();


        if (!repository)
            filtro = await Context.Filtro!
            .Include(f => f.Pagina)!
            .ThenInclude(f => f.Content)
            .ThenInclude(f => f.Produto)
            .ThenInclude(f => f.Produto)
            .FirstAsync(f => f.Id == Id);
        else
        {
            lista = RepositoryPagina.Conteudo
                  .Where(c => c is Pagina && c.Filtro != null &&
                  c.Filtro!.FirstOrDefault(f => f.FiltroId == Id) != null).ToList();
            filtro = await Context.Filtro!.FirstAsync(f => f.Id == Id);
        }

        tamanho = 10;
        ordenar = "teste";

    }

    private void VerificarFiltro(Filtro fil)
    {
        Model = fil.Pagina!.Select(f => f.Content).ToList()!;
    }

    private async Task<List<Content>> RetornarLista(int numeroPagina, string ordem, int tamanhoPagina)
    {
        List<Content>? applicationDbContext = null;

        @if (Model.FirstOrDefault() != null)
        {
            if (ordem == "preco")
                applicationDbContext = Model!
                   .Skip((numeroPagina - 1) * tamanhoPagina)
                   .Take(tamanhoPagina).ToList();
            else if (ordem == "descricao")
                applicationDbContext = Model!
                   .Skip((numeroPagina - 1) * tamanhoPagina)
                   .Take(tamanhoPagina).ToList();
            else if (ordem == "nome")
                applicationDbContext = Model!
                   .Skip((numeroPagina - 1) * tamanhoPagina)
                   .Take(tamanhoPagina).ToList();
            else
                applicationDbContext = Model!
                   .OrderBy(p => p.Id)
                   .Skip((numeroPagina - 1) * tamanhoPagina)
                   .Take(tamanhoPagina).ToList();
        }
        else
        {
            applicationDbContext = Model!
                   .OrderBy(p => p.Id)
                   .Skip((numeroPagina - 1) * tamanhoPagina)
                   .Take(tamanhoPagina).ToList();
        }

        foreach (var item in applicationDbContext)
        {
            if (item.Html != null && item.Html.Contains("iframe"))
            {
                var id = buscarId(item);
                var url = await GetYouTubeVideo(id);
                item.Html = $"<center><img src='{url[0]}' class='ContentIframe' /><p>{url[1]}</p></center>";

            }
           
        }

        return applicationDbContext;
    }

    private void desabilitar()
    {
        navigation.NavigateTo($"/lista-filtro/1/{Id}");
    }

    private void abilitar()
    {
        navigation.NavigateTo($"/lista-filtro/{pagina}/{Id}");
    }

    private void acessarPasta()
    {
        navigation.NavigateTo($"/renderizar/{filtro.StoryId}/1/0/11/0/0/0/dominio/comp/{Id}");
    }

    private async void clicou()
    {
        await js!.InvokeAsync<object>("Clicou", "1");
    }

    private async Task<string[]> GetYouTubeVideo(string id_video)
    {
        int calculo = 0;
        var youtubeService = new YouTubeService(new BaseClientService.Initializer()
            {
                ApiKey = repositoryPagina.buscarApiYoutube(),
                ApplicationName = this.GetType().ToString()
            });
        var searchListRequest = youtubeService.Videos.List("snippet,contentDetails,statistics,status");
        searchListRequest.Id = id_video;
        var search = await searchListRequest.ExecuteAsync();
        var p = search.Items[0].Snippet.Thumbnails.Medium;
        var p2 = search.Items[0].Snippet.Title;
        string[] pesquisa = new string[2];
        pesquisa[0] = p.Url;
        pesquisa[1] = p2;


        return pesquisa;
    }

    private string buscarId(Content p)
    {
        var id_video = "";
        if (p != null && p.Html != null && p.Html.Contains("iframe") ||
                        p != null && p.Html != null && p.Html.Contains("iframe"))
        {
            var conteudoHtml = "";
            if (p.Html != null) conteudoHtml = p.Html;
            else conteudoHtml = p.Html;
            var arr = conteudoHtml!.Split("/");
            for (var index = 0; index < arr.Length; index++)
            {
                if (arr[index] == "embed" && conteudoHtml.Contains("?autoplay="))
                {
                    var text = arr[index + 1];
                    var arr2 = text.Split("?");
                    id_video = arr2[0];
                    break;
                }
                else if (arr[index] == "embed")
                {
                    var text = arr[index + 1];
                    var arr2 = text.Split('"');
                    id_video = arr2[0];
                    break;
                }
            }

        }
        return id_video;
    }

    private int CountPagesInFilterAsync()
    {
        var _TotalRegistros = 0;
        try
        {
            using (var con = new SqlConnection(ApplicationDbContext._connectionString))
            {
                SqlCommand cmd = null;
                cmd = new SqlCommand($"SELECT COUNT(*) FROM FiltroContent as FC " +
                         " inner join Content as C on FC.ContentId=C.Id where " +
                        $" FC.FiltroId={Id} and C.Discriminator='Pagina' or " +
                        $" FC.FiltroId={Id} and C.Discriminator='AdminContent' or " +
                        $" FC.FiltroId={Id} and C.Discriminator='ProductContent' or " +
                        $" FC.FiltroId={Id} and C.Discriminator='ChangeContent'  "
                    , con);

                con.Open();
                _TotalRegistros = int.Parse(cmd.ExecuteScalar().ToString());
                con.Close();
            }
        }
        catch (Exception)
        {
            _TotalRegistros = 0;
        }

        return _TotalRegistros;
    }





}
