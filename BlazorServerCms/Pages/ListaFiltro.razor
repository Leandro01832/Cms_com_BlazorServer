@page "/lista-filtro/{pagina:int}/{ordenar}/{auto:int}/{tempo:int}/{tamanho:int}/{Capitulo:int}/{indiceFiltro:int}/{p1:int}/{p2:int}/{p3:int}/{p4:int}/{p5:int}/{p6:int}/{p7:int}/{p8:int}/{p9:int}/{p10:int}"
@page "/lista-filtro/{dominio}/{compartilhante}/{compartilhante2}/{ordenar}/{pagina:int}/{auto:int}/{tempo:int}/{tamanho:int}/{Capitulo:int}/{indiceFiltro:int}/{user}/{indicePasta:int}/{pasta1:int}"
@page "/lista-filtro/{dominio}/{compartilhante}/{compartilhante2}/{ordenar}/{pagina:int}/{auto:int}/{tempo:int}/{tamanho:int}/{Capitulo:int}/{indiceFiltro:int}/{user}/{indicePasta:int}/{pasta1:int}/{pasta2:int}"
@page "/lista-filtro/{dominio}/{compartilhante}/{compartilhante2}/{ordenar}/{pagina:int}/{auto:int}/{tempo:int}/{tamanho:int}/{Capitulo:int}/{indiceFiltro:int}/{user}/{indicePasta:int}/{pasta1:int}/{pasta2:int}/{pasta3:int}"
@page "/lista-filtro/{dominio}/{compartilhante}/{compartilhante2}/{ordenar}/{pagina:int}/{auto:int}/{tempo:int}/{tamanho:int}/{Capitulo:int}/{indiceFiltro:int}/{user}/{indicePasta:int}/{pasta1:int}/{pasta2:int}/{pasta3:int}/{pasta4:int}"
@page "/lista-filtro/{dominio}/{compartilhante}/{compartilhante2}/{ordenar}/{pagina:int}/{auto:int}/{tempo:int}/{tamanho:int}/{Capitulo:int}/{indiceFiltro:int}/{user}/{indicePasta:int}/{pasta1:int}/{pasta2:int}/{pasta3:int}/{pasta4:int}/{pasta5:int}"
@page "/lista-filtro/{dominio}/{compartilhante}/{compartilhante2}/{ordenar}/{pagina:int}/{auto:int}/{tempo:int}/{tamanho:int}/{Capitulo:int}/{indiceFiltro:int}/{user}/{indicePasta:int}/{pasta1:int}/{pasta2:int}/{pasta3:int}/{pasta4:int}/{pasta5:int}/{pasta6:int}"
@page "/lista-filtro/{dominio}/{compartilhante}/{compartilhante2}/{ordenar}/{pagina:int}/{auto:int}/{tempo:int}/{tamanho:int}/{Capitulo:int}/{indiceFiltro:int}/{user}/{indicePasta:int}/{pasta1:int}/{pasta2:int}/{pasta3:int}/{pasta4:int}/{pasta5:int}/{pasta6:int}/{pasta7:int}"
@page "/lista-filtro/{dominio}/{compartilhante}/{compartilhante2}/{ordenar}/{pagina:int}/{auto:int}/{tempo:int}/{tamanho:int}/{Capitulo:int}/{indiceFiltro:int}/{user}/{indicePasta:int}/{pasta1:int}/{pasta2:int}/{pasta3:int}/{pasta4:int}/{pasta5:int}/{pasta6:int}/{pasta7:int}/{pasta8:int}"
@page "/lista-filtro/{dominio}/{compartilhante}/{compartilhante2}/{ordenar}/{pagina:int}/{auto:int}/{tempo:int}/{tamanho:int}/{Capitulo:int}/{indiceFiltro:int}/{user}/{indicePasta:int}/{pasta1:int}/{pasta2:int}/{pasta3:int}/{pasta4:int}/{pasta5:int}/{pasta6:int}/{pasta7:int}/{pasta8:int}/{pasta9:int}"
@page "/lista-filtro/{dominio}/{compartilhante}/{compartilhante2}/{ordenar}/{pagina:int}/{auto:int}/{tempo:int}/{tamanho:int}/{Capitulo:int}/{indiceFiltro:int}/{user}/{indicePasta:int}/{pasta1:int}/{pasta2:int}/{pasta3:int}/{pasta4:int}/{pasta5:int}/{pasta6:int}/{pasta7:int}/{pasta8:int}/{pasta9:int}/{pasta10:int}"
@page "/formulario/{pagina:int}/{ordenar}/{auto:int}/{tempo:int}/{tamanho:int}/{Capitulo:int}/{indiceFiltro:int}/{p1:int}/{p2:int}/{p3:int}/{p4:int}/{p5:int}/{p6:int}/{p7:int}/{p8:int}/{p9:int}/{p10:int}"

@inject RepositoryPagina repositoryPagina
@inject NavigationManager navigation
@inject IJSRuntime js
@inject BlazorTimer Timer
@layout MeuLayout


<div id="configuracao">
    <p id="livro">livro</p>
    <p id="config">
        <strong>
            <a href="#" id="configurar" onclick="clicou()">Info e Config</a>
        </strong>
    </p>
    
   
    <p id="automatico">
        <strong>
            @{
                if (auto == 1)
                {
                    <a href="#"
                       onclick="@( () => navigation.NavigateTo($"/lista-filtro/1/{ordenar}/0/{tempo}/{tamanho}/{Capitulo}/{indiceFiltro}/{p1}/{p2}/{p3}/{p4}/{p5}/{p6}/{p7}/{p8}/{p9}/{p10}"))">
                        Desabilitar automático
                    </a>
                }
                else
                {
                    <a href="#"
                       onclick="@( () => navigation.NavigateTo($"/lista-filtro/{pagina}/{ordenar}/1/{tempo}/{tamanho}/{Capitulo}/{indiceFiltro}/{p1}/{p2}/{p3}/{p4}/{p5}/{p6}/{p7}/{p8}/{p9}/{p10}"))">
                        Habilitar automático
                    </a>
                }
            }

        </strong>
    </p>

    <p id="lista">
        <strong>
            @{
                if (pagina > 1)
                {
                    <a href="#"
                       onclick="@( () => navigation.NavigateTo($"/lista-filtro/{pagina -1}/{ordenar}/1/{tempo}/{tamanho}/{Capitulo}/{indiceFiltro}/{p1}/{p2}/{p3}/{p4}/{p5}/{p6}/{p7}/{p8}/{p9}/{p10}"))">
                        Lista Anterior ||
                    </a>
                }

            }

            <a href="#"
               onclick="@( () => navigation.NavigateTo($"/lista-filtro/{pagina +1}/{ordenar}/1/{tempo}/{tamanho}/{Capitulo}/{indiceFiltro}/{p1}/{p2}/{p3}/{p4}/{p5}/{p6}/{p7}/{p8}/{p9}/{p10}"))">
                Proxima lista >>>
            </a>

        </strong>
    </p>
</div>

<div id="cabecalho">
    <div>
        <h4>Logo</h4>

    </div>
    <div id="ordenacao">
        <h4>Ordenar</h4>

        <input type="hidden" value="@auto" id="auto" name="auto">
        <a href="#"
           onclick="@( () => navigation.NavigateTo($"/lista-filtro/{pagina}/nome/1/{tempo}/{tamanho}/{Capitulo}/{indiceFiltro}/{p1}/{p2}/{p3}/{p4}/{p5}/{p6}/{p7}/{p8}/{p9}/{p10}"))">
            Ordenar por nome
        </a>
        <a href="#"
           onclick="@( () => navigation.NavigateTo($"/lista-filtro/{pagina}/preco/1/{tempo}/{tamanho}/{Capitulo}/{indiceFiltro}/{p1}/{p2}/{p3}/{p4}/{p5}/{p6}/{p7}/{p8}/{p9}/{p10}"))">
            Ordenar por preço
        </a>
        <a href="#"
           onclick="@( () => navigation.NavigateTo($"/lista-filtro/{pagina}/descricao/1/{tempo}/{tamanho}/{Capitulo}/{indiceFiltro}/{p1}/{p2}/{p3}/{p4}/{p5}/{p6}/{p7}/{p8}/{p9}/{p10}"))">
            Ordenar por capitulo
        </a>
    </div>
    <div id="proxima-lista">
        <h3>Tamanho da lista</h3>
        <strong>
            <a href="#"
               onclick="@( () => navigation.NavigateTo($"/lista-filtro/{pagina}/{ordenar}/1/{tempo}/11/{Capitulo}/{indiceFiltro}/{p1}/{p2}/{p3}/{p4}/{p5}/{p6}/{p7}/{p8}/{p9}/{p10}"))">
                10 itens
            </a>

        </strong>
        <strong>
            <a href="#"
               onclick="@( () => navigation.NavigateTo($"/lista-filtro/{pagina}/{ordenar}/1/{tempo}/41/{Capitulo}/{indiceFiltro}/{p1}/{p2}/{p3}/{p4}/{p5}/{p6}/{p7}/{p8}/{p9}/{p10}"))">
                40 itens
            </a>

        </strong>
        <strong>
            <a href="#"
               onclick="@( () => navigation.NavigateTo($"/lista-filtro/{pagina}/{ordenar}/1/{tempo}/81/{Capitulo}/{indiceFiltro}/{p1}/{p2}/{p3}/{p4}/{p5}/{p6}/{p7}/{p8}/{p9}/{p10}"))">
                80 itens
            </a>
        </strong>
    </div>
    <div>
        <label for="tempo"> <strong>Time em segundos (s):</strong> </label>
        <input type="number" @bind-value="tempo" @bind-value:event="oninput" max="600" min="15">


        <br />


    </div>

</div>

<div id="cabecalho">
    <div>
        <h4>Logo</h4>

    </div>
    
   
    

</div>

<h3>Lista de Filtro</h3>
<p>
    <input type="text" name="texto" id="texto" @bind="link" placeholder="link de preferência" readonly />
    <button onclick="@copiarTexto" id="botaoTexto">Copiar Link</button>
    <a href="#" class="btn btn-danger"
       onclick="@removePreferencia">
        Remover Preferência
    </a>
</p>

 Capitulo @Capitulo
<a href="#" onclick="@(() => navigation.NavigateTo($"/filtro/{Capitulo}/pasta-{indiceFiltro}/{p1}/{p2}/{p3}/{p4}/{p5}/{p6}/{p7}/{p8}/{p9}/{p10}/1"))">
    Pasta @indiceFiltro
</a>
@if(filtro != null)
{
    <p> <header>@filtro.Nome</header> </p>
}

<p>Qual sua preferência?</p>
@{
    if(Model.Count == 0)
    {
        <p>Aguarde um momento...</p>
    }
    else
    {
        foreach(var item in Model)
        {
            if (Model!.ToList().IndexOf(item) != 0)
            {
                var paginaItem = repositoryPagina.paginas!.First(p => p.Id == item.Id);
                var path = paginaItem.Produto!.Imagem!.First().ArquivoImagem;
                var largura = paginaItem.Produto!.Imagem!.First().WidthImagem;
                var identifica = paginaItem.Id;
                List<Pagina> lista = paginaItem.Story!.Pagina!.OrderBy(p => p.Id).ToList();
                var Capitulo = paginaItem.Story.PaginaPadraoLink;

                var Versiculo = lista.IndexOf(lista.First(l => l.Id == identifica)) + 1;

               

                <div class="produto" onclick="cancelar()">
                    @if(Versiculo == p1)
                    {
                        <p id="pref">Minha 1º Preferência</p>
                    }
                    else if(Versiculo == p2)
                    {
                    <p id="pref">Minha 2º Preferência</p>
                    }
                    else if(Versiculo == p3)
                    {
                    <p id="pref">Minha 3º Preferência</p>
                    }
                    else if(Versiculo == p4)
                    {
                    <p id="pref">Minha 4º Preferência</p>
                    }
                    else if (Versiculo == p5)
                    {
                        <p id="pref">Minha 5º Preferência</p>
                    }
                    else if (Versiculo == p6)
                    {
                        <p id="pref">Minha 6º Preferência</p>
                    }
                    else if (Versiculo == p7)
                    {
                        <p id="pref">Minha 7º Preferência</p>
                    }
                    else if (Versiculo == p8)
                    {
                        <p id="pref">Minha 8º Preferência</p>
                    }
                    else if (Versiculo == p9)
                    {
                        <p id="pref">Minha 9º Preferência</p>
                    }
                    else if (Versiculo == p10)
                    {
                        <p id="pref">Minha 10º Preferência</p>
                    }
                    
                    <div class="info">
                        <p> Nome: @item.Produto!.Nome </p>
                        <p> Descrição: @item.Produto!.Descricao </p>
                        <p> Preço: @item.Produto!.Preco </p>
                        <p> Estoque: @item.Produto!.QuantEstoque </p>
                    </div>
                    <div class="caps">
                        <a target="_blank" href="/renderizar/@Capitulo/@Versiculo/1/11/1/compartilhante/0" >
                            Capitulo @Capitulo
                        </a> <br>
                        <a target="_blank" href="/renderizar/@Capitulo/@Versiculo/1/11/1/compartilhante/0">
                            Versiculo @Versiculo
                        </a>
                    </div>
                    <p>
                        <img src="@path" alt="Imagem do produto" />
                    </p>

                </div>
                <a href="#" class="btn btn-primary" onclick="@(() => marcarPreferencia(Versiculo))" >Marcar como preferência</a>
            }
        }
    }
}

@code {

    Filtro filtro = new Filtro();
    List<Pagina> Model = new List<Pagina>();
    List<Pagina>? lista { get; set; }
    [Parameter] public string? user { get; set; }
    [Parameter] public int? indicePasta { get; set; }
    [Parameter] public int? pasta1 { get; set; }
    [Parameter] public int? pasta2 { get; set; }
    [Parameter] public int? pasta3 { get; set; }
    [Parameter] public int? pasta4 { get; set; }
    [Parameter] public int? pasta5 { get; set; }
    [Parameter] public int? pasta6 { get; set; }
    [Parameter] public int? pasta7 { get; set; }
    [Parameter] public int? pasta8 { get; set; }
    [Parameter] public int? pasta9 { get; set; }
    [Parameter] public int? pasta10 { get; set; }

    [Parameter] public string? dominio { get; set; }
    [Parameter] public string? compartilhante { get; set; }
    [Parameter] public string? compartilhante2 { get; set; }

    [Parameter] public int auto { get; set; }
    [Parameter] public int pagina { get; set; }
    [Parameter] public int indiceFiltro { get; set; }
    [Parameter] public int Capitulo { get; set; }
    [Parameter] public int p1 { get; set; }
    [Parameter] public int p2 { get; set; }
    [Parameter] public int p3 { get; set; }
    [Parameter] public int p4 { get; set; }
    [Parameter] public int p5 { get; set; }
    [Parameter] public int p6 { get; set; }
    [Parameter] public int p7 { get; set; }
    [Parameter] public int p8 { get; set; }
    [Parameter] public int p9 { get; set; }
    [Parameter] public int p10 { get; set; }
    [Parameter] public int? redirecionar { get; set; }
    [Parameter] public string? ordenar { get; set; }
    [Parameter] public double tempo { get; set; } = 20;
    [Parameter] public int? tamanho { get; set; }
    private DemoContextFactory db = new DemoContextFactory();
    private ApplicationDbContext Context;
    private string link = "";

    protected override async Task OnParametersSetAsync()
    {
        Model = RetornarLista(pagina, ordenar!, (int)tamanho!);
        try
        {
            await js!.InvokeAsync<object>("ConfigurarPaginacao", "1");
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
        StartTimer();

        if(indicePasta != null & pasta1 != null && user != null )
        {
            int? pastaAcessada = null;
            UserBook? livroCompartilhado = await Context.UserBook.Include(u => u.Livro).FirstOrDefaultAsync(u => u.user == user);
            if (indicePasta == 0) pastaAcessada = pasta1;
            if (indicePasta == 1) pastaAcessada = pasta2;
            if (indicePasta == 2) pastaAcessada = pasta3;
            if (indicePasta == 3) pastaAcessada = pasta4;
            if (indicePasta == 4) pastaAcessada = pasta5;
            if (indicePasta == 5) pastaAcessada = pasta6;
            if (indicePasta == 6) pastaAcessada = pasta7;
            if (indicePasta == 7) pastaAcessada = pasta8;
            if (indicePasta == 8) pastaAcessada = pasta9;
            if (indicePasta == 9) pastaAcessada = pasta10;

            if (pastaAcessada != null && livroCompartilhado != null && indicePasta < 10)
            {
                string url = $"{livroCompartilhado!.Livro!.url}/lista-filtro/{dominio}/{compartilhante}/{compartilhante2}/teste/1/1/11/30/{livroCompartilhado!.Capitulo}/{pastaAcessada}/{user}/{indicePasta + 1}/{pasta1}/{pasta2}/{pasta3}/{pasta4}/{pasta5}/{pasta6}/{pasta7}/{pasta8}/{pasta9}/{pasta10}";
                await js!.InvokeAsync<object>("AcessarSites", url);
            }

            if (dominio != repositoryPagina.buscarDominio())
            {
                var domi = await Context.Compartilhante!.FirstOrDefaultAsync(l => l.Livro == dominio);
                if (domi == null)
                {
                    var compartilhant = new business.Compartilhante
                        {
                            Livro = dominio,
                            Admin = compartilhante,
                            Data = DateTime.Now,
                            Comissao = 5
                            // ComissaoParaUser = 0.25 * Comissao,
                            // Desconto = 0.5 * Comissao
                        };
                    await Context.AddAsync(compartilhant);
                    await Context.SaveChangesAsync();
                }
            }
        }


    }

    protected override async Task OnInitializedAsync()
    {
        Context = db.CreateDbContext(null);
        if (repositoryPagina.paginas!.Count == repositoryPagina.buscarCount())
        {
            var filtros = await Context.Filtro!
            .Include(f => f.Story)
             .Where(f => f.Story.PaginaPadraoLink == Capitulo)
         .OrderBy(f => f.StoryId)
         .OrderBy(f => f.Id)
         .ToListAsync();

            filtro = filtros[indiceFiltro];
            VerificarFiltro(filtro);
        }

    }

    private void VerificarFiltro(Filtro fil)
    {
        if (fil.CamadaDezId != null)
            Model = repositoryPagina.paginas!.First(p => p.CamadaDezId == fil.CamadaDezId).CamadaDez!.Pagina!;
        else if (fil.CamadaNoveId != null)
            Model = repositoryPagina.paginas!.First(p => p.CamadaNoveId == fil.CamadaNoveId).CamadaNove!.Pagina!;
        else if (fil.CamadaOitoId != null)
            Model = repositoryPagina.paginas!.First(p => p.CamadaOitoId == fil.CamadaOitoId).CamadaOito!.Pagina!;
        else if (fil.CamadaSeteId != null)
            Model = repositoryPagina.paginas!.First(p => p.CamadaSeteId == fil.CamadaSeteId).CamadaSete!.Pagina!;
        else if (fil.CamadaSeisId != null)
            Model = repositoryPagina.paginas!.First(p => p.CamadaSeisId == fil.CamadaSeisId).CamadaSeis!.Pagina!;
        else if (fil.SubSubGrupoId != null)
            Model = repositoryPagina.paginas!.First(p => p.SubSubGrupoId == fil.SubSubGrupoId).SubSubGrupo!.Pagina!;
        else if (fil.SubGrupoId != null)
            Model = repositoryPagina.paginas!.First(p => p.SubGrupoId == fil.SubGrupoId).SubGrupo!.Pagina!;
        else if (fil.GrupoId != null)
            Model = repositoryPagina.paginas!.First(p => p.GrupoId == fil.GrupoId).Grupo!.Pagina!;
        else if (fil.SubStoryId != null)
            Model = repositoryPagina.paginas!.First(p => p.SubStoryId == fil.SubStoryId).SubStory!.Pagina!;

    }



    private List<Pagina> RetornarLista(int numeroPagina, string ordem, int tamanhoPagina)
    {
        List<Pagina>? applicationDbContext = null;

        if (ordem == "preco")
            applicationDbContext = lista!
               .OrderBy(p => p.Produto!.Preco)
               .Skip((numeroPagina - 1) * tamanhoPagina)
               .Take(tamanhoPagina).ToList();
        else if(ordem == "descricao")
            applicationDbContext = lista!
               .OrderBy(p => p.Produto!.Descricao)
               .Skip((numeroPagina - 1) * tamanhoPagina)
               .Take(tamanhoPagina).ToList();
        else if (ordem == "nome")
            applicationDbContext = lista!
               .OrderBy(p => p.Produto!.Nome)
               .Skip((numeroPagina - 1) * tamanhoPagina)
               .Take(tamanhoPagina).ToList();
        else 
            applicationDbContext = lista!
               .OrderBy(p => p.Id)
               .Skip((numeroPagina - 1) * tamanhoPagina)
               .Take(tamanhoPagina).ToList();

        return applicationDbContext;
    }


    private void StartTimer()
    {
        if (auto == 1)
        {
            Timer!.SetTimer(tempo!);
            Timer._timer!.Elapsed += _timer_Elapsed;
            Console.WriteLine("Timer Started.");
        }

    }

    private void _timer_Elapsed(object? sender, System.Timers.ElapsedEventArgs e)
    {
        if (auto == 1 && Model!.ToList().Count == 20)
            navigation.NavigateTo($"/lista-filtro/{pagina + 1}/{ordenar}/1/{tempo}/{tamanho}/{Capitulo}/{indiceFiltro}/{p1}/{p2}/{p3}/{p4}/{p5}/{p6}/{p7}/{p8}/{p9}/{p10}");
        else if (auto == 1)
            navigation.NavigateTo($"/lista-filtro/1/{ordenar}/1/{tempo}/{tamanho}/{Capitulo}/{indiceFiltro}/{p1}/{p2}/{p3}/{p4}/{p5}/{p6}/{p7}/{p8}/{p9}/{p10}");
        else
            navigation.NavigateTo($"/lista-filtro/{pagina}/{ordenar}/0/{tempo}/{tamanho}/{Capitulo}/{indiceFiltro}/{p1}/{p2}/{p3}/{p4}/{p5}/{p6}/{p7}/{p8}/{p9}/{p10}");

        Console.WriteLine("Timer Elapsed.");
        Timer!._timer!.Elapsed -= _timer_Elapsed;
    }

    private async void marcarPreferencia(int Versiculo)
    {
        if(p1 == 0)
        {
            p1 = Versiculo;
            setarTexto($"https://{repositoryPagina.buscarDominio()}/form/{Capitulo}/{indiceFiltro}/{p1}");
            navigation.NavigateTo($"/lista-filtro/{pagina}/{ordenar}/1/{tempo}/{tamanho}/{Capitulo}/{indiceFiltro}/{p1}/0/0/0/0/0/0/0/0/0");
        }
        else if(p2 == 0)
        {
            p2 = Versiculo;
            setarTexto($"https://{repositoryPagina.buscarDominio()}/form/{Capitulo}/{indiceFiltro}/{p1}/{p2}");
            navigation.NavigateTo($"/lista-filtro/{pagina}/{ordenar}/1/{tempo}/{tamanho}/{Capitulo}/{indiceFiltro}/{p1}/{p2}/0/0/0/0/0/0/0/0");
        }
        else if (p3 == 0)
        {
            p3 = Versiculo;
            setarTexto($"https://{repositoryPagina.buscarDominio()}/form/{Capitulo}/{indiceFiltro}/{p1}/{p2}/{p3}");
            navigation.NavigateTo($"/lista-filtro/{pagina}/{ordenar}/1/{tempo}/{tamanho}/{Capitulo}/{indiceFiltro}/{p1}/{p2}/{p3}/0/0/0/0/0/0/0");
        }
        else if (p4 == 0)
        {
            p4 = Versiculo;
            setarTexto($"https://{repositoryPagina.buscarDominio()}/form/{Capitulo}/{indiceFiltro}/{p1}/{p2}/{p3}/{p4}");
            navigation.NavigateTo($"/lista-filtro/{pagina}/{ordenar}/1/{tempo}/{tamanho}/{Capitulo}/{indiceFiltro}/{p1}/{p2}/{p3}/{p4}/0/0/0/0/0/0");
        }
        else if (p5 == 0)
        {
            p5 = Versiculo;
            setarTexto($"https://{repositoryPagina.buscarDominio()}/form/{Capitulo}/{indiceFiltro}/{p1}/{p2}/{p3}/{p4}/{p5}");
            navigation.NavigateTo($"/lista-filtro/{pagina}/{ordenar}/1/{tempo}/{tamanho}/{Capitulo}/{indiceFiltro}/{p1}/{p2}/{p3}/{p4}/{p5}/0/0/0/0/0");
        }
        else if (p6 == 0)
        {
            p6 = Versiculo;
            setarTexto($"https://{repositoryPagina.buscarDominio()}/form/{Capitulo}/{indiceFiltro}/{p1}/{p2}/{p3}/{p4}/{p5}/{p6}");
            navigation.NavigateTo($"/lista-filtro/{pagina}/{ordenar}/1/{tempo}/{tamanho}/{Capitulo}/{indiceFiltro}/{p1}/{p2}/{p3}/{p4}/{p5}/{p6}/0/0/0/0");
        }
        else if (p7 == 0)
        {
            p7 = Versiculo;
            setarTexto($"https://{repositoryPagina.buscarDominio()}/form/{Capitulo}/{indiceFiltro}/{p1}/{p2}/{p3}/{p4}/{p5}/{p6}/{p7}");
            navigation.NavigateTo($"/lista-filtro/{pagina}/{ordenar}/1/{tempo}/{tamanho}/{Capitulo}/{indiceFiltro}/{p1}/{p2}/{p3}/{p4}/{p5}/{p6}/{p7}/0/0/0");
        }
        else if (p8 == 0)
        {
            p8 = Versiculo;
            setarTexto($"https://{repositoryPagina.buscarDominio()}/form/{Capitulo}/{indiceFiltro}/{p1}/{p2}/{p3}/{p4}/{p5}/{p6}/{p7}/{p8}");
            navigation.NavigateTo($"/lista-filtro/{pagina}/{ordenar}/1/{tempo}/{tamanho}/{Capitulo}/{indiceFiltro}/{p1}/{p2}/{p3}/{p4}/{p5}/{p6}/{p7}/{p8}/0/0");
        }
        else if (p9 == 0)
        {
            p9 = Versiculo;
            setarTexto($"https://{repositoryPagina.buscarDominio()}/form/{Capitulo}/{indiceFiltro}/{p1}/{p2}/{p3}/{p4}/{p5}/{p6}/{p7}/{p8}/{p9}");
            navigation.NavigateTo($"/lista-filtro/{pagina}/{ordenar}/1/{tempo}/{tamanho}/{Capitulo}/{indiceFiltro}/{p1}/{p2}/{p3}/{p4}/{p5}/{p6}/{p7}/{p8}/{p9}/0");
        }
        else if (p10 == 0)
        {
            p10 = Versiculo;
            setarTexto($"https://{repositoryPagina.buscarDominio()}/form/{Capitulo}/{indiceFiltro}/{p1}/{p2}/{p3}/{p4}/{p5}/{p6}/{p7}/{p8}/{p9}/{p10}");
            navigation.NavigateTo($"/lista-filtro/{pagina}/{ordenar}/1/{tempo}/{tamanho}/{Capitulo}/{indiceFiltro}/{p1}/{p2}/{p3}/{p4}/{p5}/{p6}/{p7}/{p8}/{p9}/{p10}");
        }
        else
        {
            await js!.InvokeAsync<object>("DarAlert", "Você só pode marcar 10 preferências");
        }
    }

    private async void copiarTexto()
    {
        await js!.InvokeAsync<object>("CopiarLink", "1");
        
            var page = repositoryPagina.paginas!.Where(p => p.Story!.PaginaPadraoLink == Capitulo)
            .OrderBy(p => p.Id).Skip(p1 - 1).FirstOrDefault()!.Classificacao;
            var prefe = Context.Classificacao.First(cl => cl.Id == page!.Id);
            prefe.preferencia1++;
            Context.Update(prefe);
            await Context.SaveChangesAsync();
        
        if (p2 != 0)
        {
            var pag = repositoryPagina.paginas!.Where(p => p.Story!.PaginaPadraoLink == Capitulo)
            .OrderBy(p => p.Id).Skip(p2 - 1).FirstOrDefault()!.Classificacao;
            var pref = Context.Classificacao.First(cl => cl.Id == pag!.Id);
            pref.preferencia2++;
            Context.Update(pref);
            await Context.SaveChangesAsync();
        }
        if (p3 != 0)
        {
            var pag = repositoryPagina.paginas!.Where(p => p.Story!.PaginaPadraoLink == Capitulo)
            .OrderBy(p => p.Id).Skip(p3 - 1).FirstOrDefault()!.Classificacao;
            var pref = Context.Classificacao.First(cl => cl.Id == pag!.Id);
            pref.preferencia3++;
            Context.Update(pref);
            await Context.SaveChangesAsync();
        }
        if (p4 != 0)
        {
            var pag = repositoryPagina.paginas!.Where(p => p.Story!.PaginaPadraoLink == Capitulo)
            .OrderBy(p => p.Id).Skip(p4 - 1).FirstOrDefault()!.Classificacao;
            var pref = Context.Classificacao.First(cl => cl.Id == pag!.Id);
            pref.preferencia4++;
            Context.Update(pref);
            await Context.SaveChangesAsync();
        }
        if (p5 != 0)
        {
            var pag = repositoryPagina.paginas!.Where(p => p.Story!.PaginaPadraoLink == Capitulo)
            .OrderBy(p => p.Id).Skip(p5 - 1).FirstOrDefault()!.Classificacao;
            var pref = Context.Classificacao.First(cl => cl.Id == pag!.Id);
            pref.preferencia5++;
            Context.Update(pref);
            await Context.SaveChangesAsync();
        }
        if (p6 != 0)
        {
            var pag = repositoryPagina.paginas!.Where(p => p.Story!.PaginaPadraoLink == Capitulo)
            .OrderBy(p => p.Id).Skip(p6 - 1).FirstOrDefault()!.Classificacao;
            var pref = Context.Classificacao.First(cl => cl.Id == pag!.Id);
            pref.preferencia6++;
            Context.Update(pref);
            await Context.SaveChangesAsync();
        }
        if (p7 != 0)
        {
            var pag = repositoryPagina.paginas!.Where(p => p.Story!.PaginaPadraoLink == Capitulo)
            .OrderBy(p => p.Id).Skip(p7 - 1).FirstOrDefault()!.Classificacao;
            var pref = Context.Classificacao.First(cl => cl.Id == pag!.Id);
            pref.preferencia7++;
            Context.Update(pref);
            await Context.SaveChangesAsync();
        }
        if (p8 != 0)
        {
            var pag = repositoryPagina.paginas!.Where(p => p.Story!.PaginaPadraoLink == Capitulo)
            .OrderBy(p => p.Id).Skip(p8 - 1).FirstOrDefault()!.Classificacao;
            var pref = Context.Classificacao.First(cl => cl.Id == pag!.Id);
            pref.preferencia8++;
            Context.Update(pref);
           await Context.SaveChangesAsync();
        }
        if (p9 != 0)
        {
            var pag = repositoryPagina.paginas!.Where(p => p.Story!.PaginaPadraoLink == Capitulo)
            .OrderBy(p => p.Id).Skip(p9 - 1).FirstOrDefault()!.Classificacao;
            var pref = Context.Classificacao.First(cl => cl.Id == pag!.Id);
            pref.preferencia9++;
            Context.Update(pref);
           await Context.SaveChangesAsync();
        }
        if (p10 != 0)
        {
            var pag = repositoryPagina.paginas!.Where(p => p.Story!.PaginaPadraoLink == Capitulo)
            .OrderBy(p => p.Id).Skip(p10 - 1).FirstOrDefault()!.Classificacao;
            var pref = Context.Classificacao.First(cl => cl.Id == pag!.Id);
            pref.preferencia10++;
            Context.Update(pref);
           await Context.SaveChangesAsync();
        }
    }

    private async void setarTexto(string texto)
    {
        await js!.InvokeAsync<object>("SetarLink", texto);
    }

    private void removePreferencia()
    {
        setarTexto("");
        navigation.NavigateTo($"/lista-filtro/1/{ordenar}/0/{tempo}/{tamanho}/{Capitulo}/{indiceFiltro}/0/0/0/0/0/0/0/0/0/0");
    }
}
