@page "/lista-filtro/{pagina:int}/{auto:int}/{compartilhante}/{Capitulo:int}/{indiceFiltro:int}/{desconto:int}/{preferencia}"
@inject RepositoryPagina repositoryPagina
@inject NavigationManager navigation
@inject IJSRuntime js
@inject BlazorTimer Timer
@layout MeuLayout


<div id="configuracao">
    <p id="livro">livro</p>
    <p id="config">
        <strong>
            <a href="#" id="configurar" onclick="clicou()">Info e Config</a>
        </strong>
    </p>
    <p> <input type="checkbox" @bind="preco" /> Ordenar por preço </p>
    <p id="automatico">
        <strong>
            @{
                if (auto == 1)
                {
                    <a href="#"
                       onclick="@( () => navigation.NavigateTo($"/lista-filtro/{pagina}/0/{compartilhante}/{Capitulo}/{indiceFiltro}/{desconto}/{preferencia}"))">
                        Desabilitar automático
                    </a>
                }
                else
                {
                    <a href="#"
                       onclick="@( () => navigation.NavigateTo($"/lista-filtro/{pagina}/1/{compartilhante}/{Capitulo}/{indiceFiltro}/{desconto}/{preferencia}"))">
                        Habilitar automático
                    </a>
                }
            }

        </strong>
    </p>

    <p id="lista">
        <strong>
            @{
                if (pagina > 1)
                {
                    <a href="#"
                       onclick="@( () => navigation.NavigateTo($"/lista-filtro/{pagina - 1}/1/{compartilhante}/{Capitulo}/{indiceFiltro}/{desconto}/{preferencia}"))">
                        Lista Anterior ||
                    </a>
                }

            }

            <a href="#"
               onclick="@( () => navigation.NavigateTo($"/lista-filtro/{pagina + 1}/1/{compartilhante}/{Capitulo}/{indiceFiltro}/{desconto}/{preferencia}"))">
                Proxima lista >>>
            </a>

        </strong>
    </p>
</div>

<div id="cabecalho">
    <div>
        <h4>Logo</h4>

    </div>
    
   
    

</div>

<h3>Lista de Filtro</h3>

 Capitulo @Capitulo Pasta @indiceFiltro 
@{
    if(Model.Count == 0)
    {
        <p>Aguarde um momento...</p>
    }
    else
    {
        foreach(var item in Model)
        {
            if (Model!.ToList().IndexOf(item) != 0)
            {
                var paginaItem = repositoryPagina.paginas!.First(p => p.Id == item.Id);
                var path = paginaItem.Produto!.Imagem!.First().ArquivoImagem;
                var largura = paginaItem.Produto!.Imagem!.First().WidthImagem;
                var identifica = paginaItem.Id;
                List<Pagina> lista = paginaItem.Story!.Pagina!.OrderBy(p => p.Id).ToList();
                var Capitulo = paginaItem.Story.PaginaPadraoLink;

                var Versiculo = lista.IndexOf(lista.First(l => l.Id == identifica)) + 1;

                <div class="produto" onclick="cancelar()">
                    @if(Versiculo == preferencia)
                    {
                        <p id="pref">Minha Preferência</p>
                    }
                    
                    <div class="info">
                        <p> Nome: @item.Produto!.Nome </p>
                        <p> Descrição: @item.Produto!.Descricao </p>
                        <p> Preço: @item.Produto!.Preco </p>
                        <p> Estoque: @item.Produto!.QuantEstoque </p>
                    </div>
                    <div class="caps">
                        <a href="#" onclick="@(() => Clicou(Versiculo))">
                            Capitulo @Capitulo
                        </a> <br>
                        <a href="#" onclick="@(() => Clicou(Versiculo))">
                            Versiculo @Versiculo
                        </a>
                    </div>
                    <a href="#"
                       onclick="@(() => Clicou(Versiculo))">
                        <img src="@path" alt="Imagem do produto" />

                    </a>

                </div>
            }
        }
    }
}

@code {

    Filtro filtro = new Filtro();
    List<Pagina> Model = new List<Pagina>();
    List<Pagina>? lista { get; set; }
    public bool preco { get; set; }
    [Parameter] public int auto { get; set; }
    [Parameter] public int pagina { get; set; }
    [Parameter] public int indiceFiltro { get; set; }
    [Parameter] public int Capitulo { get; set; }
    [Parameter] public int desconto { get; set; }
    [Parameter] public int preferencia { get; set; }
    [Parameter] public string? compartilhante { get; set; }
    public ApplicationDbContext Context =  new ApplicationDbContext(ApplicationDbContext._connectionString);

    protected override async Task OnParametersSetAsync()
    {
        Model = RetornarLista(pagina);
        try
        {
            await js!.InvokeAsync<object>("ConfigurarPaginacao", "1");
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
        StartTimer();
    }

    protected override async Task OnInitializedAsync()
    {
        if (repositoryPagina.paginas!.Count == repositoryPagina.buscarCount())
        {
            var filtros = await Context.Filtro!
            .Include(f => f.Story)
             .Where(f => f.Story.PaginaPadraoLink == Capitulo)
         .OrderBy(f => f.StoryId)
         .OrderBy(f => f.Id)
         .ToListAsync();

            filtro = filtros[indiceFiltro];
            VerificarFiltro(filtro);
        }

    }

    private void VerificarFiltro(Filtro fil)
    {
        if (fil.CamadaDezId != null)
            Model = repositoryPagina.paginas!.First(p => p.CamadaDezId == fil.CamadaDezId).CamadaDez!.Pagina!;
        else if (fil.CamadaNoveId != null)
            Model = repositoryPagina.paginas!.First(p => p.CamadaNoveId == fil.CamadaNoveId).CamadaNove!.Pagina!;
        else if (fil.CamadaOitoId != null)
            Model = repositoryPagina.paginas!.First(p => p.CamadaOitoId == fil.CamadaOitoId).CamadaOito!.Pagina!;
        else if (fil.CamadaSeteId != null)
            Model = repositoryPagina.paginas!.First(p => p.CamadaSeteId == fil.CamadaSeteId).CamadaSete!.Pagina!;
        else if (fil.CamadaSeisId != null)
            Model = repositoryPagina.paginas!.First(p => p.CamadaSeisId == fil.CamadaSeisId).CamadaSeis!.Pagina!;
        else if (fil.SubSubGrupoId != null)
            Model = repositoryPagina.paginas!.First(p => p.SubSubGrupoId == fil.SubSubGrupoId).SubSubGrupo!.Pagina!;
        else if (fil.SubGrupoId != null)
            Model = repositoryPagina.paginas!.First(p => p.SubGrupoId == fil.SubGrupoId).SubGrupo!.Pagina!;
        else if (fil.GrupoId != null)
            Model = repositoryPagina.paginas!.First(p => p.GrupoId == fil.GrupoId).Grupo!.Pagina!;
        else if (fil.SubStoryId != null)
            Model = repositoryPagina.paginas!.First(p => p.SubStoryId == fil.SubStoryId).SubStory!.Pagina!;

    }

    void Clicou(int Versiculo)
    {
        auto = 0;
        navigation.NavigateTo($"/renderizar/{Capitulo}/{Versiculo}/1/11/{compartilhante}/{desconto}");
    }

    private List<Pagina> RetornarLista(int numeroPagina)
    {
        List<Pagina>? applicationDbContext = null;

        if (preco)
            applicationDbContext = lista!
               .OrderBy(p => p.Produto!.Preco)
               .Skip((numeroPagina - 1) * 20)
               .Take(20).ToList();
        else
            applicationDbContext = lista!
               .OrderBy(p => p.Id)
               .Skip((numeroPagina - 1) * 20)
               .Take(20).ToList();

        return applicationDbContext;
    }


    private void StartTimer()
    {
        if (auto == 1)
        {
            Timer!.SetTimer(10000);
            Timer._timer!.Elapsed += _timer_Elapsed;
            Console.WriteLine("Timer Started.");
        }

    }

    private void _timer_Elapsed(object? sender, System.Timers.ElapsedEventArgs e)
    {
        if (auto == 1 && Model!.ToList().Count == 20)
            navigation.NavigateTo($"/lista-filtro/{pagina + 1}/1/{compartilhante}/{Capitulo}/{indiceFiltro}/{desconto}/{preferencia}");
        else if (auto == 1)
            navigation.NavigateTo($"/lista-filtro/1/1/{compartilhante}/{Capitulo}/{indiceFiltro}/{desconto}/{preferencia}");
        else
            navigation.NavigateTo($"/lista-filtro/{pagina}/0/{compartilhante}/{Capitulo}/{indiceFiltro}/{desconto}/{preferencia}");

        Console.WriteLine("Timer Elapsed.");
        Timer!._timer!.Elapsed -= _timer_Elapsed;
    }


}
