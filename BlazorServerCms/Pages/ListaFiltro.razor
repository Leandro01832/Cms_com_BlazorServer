@page "/lista-filtro/{pagina:int}/{compartilhante}/{Capitulo:int}/{indiceFiltro:int}/{IdPergunta:long}"
@page "/marcador/{pagina:int}/{compartilhante}/{Capitulo:int}/{indiceFiltro:int}/{Id:long}"
@inject RepositoryPagina repositoryPagina
@inject Marcacao marcacao
@inject NavigationManager navigation
@inject AuthenticationStateProvider? AuthenticationStateProvider
@inject IJSRuntime js
@layout MeuLayout

<PageTitle>listas de filtro</PageTitle>


@if (IdPergunta == 0)
{
    <BackPage></BackPage>    
    <a onclick="@desmarcar" class="btn btn-primary" >Desmarcar</a>
}

@if (IdPergunta == 0 && marcacao.Marcados.Count > 0)
{ 
    <a onclick="@criarFiltro" class="btn btn-primary" >Criar Filtro</a>
}



<div id="configuracao">
    <p id="livro">www.instagleo.net.br</p>
    <p id="config">
        <strong>
            @if (Model.FirstOrDefault(p => p.Produto != null) != null)
    {
                <a  id="configurar" onclick="@(() => clicou())">Info e Config</a>
            }
            else
            {
                <a  id="configurar" onclick="@(() => clicou())">Config</a>                
            }
        </strong>
    </p>
    
   
    <p id="home">
        <a href="/" class="btn btn-primary">

            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-house" viewBox="0 0 16 16">
                <path d="M8.707 1.5a1 1 0 0 0-1.414 0L.646 8.146a.5.5 0 0 0 .708.708L2 8.207V13.5A1.5 1.5 0 0 0 3.5 15h9a1.5 1.5 0 0 0 1.5-1.5V8.207l.646.647a.5.5 0 0 0 .708-.708L13 5.793V2.5a.5.5 0 0 0-.5-.5h-1a.5.5 0 0 0-.5.5v1.293L8.707 1.5ZM13 7.207V13.5a.5.5 0 0 1-.5.5h-9a.5.5 0 0 1-.5-.5V7.207l5-5 5 5Z" />
            </svg>

        </a>
    </p>

    <p id="lista">
        <strong>
            @{
                if (pagina > 1)
                {
                    <a href="#"
                       onclick="@( () => navigation.NavigateTo($"/lista-filtro/{pagina -1}/{compartilhante}/{Capitulo}/{indiceFiltro}/{IdPergunta}"))">
                        Lista Anterior ||
                    </a>
                }

            }

            <a href="#"
               onclick="@( () => navigation.NavigateTo($"/lista-filtro/{pagina +1}/{compartilhante}/{Capitulo}/{indiceFiltro}/{IdPergunta}"))">
                Proxima lista >>>
            </a>

        </strong>
    </p>
</div>

<div id="cabecalho">   

    @if (Model.FirstOrDefault(p => p.Produto != null) != null)
    {
         <div id="ordenacao">
        <h4>Ordenar</h4>

        <a href="#"
           onclick="@( () => navigation.NavigateTo($"/lista-filtro/{pagina}/nome/1/{Capitulo}/{indiceFiltro}/{IdPergunta}"))">
            Ordenar por nome
        </a>
        <a href="#"
           onclick="@( () => navigation.NavigateTo($"/lista-filtro/{pagina}/preco/1/{Capitulo}/{indiceFiltro}/{IdPergunta}"))">
            Ordenar por preço
        </a>
        <a href="#"
           onclick="@( () => navigation.NavigateTo($"/lista-filtro/{pagina}/descricao/1/{Capitulo}/{indiceFiltro}/{IdPergunta}"))">
            Ordenar por capitulo
        </a>
    </div>
   
        
    <div id="proxima-lista">
        <h3>Tamanho da lista</h3>
        <strong>
            <a href="#"
               onclick="@( () => navigation.NavigateTo($"/lista-filtro/1/{compartilhante}/1/11/{Capitulo}/{indiceFiltro}/{IdPergunta}"))">
                10 itens
            </a>

        </strong>
        <strong>
            <a href="#"
               onclick="@( () => navigation.NavigateTo($"/lista-filtro/1/{compartilhante}/1/41/{Capitulo}/{indiceFiltro}/{IdPergunta}"))">
                40 itens
            </a>

        </strong>
        <strong>
            <a href="#"
               onclick="@( () => navigation.NavigateTo($"/lista-filtro/1/{compartilhante}/1/81/{Capitulo}/{indiceFiltro}/{IdPergunta}"))">
                80 itens
            </a>
        </strong>
        </div>
    }
    else
    {
        <div id="proxima-lista">
            <h3>Tamanho da lista</h3>
            <strong>
                <a href="#"
                   onclick="@( () => navigation.NavigateTo($"/lista-filtro/1/{compartilhante}/1/6/{Capitulo}/{indiceFiltro}/{IdPergunta}"))">
                    5 itens
                </a>

            </strong>
            <strong>
                <a href="#"
                   onclick="@( () => navigation.NavigateTo($"/lista-filtro/1/{compartilhante}/1/11/{Capitulo}/{indiceFiltro}/{IdPergunta}"))">
                    10 itens
                </a>

            </strong>
            <strong>
                <a href="#"
                   onclick="@( () => navigation.NavigateTo($"/lista-filtro/1/{compartilhante}/1/16/{Capitulo}/{indiceFiltro}/{IdPergunta}"))">
                    15 itens
                </a>
            </strong>
        </div>
    }


</div>

<h3>Lista de Filtro</h3>

<a href="#" onclick="@(() => acessarPasta())" style="font-size:22px;">
 Capitulo @Capitulo - Pasta @indiceFiltro
</a>

@if(IdPergunta != 0)
{
    <p style="font-size:30px; background-color:aquamarine;" >@pergunta.Questao</p>
}

@if(filtro != null)
{
    <p> <header>@filtro.Nome</header> </p>
    <a href="/perguntar/@Capitulo/@indiceFiltro" class="btn btn-dark" >Faça uma pergunta sobre @filtro.Nome </a>
}


@{
    if(Model == null || Model.Count == 0)
    {
        <p>Aguarde um momento... quantidade igual a @Model.Count</p>
    }
    else
    {
        <div class="container">

            @if (Model.FirstOrDefault(p => p.Produto != null) != null)
            {
                foreach(var item in Model)
            {
                    var paginaItem = Context.Pagina!.Include(p => p.Produto).ThenInclude(p => p.Imagem).First(p => p.Id == item.Id);
                    var path = paginaItem.Produto!.Imagem!.First().ArquivoImagem;
                        var markup = new MarkupString(item.Content);
                    var largura = paginaItem.Produto!.Imagem!.First().WidthImagem;

            <div class="divs"> 
               
                    @if (item.Content.Contains("ContentIframe"))
                    {
                        <div class="content" >
                            @markup
                        </div>
                    }
                    else
                    {
                         <div class="produto" onclick="cancelar()">
                           
                    
                    <div class="info">
                        <p> Nome: @item.Produto!.Nome </p>
                        <p> Descrição: @item.Produto!.Descricao </p>
                        <p> Preço: @item.Produto!.Preco </p>
                        <p> Estoque: @item.Produto!.QuantEstoque </p>
                    </div>
                               
                                    @if (pergunta != null && item.Versiculo == pergunta.UserResponse.resposta1 || pergunta != null && item.Versiculo == pergunta.UserResponse.resposta2 || pergunta != null && item.Versiculo == pergunta.UserResponse.resposta3 ||
                               pergunta != null && item.Versiculo == pergunta.UserResponse.resposta4 || pergunta != null && item.Versiculo == pergunta.UserResponse.resposta5 || pergunta != null && item.Versiculo == pergunta.UserResponse.resposta6 ||
                               pergunta != null && item.Versiculo == pergunta.UserResponse.resposta7 || pergunta != null && item.Versiculo == pergunta.UserResponse.resposta8 || pergunta != null && item.Versiculo == pergunta.UserResponse.resposta9 ||
                               pergunta != null && item.Versiculo == pergunta.UserResponse.resposta10 ||  marcacao.Marcados.FirstOrDefault(p => p.Versiculo == item.Versiculo) != null)
                                            {
                                                <div class="caps" style="background-color:yellow;">
                                                       <center>
                                                                        Versiculo @item.Versiculo foi marcado
                                                @{
                                                    if(IdPergunta != 0)
                                                    {
                                                
                                                            if (

                                                            item.Versiculo == pergunta.UserResponse.resposta1 && pergunta.UserResponse.exempoloR1 ||
                                                            item.Versiculo == pergunta.UserResponse.resposta2 && pergunta.UserResponse.exempoloR2 ||
                                                            item.Versiculo == pergunta.UserResponse.resposta3 && pergunta.UserResponse.exempoloR3 ||
                                                            item.Versiculo == pergunta.UserResponse.resposta4 && pergunta.UserResponse.exempoloR4 ||
                                                            item.Versiculo == pergunta.UserResponse.resposta5 && pergunta.UserResponse.exempoloR5 ||
                                                            item.Versiculo == pergunta.UserResponse.resposta6 && pergunta.UserResponse.exempoloR6 ||
                                                            item.Versiculo == pergunta.UserResponse.resposta7 && pergunta.UserResponse.exempoloR7 ||
                                                            item.Versiculo == pergunta.UserResponse.resposta8 && pergunta.UserResponse.exempoloR8 ||
                                                            item.Versiculo == pergunta.UserResponse.resposta9 && pergunta.UserResponse.exempoloR9 ||
                                                            item.Versiculo == pergunta.UserResponse.resposta10 && pergunta.UserResponse.exempoloR10 
                                                            )
                                                            {
                                                                <p> como exemplo</p>
                                                            }
                                                            else
                                                            {
                                                                <p> como resposta</p>
                                                
                                                            }
                                                    }
                                           
                                                }
                                               
                                                       </center>
                                                </div>

                                            }
                                    
                                
                                    else
                                    {
                                         <div class="caps" style="background-color:transparent;">
                                               <center>
                                                                Versiculos @item.Versiculo
                                               </center>
                                                @if (IdPergunta == 0)
                                                {
                                                    <p>
                                                        <a onclick="@(() => marcar(item.Versiculo))" class="btn btn-dark">Marcar</a>
                                                    </p>
                                                }
                                        </div>
                                    }
                                    <p>
                        <img src="@path" alt="Imagem do produto" />
                    </p>

                </div>
                        
                    }


                
            </div>
            

        }
                
            }
             else
        {
            @foreach (var item in Model)
            {                   
                    var markup = new MarkupString(item.ContentUser);

                    <div class="divs">
               

                    <div class="conteudo" onclick="cancelar()">
                       
                        
                            
                        <div class="content" style="width:100%; height:auto;" >
                            @markup
                        </div>

                           
                                @if (pergunta != null && item.Versiculo == pergunta.UserResponse.resposta1 || pergunta != null && item.Versiculo == pergunta.UserResponse.resposta2 || pergunta != null && item.Versiculo == pergunta.UserResponse.resposta3 ||
                           pergunta != null && item.Versiculo == pergunta.UserResponse.resposta4 || pergunta != null && item.Versiculo == pergunta.UserResponse.resposta5 || pergunta != null && item.Versiculo == pergunta.UserResponse.resposta6 ||
                           pergunta != null && item.Versiculo == pergunta.UserResponse.resposta7 || pergunta != null && item.Versiculo == pergunta.UserResponse.resposta8 || pergunta != null && item.Versiculo == pergunta.UserResponse.resposta9 ||
                           pergunta != null && item.Versiculo == pergunta.UserResponse.resposta10 || marcacao.Marcados.FirstOrDefault(p => p.Versiculo == item.Versiculo) != null)
                                    {
                                         <div class="caps" style="background-color:yellow;">  
                                            <center>                            
                                                    Versiculo @item.Versiculo foi marcado
                                                            @{
                                                            if (IdPergunta != 0)
                                                                {
                                                                    if (
                                                                    item.Versiculo == pergunta.UserResponse.resposta1   && pergunta.UserResponse.exempoloR1  ||
                                                                    item.Versiculo == pergunta.UserResponse.resposta2   && pergunta.UserResponse.exempoloR2  ||
                                                                    item.Versiculo == pergunta.UserResponse.resposta3   && pergunta.UserResponse.exempoloR3  ||
                                                                    item.Versiculo == pergunta.UserResponse.resposta4   && pergunta.UserResponse.exempoloR4  ||
                                                                    item.Versiculo == pergunta.UserResponse.resposta5   && pergunta.UserResponse.exempoloR5  ||
                                                                    item.Versiculo == pergunta.UserResponse.resposta6   && pergunta.UserResponse.exempoloR6  ||
                                                                    item.Versiculo == pergunta.UserResponse.resposta7   && pergunta.UserResponse.exempoloR7  ||
                                                                    item.Versiculo == pergunta.UserResponse.resposta8   && pergunta.UserResponse.exempoloR8  ||
                                                                    item.Versiculo == pergunta.UserResponse.resposta9   && pergunta.UserResponse.exempoloR9  ||
                                                                    item.Versiculo == pergunta.UserResponse.resposta10  && pergunta.UserResponse.exempoloR10 
                                                                    )
                                                                    {
                                                                        <p> como exemplo</p>
                                                                    }
                                                                    else
                                                                    {
                                                                        <p> como resposta</p>                                                
                                                                    }                                                
                                                                }
                                            

                                                            }
                                            </center>
                                   
                                        </div>

                                    }
                                
                            
                                else
                                {
                                    <div class="caps" style="background-color: transparent;">  
                                    <center>                            
                                            Versiculo @item.Versiculo
                                        @if (IdPergunta == 0)
                                            {
                                                <p>
                                                    <a onclick="@(() => marcar(item.Versiculo))" class="btn btn-dark">Marcar</a>
                                                </p>
                                            }
                                    </center>
                                               
                                    </div>
                                }

                    </div>
                    <br />
                    <hr />
                    <br />
                
            </div>
            }
        }
       
        </div>
    }
}

@code {

    Filtro filtro = new Filtro();
    Pergunta pergunta = null;
    List<Pagina> Model = new List<Pagina>();
    List<Filtro>? filtros { get; set; }
    protected ClaimsPrincipal user;
    private int indiceMarcador;

    [Parameter] public string? compartilhante { get; set; }

    [Parameter] public long Id { get; set; }
    [Parameter] public long IdPergunta{ get; set; }  


    [Parameter] public int pagina { get; set; }
    [Parameter] public int indiceFiltro { get; set; }
    [Parameter] public int Capitulo { get; set; }

    [Parameter] public int? redirecionar { get; set; }
    public string? ordenar { get; set; }
    public int? tamanho { get; set; }
    private DemoContextFactory db = new DemoContextFactory();
    private ApplicationDbContext Context;

    protected override async Task OnParametersSetAsync()
    {
        filtro = filtros[indiceFiltro - 1];

        if(Id == 0)
        {
            VerificarFiltro(filtro);
            Model = await RetornarLista(pagina, ordenar!, (int)tamanho!);

        }
        else
        {
            var m = Context.Filtro.Include(h => h.Pagina).First(h => h.Id == Id);
            Model.AddRange(m.Pagina.Select(p => p.Pagina).ToList()!);
        }
        try
        {
            await js!.InvokeAsync<object>("ConfigurarPaginacao", "1");
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }

    }

    protected override async Task OnInitializedAsync()
    {
        Context = db.CreateDbContext(null);
        filtros = await Context.Filtro!
        .Include(f => f.Pagina)!
        .ThenInclude(f => f.Pagina)
        .ThenInclude(f => f.Produto)
        .Include(f => f.Story)
         .Where(f => f.Story.PaginaPadraoLink == Capitulo)
     .OrderBy(f => f.StoryId)
     .OrderBy(f => f.Id)
     .ToListAsync();

        tamanho = 10;
        ordenar = "teste";

        filtro = filtros[indiceFiltro];
        VerificarFiltro(filtro);

        pergunta = await Context.Pergunta.Include(p => p.UserResponse).FirstOrDefaultAsync(p => p.Id == IdPergunta)!;


        var authState = await AuthenticationStateProvider
                .GetAuthenticationStateAsync();
        user = authState.User;

    }

    private void VerificarFiltro(Filtro fil)
    {
        Model = fil.Pagina!.Select(f => f.Pagina).ToList()!;
    }

    private async Task<List<Pagina>> RetornarLista(int numeroPagina, string ordem, int tamanhoPagina)
    {
        List<Pagina>? applicationDbContext = null;

        @if (Model.FirstOrDefault(p => p.Produto != null) != null)
        {
            if (ordem == "preco")
                applicationDbContext = Model!
                   .OrderBy(p => p.Produto!.Preco)
                   .Skip((numeroPagina - 1) * tamanhoPagina)
                   .Take(tamanhoPagina).ToList();
            else if(ordem == "descricao")
                applicationDbContext = Model!
                   .OrderBy(p => p.Produto!.Descricao)
                   .Skip((numeroPagina - 1) * tamanhoPagina)
                   .Take(tamanhoPagina).ToList();
            else if (ordem == "nome")
                applicationDbContext = Model!
                   .OrderBy(p => p.Produto!.Nome)
                   .Skip((numeroPagina - 1) * tamanhoPagina)
                   .Take(tamanhoPagina).ToList();
            else 
                applicationDbContext = Model!
                   .OrderBy(p => p.Id)
                   .Skip((numeroPagina - 1) * tamanhoPagina)
                   .Take(tamanhoPagina).ToList();            
        }
        else
        {
            applicationDbContext = Model!
                   .OrderBy(p => p.Id)
                   .Skip((numeroPagina - 1) * tamanhoPagina)
                   .Take(tamanhoPagina).ToList();
        }

        foreach(var item in Model)
        {
            if (item.ContentUser != null && item.ContentUser.Contains("iframe"))
            {
                var id = buscarId(item);
                var url = await GetYouTubeVideo(id);
                item.ContentUser = $"<center><img src='{url[0]}' class='ContentIframe' /><p>{url[1]}</p></center>";

            }
            else if (item.Content != null && item.Content.Contains("iframe"))
            {
                var id = buscarId(item);
                var url = await GetYouTubeVideo(id);
                item.Content = $"<center><img src='{url[0]}' class='ContentIframe' /><p>{url[1]}</p></center>";

            }
        }

        return applicationDbContext;
    }

    private void desabilitar()
    {
        navigation.NavigateTo($"/lista-filtro/1/{compartilhante}/{Capitulo}/{indiceFiltro}/{IdPergunta}");
    }

    private void abilitar()
    {
        navigation.NavigateTo($"/lista-filtro/{pagina}/{compartilhante}/{Capitulo}/{indiceFiltro}/{IdPergunta}");
    }

    private void acessarPasta()
    {
        navigation.NavigateTo($"/filtro/{Capitulo}/pasta-{indiceFiltro}/{IdPergunta}/0/0/0/dominio/{compartilhante}");
    }

    private async void clicou()
    {
        await js!.InvokeAsync<object>("Clicou", "1");
    }

    private async Task<string[]> GetYouTubeVideo(string id_video)
    {
        int calculo = 0;
        var youtubeService = new YouTubeService(new BaseClientService.Initializer()
            {
                ApiKey = "",
                ApplicationName = this.GetType().ToString()
            });
        var searchListRequest = youtubeService.Videos.List("snippet,contentDetails,statistics,status");
        searchListRequest.Id = id_video;
        var search = await searchListRequest.ExecuteAsync();
        var p = search.Items[0].Snippet.Thumbnails.Medium;
        var p2 = search.Items[0].Snippet.Title;
        string[] pesquisa = new string[2];
        pesquisa[0] = p.Url;
        pesquisa[1] = p2;


        return pesquisa;
    }

    private  string buscarId(Pagina p)
    {
        var id_video = "";
        if (p != null && p.Content != null && p.Content.Contains("iframe")  ||
                        p != null && p.ContentUser != null && p.ContentUser.Contains("iframe") )
        {
            var conteudoHtml = "";
            if (p.Content != null) conteudoHtml = p.Content;
            else conteudoHtml = p.ContentUser;
            var arr = conteudoHtml!.Split("/");
            for (var index = 0; index < arr.Length; index++)
            {
                if (arr[index] == "embed" && conteudoHtml.Contains("?autoplay="))
                {
                    var text = arr[index + 1];
                    var arr2 = text.Split("?");
                    id_video = arr2[0];
                    break;
                }
                else if (arr[index] == "embed")
                {
                    var text = arr[index + 1];
                    var arr2 = text.Split('"');
                    id_video = arr2[0];
                    break;
                }
            }

        }
        return id_video;
    }

    protected async void marcar(int Versiculo)
    {
        if (!user.Identity!.IsAuthenticated)
        {
            await js!.InvokeAsync<object>("DarAlert", $"Por favor faça login para poder marcar versiculos");
        }
        else
        {
            Pagina p = Context.Pagina.First(p => p.Versiculo == Versiculo && Capitulo == Capitulo);
            marcacao.Marcados.Add(p);

            await js!.InvokeAsync<object>("DarAlert", $"O versiculo {Versiculo} foi marcado com sucesso!!!");
            navigation.NavigateTo($"/lista-filtro/2/{compartilhante}/{Capitulo}/{indiceFiltro}/{IdPergunta}");
            navigation.NavigateTo($"/lista-filtro/1/{compartilhante}/{Capitulo}/{indiceFiltro}/{IdPergunta}");
        }

    }

    protected async void desmarcar()
    {
        if (!user.Identity!.IsAuthenticated)
        {
            await js!.InvokeAsync<object>("DarAlert", $"Por favor faça login para poder desmarcar versiculos");

        }
        else
        {
            marcacao.Marcados.Clear();
            await js!.InvokeAsync<object>("DarAlert", $"Versiculos desmarcados com sucesso.");
            navigation.NavigateTo($"/lista-filtro/1/{compartilhante}/{Capitulo}/{indiceFiltro}/{IdPergunta}");
        }

    }

    private async void criarFiltro()
    {
        string prompted = await js.InvokeAsync<string>("prompt", "Informe o nome do filtro.");

        var type = filtro.GetType();
        Filtro obj = null;
        if(type.Name == "SubStory")
            obj = new Grupo
            {
                Id = 0,                  
                StoryId = filtro.StoryId,
                Nome = prompted,
                user = user.Identity.Name,

            };
        else if (type.Name == "Grupo")
            obj = new SubGrupo
                {
                    Id = 0,
                    StoryId = filtro.StoryId,
                    Nome = prompted,
                    user = user.Identity.Name,
                     GrupoId = filtro.Id

                };
        else if (type.Name == "SubGrupo")
            obj = new SubSubGrupo
                {
                    Id = 0,
                    StoryId = filtro.StoryId,
                    Nome = prompted,
                    user = user.Identity.Name,
                    SubGrupoId = filtro.Id
                };
        else if (type.Name == "SubSubGrupo")
            obj = new CamadaSeis
                {
                    Id = 0,
                    StoryId = filtro.StoryId,
                    Nome = prompted,
                    user = user.Identity.Name,
                    SubSubGrupoId = filtro.Id
                };
        else if (type.Name == "CamadaSeis")
            obj = new CamadaSete
                {
                    Id = 0,
                    StoryId = filtro.StoryId,
                    Nome = prompted,
                    user = user.Identity.Name,
                    CamadaSeisId = filtro.Id
                };
        else if (type.Name == "CamadaSete")
            obj = new CamadaOito
                {
                    Id = 0,
                    StoryId = filtro.StoryId,
                    Nome = prompted,
                    user = user.Identity.Name,
                    CamadaSeteId = filtro.Id
                };
        else if (type.Name == "CamadaOito")
            obj = new CamadaNove
                {
                    Id = 0,
                    StoryId = filtro.StoryId,
                    Nome = prompted,
                    user = user.Identity.Name,
                    CamadaOitoId = filtro.Id
                };
        else if (type.Name == "CamadaNove")
            obj = new CamadaDez
                {
                    Id = 0,
                    StoryId = filtro.StoryId,
                    Nome = prompted,
                    user = user.Identity.Name,

                };
        Context.Add(obj);
        Context.SaveChanges();

        foreach (var item in marcacao.Marcados)
        {
            var mp = new FiltroPagina { PaginaId = item.Id, FiltroId = obj.Id };
            Context.Add(mp);
            Context.SaveChanges();
        }
        repositoryPagina.filtros.Add(obj);

        marcacao.Marcados.Clear();

        filtros = await Context.Filtro!
        .Where(f => f.Story.PaginaPadraoLink == Capitulo)
    .OrderBy(f => f.Id)
    .ToListAsync();

        var f = filtros.First(f => f.Id == obj.Id);
        var i = filtros.IndexOf(f) + 1;

        await js!.InvokeAsync<object>("DarAlert", $"Filtro criado com sucesso pelo usuario!!! ");
        navigation.NavigateTo($"/filtro/{Capitulo}/pasta-{i}/0/0/0/dominio/{compartilhante}");
    }

}
