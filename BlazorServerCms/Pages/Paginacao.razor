@page "/paginacao/{pagina:int}/{ordenar}/{auto:int}/{tempo:int}/{tamanho:int}/{compartilhante}/{desconto:int}"
@inject RepositoryPagina repositoryPagina
@inject BlazorTimer Timer
@inject NavigationManager navigation
@inject IJSRuntime js
@layout MeuLayout

@if(Mensagem != null)
{
    @Mensagem
    <br />
    <a href="" onclick="@Casinha" style="left: 3%;" class="btn btn-primary">Home</a>
}
else
{
    
 <div id="configuracao">
    <p id="livro">livro</p>
    <p id="config">
        <strong>
        <a  href="#" id="configurar" onclick="clicou()" >Info e Config</a>
        </strong>
    </p>
    <p id="automatico" >
        <strong>
            @{
                if(auto == 1)
                {
                    <a  href="#"
                    onclick="@( () => navigation.NavigateTo($"/paginacao/{pagina}/{ordenar}/0/{tempo}/{tamanho}/{compartilhante}/{desconto}"))" >
                    Desabilitar automático
                    </a>
                }
                else
                {
                    <a  href="#"
                    onclick="@( () => navigation.NavigateTo($"/paginacao/{pagina}/{ordenar}/1/{tempo}/{tamanho}/{compartilhante}/{desconto}"))" >
                    Habilitar automático
                    </a>
                }
            }
        
        </strong>
    </p>

    <p id="lista">
        <strong>
            @{
                if(pagina > 1)
                {
                    <a href="#"
                     onclick="@( () => navigation.NavigateTo($"/paginacao/{pagina - 1}/{ordenar}/{auto}/{tempo}/{tamanho}/{compartilhante}/{desconto}"))" >
                     Lista Anterior ||
                     </a> 
                }

            }
                          
                <a href="#"
                onclick="@( () => navigation.NavigateTo($"/paginacao/{pagina + 1}/{ordenar}/{auto}/{tempo}/{tamanho}/{compartilhante}/{desconto}"))" >
                 Proxima lista >>>
                 </a>

        </strong>
            </p>
    </div>

     <div id="cabecalho">
        <div>
            <h4>Logo</h4>

        </div>
        <div id="ordenacao">
            <h4>Ordenar</h4>
           
            <input type="hidden" value="@auto" id="auto" name="auto" > 
            <a href="#" 
            onclick="@( () => navigation.NavigateTo($"/paginacao/nome/1/{tempo}/{tamanho}/{compartilhante}/{desconto}"))" >
            Ordenar por nome</a>
            <a href="#" 
            onclick="@( () => navigation.NavigateTo($"/paginacao/preco/1/{tempo}/{tamanho}/{compartilhante}/{desconto}"))" >
            Ordenar por preço</a>
            <a href="#"
             onclick="@( () => navigation.NavigateTo($"/paginacao/capitulo/1/{tempo}/{tamanho}/{compartilhante}/{desconto}"))" >
            Ordenar por capitulo</a>
        </div>
        <div id="proxima-lista">
            <h3>Tamanho da lista</h3>
            <strong>
            <a href="#" 
            onclick="@( () => navigation.NavigateTo($"/paginacao/capitulo/1/{tempo}/11/{compartilhante}/{desconto}"))" >
            10 itens</a>

            </strong>
            <strong>
            <a href="#" 
            onclick="@( () => navigation.NavigateTo($"/paginacao/capitulo/1/{tempo}/41/{compartilhante}/{desconto}"))" >
            40 itens</a>

            </strong>
            <strong>
            <a href="#"            
            onclick="@( () => navigation.NavigateTo($"/paginacao/capitulo/1/{tempo}/81/{compartilhante}/{desconto}"))" >
            80 itens</a>

            </strong>
            <input type="hidden" value="@tamanho" id="tamanho" name="tamanho" >
        </div>
        <div>
            <label for="tempo" > <strong>Time em segundos (s):</strong> </label>
            <input type="number" @bind-value="tempo" @bind-value:event="oninput" max="600" min="15" >
            

            <br />

            <label for="tempoproduto"> <strong>Time em segundos (s):</strong> </label>
            <input type="number" @bind-value="tempoproduto" @bind-value:event="oninput" max="600" min="5">
            
        </div>

    </div>
    
    <div class="container">

        @foreach (var item in Model!.ToList())
        {

            if (Model!.ToList().IndexOf(item) != 0 )
            {
                var path = item.Produto!.Imagem!.First().ArquivoImagem;
                var largura = item.Produto!.Imagem!.First().WidthImagem;
            var identifica = item.Id;
            List<Pagina> lista = item.Story!.Pagina!.OrderBy(p => p.Id).ToList();
            var Capitulo = item.Story.PaginaPadraoLink;

            var Versiculo = lista.IndexOf(lista.First(l => l.Id == identifica)) + 1;

                void Clicou()
                {
                    auto = 0;
                    navigation.NavigateTo($"/renderizar/{Capitulo}/{Versiculo}/1/{tempoproduto}/{compartilhante}/{desconto}");
                }

                    <div class="produto" onclick="cancelar()">
                        <div class="info">
                            <p> Nome: @item.Produto!.Nome </p>
                        <p> Descrição: @item.Produto!.Descricao </p>
                        <p> Preço: @item.Produto!.Preco </p>
                        <p> Estoque: @item.Produto!.QuantEstoque </p>
                        </div>
                        <div class="caps">
                            <strong>
                                <a href="#" onclick="@Clicou" >
                                Capitulo @Capitulo                        
                                </a> <br>
                                <a href="#" onclick="@Clicou" >                        
                                Versiculo @Versiculo
                                </a>
                            </strong>
                        </div>
                        <a href="#"
                        onclick="@Clicou" >
                        <img src="@path" alt="Imagem do produto"  />

                        </a>

                    </div>
            }
            
        }
    </div>

    <div class="progressbar">
                <div></div>
            </div>
    
}

@code {

    string conexao = "Data Source=DESKTOP-7TI5J9C\\SQLEXPRESS;Initial Catalog=BlazorCms;Integrated Security=True;Connect Timeout=15;Encrypt=False;TrustServerCertificate=False";

    [Parameter] public int? pagina { get; set; } [Parameter] public string? ordenar { get; set; }
    [Parameter] public int? auto { get; set; } [Parameter] public int? tempo { get; set; } = 20;
    [Parameter] public int? tamanho { get; set; } [Parameter] public string? compartilhante { get; set; }
    [Parameter] public int? desconto { get; set; }

    string? Mensagem { get; set; }
    List<Pagina>? Model { get; set; }
    List<Pagina>? lista { get; set; }
    int tempoproduto { get; set; } = 11;


    protected override async Task OnInitializedAsync()
    {
        if (repositoryPagina.paginas!.ToList().Count != repositoryPagina.buscarCount())
        {
            Mensagem = "Aguarde um momento...";
        }

        if(lista == null)
        {
            lista = new List<Pagina>();
            lista.AddRange(repositoryPagina.paginas!.Where(p => p.Produto != null).ToList());
        }

        Model = RetornarLista((int)pagina!, (int)tamanho!, ordenar!);

        try
        {
            await js!.InvokeAsync<object>("ConfigurarPaginacao", "1");
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
        StartTimer();
    }

    protected override async Task OnParametersSetAsync()
    {
        int numeroPagina = (pagina ?? 1);
        Model =  RetornarLista(numeroPagina, (int)tamanho!, ordenar!);
        try
        {
            await js!.InvokeAsync<object>("ConfigurarPaginacao", "1");
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
        StartTimer();
    }

    private List<Pagina> RetornarLista(int numeroPagina, int tamanho, string ordenar)
    {
        List<Pagina>? applicationDbContext = null;
        if(ordenar == "nome")
            applicationDbContext =  lista!
               .OrderBy(p => p.Produto!.Nome)
               .Skip((numeroPagina - 1) * tamanho)
               .Take(tamanho).ToList();
        else
        if(ordenar == "preco")
            applicationDbContext =  lista!
               .OrderBy(p => p.Produto!.Preco)
               .Skip((numeroPagina - 1) * tamanho)
               .Take(tamanho).ToList();
        else
        if(ordenar == "capitulo")
            applicationDbContext = lista!
               .OrderBy(p => p.Story!.PaginaPadraoLink)
               .Skip((numeroPagina - 1) * tamanho)
               .Take(tamanho).ToList();
        else
            applicationDbContext = lista!
               .OrderBy(p => p.Produto!.Nome)
               .Skip((numeroPagina - 1) * tamanho)
               .Take(tamanho).ToList();           

        return applicationDbContext;
    }


    private void StartTimer()
    {
        if(auto == 1)
        {
            Timer!.SetTimer(((int)tempo!) * 1000);
            Timer._timer!.Elapsed += _timer_Elapsed;
            Console.WriteLine("Timer Started.");
        }
        
    }

    private void _timer_Elapsed(object? sender, System.Timers.ElapsedEventArgs e)
    {
        if(auto == 1 && Model!.ToList().Count == tamanho)
            navigation.NavigateTo($"/paginacao/{pagina + 1}/{ordenar}/1/{tempo}/{tamanho}/{compartilhante}/{desconto}");            
        else if(auto == 1)
            navigation.NavigateTo($"/paginacao/1/{ordenar}/1/{tempo}/{tamanho}/{compartilhante}/{desconto}");
        else
            navigation.NavigateTo($"/paginacao/{pagina}/{ordenar}/0/{tempo}/{tamanho}/{compartilhante}/{desconto}");

        Console.WriteLine("Timer Elapsed.");
        Timer!._timer!.Elapsed -= _timer_Elapsed;
    }

    protected void Casinha()
    {
        auto = 0;
        navigation!.NavigateTo("/");
    }

    
}
