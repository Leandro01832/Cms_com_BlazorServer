@page "/pastas/{capitulo:int}/{verso:int}"
@inject RepositoryPagina? repositoryPagina 
@inject NavigationManager navigation
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<IdentityUser> userManager
@layout MeuLayout
<h3>Pastas do versiculo @verso</h3>

<p>@authMessage</p>

@{
    getPastas();

    for (var i = 0; i < pastas.Length; i++)
        if (pastas[i] != 0)
        {
            var filtros = repositoryPagina!.paginas!
            .Where(p => p.Story!.PaginaPadraoLink == capitulo).First().Story!.Filtro!;
            var fil = filtros.OrderBy(f => f.Id).Skip(pastas[i] - 1).First();
            var condicao = saved.FirstOrDefault(f => f.FiltroId == fil.Id);
            <label>
            pasta @pastas[i] - @namePastas[i]
                <a href="#" onclick="@(() => navigation.NavigateTo($"/filtro/{capitulo}/{pastas[i]}/dominio/comp/comp2/0/0/0/0/0/0/0/0/0/0"))" class="btn btn-primary">Acessar</a>
                <a href="#" onclick="@(() => GetClaimsPrincipalData(fil))">
                    @if (condicao != null)
                    {
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-bookmark-fill" viewBox="0 0 16 16">
                            <path d="M2 2v13.5a.5.5 0 0 0 .74.439L8 13.069l5.26 2.87A.5.5 0 0 0 14 15.5V2a2 2 0 0 0-2-2H4a2 2 0 0 0-2 2z" />
                        </svg>
                        
                    }
                    else
                    {
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-bookmark" viewBox="0 0 16 16">
                            <path d="M2 2a2 2 0 0 1 2-2h8a2 2 0 0 1 2 2v13.5a.5.5 0 0 1-.777.416L8 13.101l-5.223 2.815A.5.5 0 0 1 2 15.5V2zm2-1a1 1 0 0 0-1 1v12.566l4.723-2.482a.5.5 0 0 1 .554 0L13 14.566V2a1 1 0 0 0-1-1H4z" />
                        </svg>
                    }
                    
            </a>
            </label>
        }
}

<a href="/renderizar/@capitulo/@verso/1/11/1/dominio/comp/com2" >Voltar</a>

@code {
    private string? authMessage;
    protected int[] pastas = new int[9];
    protected string[] namePastas = new string[9];
    [Parameter] public int capitulo { get; set; }
    [Parameter] public int verso { get; set; }
    public Pagina Model { get; set; }
    private DemoContextFactory db = new DemoContextFactory();
    private ApplicationDbContext Context;

    List<savedFolder> saved = new List<savedFolder>();

    protected override async Task OnInitializedAsync()
    {
        Context = db.CreateDbContext(null);
        var lst = repositoryPagina!.paginas!.Where(p => p.Story!.PaginaPadraoLink == capitulo).ToList();
        Model = lst.Skip((int)verso - 1).FirstOrDefault()!;
        saved = await Context.savedFolder.ToListAsync();
    }

    protected void getPastas()
    {
        for (var i = 0; i < pastas.Length; i++)
            pastas[i] = 0;

        var filtros = repositoryPagina!.paginas!
                        .Where(p => p.Story!.PaginaPadraoLink == capitulo).First().Story!.Filtro!;
        if (Model.SubStoryId != null)
        {
            var fil = filtros.First(f => f.SubStoryId == Model.SubStoryId);
            namePastas[0] = fil.Nome!;
            pastas[0] = filtros.IndexOf(fil) + 1;
        }

        if (Model.GrupoId != null)
        {
            var fil = filtros.First(f => f.GrupoId == Model.GrupoId);
            namePastas[1] = fil.Nome!;
            pastas[1] = filtros.IndexOf(fil) + 1;
        }

        if (Model.SubGrupoId != null)
        {
            var fil = filtros.First(f => f.SubGrupoId == Model.SubGrupoId);
            namePastas[2] = fil.Nome!;
            pastas[2] = filtros.IndexOf(fil) + 1;
        }

        if (Model.SubSubGrupoId != null)
        {
            var fil = filtros.First(f => f.SubSubGrupoId == Model.SubSubGrupoId);
            namePastas[3] = fil.Nome!;
            pastas[3] = filtros.IndexOf(fil) + 1;
        }

        if (Model.CamadaSeisId != null)
        {
            var fil = filtros.First(f => f.CamadaSeisId == Model.CamadaSeisId);
            namePastas[4] = fil.Nome!;
            pastas[4] = filtros.IndexOf(fil) + 1;
        }

        if (Model.CamadaSeteId != null)
        {
            var fil = filtros.First(f => f.CamadaSeteId == Model.CamadaSeteId);
            namePastas[5] = fil.Nome!;
            pastas[5] = filtros.IndexOf(fil) + 1;
        }

        if (Model.CamadaOitoId != null)
        {
            var fil = filtros.First(f => f.CamadaOitoId == Model.CamadaOitoId);
            namePastas[6] = fil.Nome!;
            pastas[6] = filtros.IndexOf(fil) + 1;
        }

        if (Model.CamadaNoveId != null)
        {
            var fil = filtros.First(f => f.CamadaNoveId == Model.CamadaNoveId);
            namePastas[7] = fil.Nome!;
            pastas[7] = filtros.IndexOf(fil) + 1;
        }

        if (Model.CamadaDezId != null)
        {
            var fil = filtros.First(f => f.CamadaDezId == Model.CamadaDezId);
            namePastas[8] = fil.Nome!;
            pastas[8] = filtros.IndexOf(fil) + 1;
        }
    }

    private async Task GetClaimsPrincipalData(Filtro fil)
    {
        var authState = await AuthenticationStateProvider
            .GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity is not null && user.Identity.IsAuthenticated)
        {
            authMessage = $"{user.Identity.Name} esta autenticado.";
            var usuario = await userManager.GetUserAsync(user);
            var save = Context.savedFolder
            .FirstOrDefaultAsync(s => s.FiltroId == fil.Id && s.user == usuario.UserName);
            if (save == null)
            {
                var s = new savedFolder
                    {
                        FiltroId = fil.Id,
                        user = usuario.UserName
                    };
                Context.Add(s);
                await Context.SaveChangesAsync();
                saved.Add(s);
            }
            else
            {
                Context.Remove(Context.savedFolder.First(s => s.FiltroId == fil.Id &&
                    s.user == usuario.UserName));
                  await  Context.SaveChangesAsync();
                saved.Remove(saved.First(s => s.FiltroId == fil.Id &&
                    s.user == usuario.UserName));
            }
        }
        else
        {
            authMessage = "não esta autenticado.";
        }
    }
}
