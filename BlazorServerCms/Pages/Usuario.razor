@page "/{user}"
@page "/{user}/{insta:int}"
@inject UserManager<UserModel> userManager
@inject RepositoryPagina? repositoryPagina
@inject IJSRuntime? js 
@inject NavigationManager navigation
@layout LayoutUsuario


<div>
@if(usermodel != null && usermodel.Dominio != null && usermodel.Permissao)
{
  <center>
            <strong><a href="@usermodel.Dominio"> Meu Livro</a></strong>
        </center> 
    <br />
    <br />
}

<a href="#" onclick="@(() => navigation.NavigateTo($"/alterarFoto/{user}"))" >
<div class="circulo">
    <div class="circulo2">
                @if (usermodel != null && usermodel.Image != null)
        {
            <img src="ImgUser/usuario-@(user)-@(usermodel.Image)" class="ImgUser">
        }
        else
        {
            <img src="ImgUser/padrao.jpg" class="ImgUser">
            
        }
    </div>
</div>
    Alterar foto
    </a>

    <br />
    <br />
    <br />

    <a href="#" onclick="@(() => navigation.NavigateTo($"/alterardominio/{user}"))">
       
        Alterar dominio
    </a>
</div>


<div>


<center><strong>Pastas Salvas</strong> </center>

@if(caps != null)
for(var i = 1; i <= caps.Length; i++)
{
    <p>Capitulo @i</p>
    foreach (var item in filtros.Where(f => f.Story!.PaginaPadraoLink == i).ToList())
    {
            var filtrs = Context.Pagina!.Include(p => p.Story).ThenInclude(p => p.Filtro)
                .Where(p => p.StoryId == item.StoryId).First().Story!.Filtro!;
        var fil = filtrs.First(f => f.Id == item.Id);
        var pasta = filtrs.OrderBy(f => f.Id).ToList().IndexOf(fil) + 1;
       
        <div>
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-bookmark" viewBox="0 0 16 16">
                <path d="M2 2a2 2 0 0 1 2-2h8a2 2 0 0 1 2 2v13.5a.5.5 0 0 1-.777.416L8 13.101l-5.223 2.815A.5.5 0 0 1 2 15.5V2zm2-1a1 1 0 0 0-1 1v12.566l4.723-2.482a.5.5 0 0 1 .554 0L13 14.566V2a1 1 0 0 0-1-1H4z" />
            </svg>
            <span> Pasta @pasta</span>
        </div>
        
    }
    <hr />
}
</div>


@code {
    [Parameter] public string user { get; set; }
    [Parameter] public int? insta { get; set; }
    public int? i;
    private DemoContextFactory db = new DemoContextFactory();
    private ApplicationDbContext Context;
    private List<Filtro> filtros = new List<Filtro>();
    private Livro? livroCompartilhado = null;
    private Estante objInstante = null;
    private int pasta;
    private ClaimsPrincipal usuario;
    private UserResponse preferences = null;
    private UserModel usermodel;
    int[] caps = null;

    protected override async Task OnParametersSetAsync()
    {


        var folders = await Context.savedFolder.Where(s => s.user == user).ToListAsync();
        foreach(var item in folders)
            filtros.Add(await Context.Filtro!
                .Include(f => f.Story)
                .FirstAsync(f => f.Id == item.FiltroId));

        var stories = await Context.Story!.Where(st => st.Nome != "Padrao").ToListAsync();
        caps = new int[stories.Count];
    }

    protected override async Task OnInitializedAsync()
    {
        Context = db.CreateDbContext(null);
        usermodel = await userManager.Users.FirstOrDefaultAsync(u => u.UserName == user);
        livroCompartilhado = await Context.Livro!.Where(u => u.user == user).OrderBy(l => l.Id).FirstOrDefaultAsync();
        if(livroCompartilhado != null)
         preferences = Context.UserResponse
        .FirstOrDefault(u => u.user == user && u.capitulo == livroCompartilhado.capitulo && u.pasta == pasta);
    }

   

}
