@page "/{user}"
@page "/pastas/{user}/{pasta1:int}"
@page "/pastas/{user}/{pasta1:int}/{pasta2:int}"
@page "/pastas/{user}/{pasta1:int}/{pasta2:int}/{pasta3:int}"
@page "/pastas/{user}/{pasta1:int}/{pasta2:int}/{pasta3:int}/{pasta4:int}"
@page "/pastas/{user}/{pasta1:int}/{pasta2:int}/{pasta3:int}/{pasta4:int}/{pasta5:int}"
@page "/pastas/{user}/{pasta1:int}/{pasta2:int}/{pasta3:int}/{pasta4:int}/{pasta5:int}/{pasta6:int}"
@page "/pastas/{user}/{pasta1:int}/{pasta2:int}/{pasta3:int}/{pasta4:int}/{pasta5:int}/{pasta6:int}/{pasta7:int}"
@page "/pastas/{user}/{pasta1:int}/{pasta2:int}/{pasta3:int}/{pasta4:int}/{pasta5:int}/{pasta6:int}/{pasta7:int}/{pasta8:int}"
@page "/pastas/{user}/{pasta1:int}/{pasta2:int}/{pasta3:int}/{pasta4:int}/{pasta5:int}/{pasta6:int}/{pasta7:int}/{pasta8:int}/{pasta9:int}"
@page "/pastas/{user}/{pasta1:int}/{pasta2:int}/{pasta3:int}/{pasta4:int}/{pasta5:int}/{pasta6:int}/{pasta7:int}/{pasta8:int}/{pasta9:int}/{pasta10:int}"
@inject UserManager<IdentityUser> userManager
@inject RepositoryPagina? repositoryPagina
@inject IJSRuntime? js 
@inject NavigationManager navigation
<h3>Usuario</h3>

@if(livroCompartilhado == null)
{
    <h4>Usuario @user não está compartilhando nenhum livro</h4>
}
else
{
    <label>Nº da pasta</label>
    <input type="text" @bind="pasta" placeholder="Nº da pasta" />
    <a href="#" onclick="@(() => navigation.ToAbsoluteUri($"{livroCompartilhado.Livro!.url}/filtro/{livroCompartilhado.Capitulo}/pasta-{pasta}/0/0/{repositoryPagina!.buscarDominio()}/{repositoryPagina!.buscarAdmin()}/{user}/0/0/0/0/0/0/0/0/0/0"))"
       class="btn btn-primary">
        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-search" viewBox="0 0 16 16">
            <path d="M11.742 10.344a6.5 6.5 0 1 0-1.397 1.398h-.001c.03.04.062.078.098.115l3.85 3.85a1 1 0 0 0 1.415-1.414l-3.85-3.85a1.007 1.007 0 0 0-.115-.1zM12 6.5a5.5 5.5 0 1 1-11 0 5.5 5.5 0 0 1 11 0z" />
        </svg>
    </a>
}

<p>
    <a href="/user-book/livros-compartilhados/@user" class="btn btn-dark">
        Livros Compartilhados
    </a>
</p>

@if(caps != null)
for(var i = 1; i <= caps.Length; i++)
{
    <p>Capitulo @i</p>
    foreach (var item in filtros.Where(f => f.Story!.PaginaPadraoLink == i).ToList())
    {
            var filtrs = Context.Pagina!.Include(p => p.Story).ThenInclude(p => p.Filtro)
                .Where(p => p.StoryId == item.StoryId).First().Story!.Filtro!;
        var fil = filtrs.First(f => f.Id == item.Id);
        var pasta = filtrs.OrderBy(f => f.Id).ToList().IndexOf(fil) + 1;
       
        <div>
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-bookmark" viewBox="0 0 16 16">
                <path d="M2 2a2 2 0 0 1 2-2h8a2 2 0 0 1 2 2v13.5a.5.5 0 0 1-.777.416L8 13.101l-5.223 2.815A.5.5 0 0 1 2 15.5V2zm2-1a1 1 0 0 0-1 1v12.566l4.723-2.482a.5.5 0 0 1 .554 0L13 14.566V2a1 1 0 0 0-1-1H4z" />
            </svg>
            <span> Pasta @pasta</span>
        </div>
        
    }
    <hr />
}


@code {
    [Parameter] public string user { get; set; }
    [Parameter] public int? pasta1 { get; set; }
    [Parameter] public int? pasta2 { get; set; }
    [Parameter] public int? pasta3 { get; set; }
    [Parameter] public int? pasta4 { get; set; }
    [Parameter] public int? pasta5 { get; set; }
    [Parameter] public int? pasta6 { get; set; }
    [Parameter] public int? pasta7 { get; set; }
    [Parameter] public int? pasta8 { get; set; }
    [Parameter] public int? pasta9 { get; set; }
    [Parameter] public int? pasta10 { get; set; }
    private DemoContextFactory db = new DemoContextFactory();
    private ApplicationDbContext Context;
    private List<Filtro> filtros = new List<Filtro>();
    private UserBook? livroCompartilhado = null;
    private int pasta;
    int[] caps = null;

    protected override async Task OnParametersSetAsync()
    {
        livroCompartilhado = await Context.UserBook.Include(u => u.Livro).FirstOrDefaultAsync(u => u.user == user);

        var folders = await Context.savedFolder.Where(s => s.user == user).ToListAsync();
        foreach(var item in folders)
            filtros.Add(await Context.Filtro!
                .Include(f => f.Story)
                .FirstAsync(f => f.Id == item.FiltroId));

        var stories = await Context.Story!.Where(st => st.Nome != "Padrao").ToListAsync();
        caps = new int[stories.Count];
    }

    protected override async Task OnInitializedAsync()
    {
        Context = db.CreateDbContext(null);

        if (pasta1 != null)
        {
            Livro[] livros = null;
            int[] caps = null;
            int[] pastas = null;
            UserBook1? livroCompartilhado = await Context.UserBook1.Include(u => u.Livro).FirstOrDefaultAsync(u => u.user == user);
            if (livroCompartilhado != null) { livros = new Livro[1]; caps = new int[1]; }
            UserBook2? livroCompartilhado2 = await Context.UserBook2.Include(u => u.Livro).FirstOrDefaultAsync(u => u.user == user);
            if (livroCompartilhado2 != null) { livros = new Livro[2]; caps = new int[2]; }
            UserBook3? livroCompartilhado3 = await Context.UserBook3.Include(u => u.Livro).FirstOrDefaultAsync(u => u.user == user);
            if (livroCompartilhado3 != null) { livros = new Livro[3]; caps = new int[3]; }
            UserBook4? livroCompartilhado4 = await Context.UserBook4.Include(u => u.Livro).FirstOrDefaultAsync(u => u.user == user);
            if (livroCompartilhado4 != null) { livros = new Livro[4]; caps = new int[4]; }
            UserBook5? livroCompartilhado5 = await Context.UserBook5.Include(u => u.Livro).FirstOrDefaultAsync(u => u.user == user);
            if (livroCompartilhado5 != null) { livros = new Livro[5]; caps = new int[5]; }
            UserBook6? livroCompartilhado6 = await Context.UserBook6.Include(u => u.Livro).FirstOrDefaultAsync(u => u.user == user);
            if (livroCompartilhado6 != null) { livros = new Livro[6]; caps = new int[6]; }
            UserBook7? livroCompartilhado7 = await Context.UserBook7.Include(u => u.Livro).FirstOrDefaultAsync(u => u.user == user);
            if (livroCompartilhado7 != null) { livros = new Livro[7]; caps = new int[7]; }
            UserBook8? livroCompartilhado8 = await Context.UserBook8.Include(u => u.Livro).FirstOrDefaultAsync(u => u.user == user);
            if (livroCompartilhado8 != null) { livros = new Livro[8]; caps = new int[8]; }
            UserBook9? livroCompartilhado9 = await Context.UserBook9.Include(u => u.Livro).FirstOrDefaultAsync(u => u.user == user);
            if (livroCompartilhado9 != null) { livros = new Livro[9]; caps = new int[9]; }
            UserBook10? livroCompartilhado10 = await Context.UserBook10.Include(u => u.Livro).FirstOrDefaultAsync(u => u.user == user);
            if (livroCompartilhado10 != null) { livros = new Livro[10]; caps = new int[10]; }
            if (livroCompartilhado != null) livros[0] = livroCompartilhado.Livro!;
            if (livroCompartilhado2 != null) livros[1] = livroCompartilhado2.Livro!;
            if (livroCompartilhado3 != null) livros[2] = livroCompartilhado3.Livro!;
            if (livroCompartilhado4 != null) livros[3] = livroCompartilhado4.Livro!;
            if (livroCompartilhado5 != null) livros[4] = livroCompartilhado5.Livro!;
            if (livroCompartilhado6 != null) livros[5] = livroCompartilhado6.Livro!;
            if (livroCompartilhado7 != null) livros[6] = livroCompartilhado7.Livro!;
            if (livroCompartilhado8 != null) livros[7] = livroCompartilhado8.Livro!;
            if (livroCompartilhado9 != null) livros[8] = livroCompartilhado9.Livro!;
            if (livroCompartilhado10 != null) livros[9] = livroCompartilhado10.Livro!;
            if (livroCompartilhado != null) caps[0] = livroCompartilhado.Capitulo;
            if (livroCompartilhado2 != null) caps[1] = livroCompartilhado2.Capitulo;
            if (livroCompartilhado3 != null) caps[2] = livroCompartilhado3.Capitulo;
            if (livroCompartilhado4 != null) caps[3] = livroCompartilhado4.Capitulo;
            if (livroCompartilhado5 != null) caps[4] = livroCompartilhado5.Capitulo;
            if (livroCompartilhado6 != null) caps[5] = livroCompartilhado6.Capitulo;
            if (livroCompartilhado7 != null) caps[6] = livroCompartilhado7.Capitulo;
            if (livroCompartilhado8 != null) caps[7] = livroCompartilhado8.Capitulo;
            if (livroCompartilhado9 != null) caps[8] = livroCompartilhado9.Capitulo;
            if (livroCompartilhado10 != null) caps[9] = livroCompartilhado10.Capitulo;
            if (pasta1 != null) pastas = new int[1];
            if (pasta2 != null) pastas = new int[2];
            if (pasta3 != null) pastas = new int[3];
            if (pasta4 != null) pastas = new int[4];
            if (pasta5 != null) pastas = new int[5];
            if (pasta6 != null) pastas = new int[6];
            if (pasta7 != null) pastas = new int[7];
            if (pasta8 != null) pastas = new int[8];
            if (pasta9 != null) pastas = new int[9];
            if (pasta10 != null) pastas = new int[10];
            if (pasta10 != null) pastas[9] = (int)pasta10!;
            if (pasta9 != null) pastas[8] = (int)pasta9!;
            if (pasta8 != null) pastas[7] = (int)pasta8!;
            if (pasta7 != null) pastas[6] = (int)pasta7!;
            if (pasta6 != null) pastas[5] = (int)pasta6!;
            if (pasta5 != null) pastas[4] = (int)pasta5!;
            if (pasta4 != null) pastas[3] = (int)pasta4!;
            if (pasta3 != null) pastas[2] = (int)pasta3!;
            if (pasta2 != null) pastas[1] = (int)pasta2!;
            if (pasta1 != null) pastas[0] = (int)pasta1!;



            if (livroCompartilhado != null)
            {
                string url = "";
                for (var i = 0; i < pastas.Length; i++)
                {
                    if (livros.Length <= pastas.Length && i <= livros.Length)
                    {
                        url = $"{livros[i].url}/filtro/{caps[i]}/pasta-{pastas[i]}/0/{i + 1}/0/{repositoryPagina!.buscarDominio()}/{repositoryPagina.buscarAdmin()}/{user}/0/0/0/0/0/0/0/0/0/0";
                        await js!.InvokeAsync<object>("AcessarSites", url);
                    }

                }


            }
        }
    }
}
