@page "/{user}"
@page "/{user}/{insta:int}"
@inject UserManager<UserModel> userManager
@inject RepositoryPagina? repositoryPagina
@inject IJSRuntime? js 
@inject NavigationManager navigation
@layout LayoutUsuario


<div>
@if(usermodel != null && usermodel.Dominio != null && usermodel.Permissao)
{
  <center>
            <strong><a href="@usermodel.Dominio"> Meu Livro</a></strong>
        </center> 
    <br />
    <br />
}

<a href="#" onclick="@(() => navigation.NavigateTo($"/alterarFoto/{user}"))" >
<div class="circulo">
    <div class="circulo2">
                @if (usermodel != null && usermodel.Image != null)
        {
            <img src="ImgUser/usuario-@(user)-@(usermodel.Image)" class="ImgUser">
        }
        else
        {
            <img src="ImgUser/padrao.jpg" class="ImgUser">
            
        }
    </div>
</div>
    Alterar foto
    </a>

    <br />
    <br />
    @if(usermodel != null)
     {
        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-coin" viewBox="0 0 16 16">
            <path d="M5.5 9.511c.076.954.83 1.697 2.182 1.785V12h.6v-.709c1.4-.098 2.218-.846 2.218-1.932 0-.987-.626-1.496-1.745-1.76l-.473-.112V5.57c.6.068.982.396 1.074.85h1.052c-.076-.919-.864-1.638-2.126-1.716V4h-.6v.719c-1.195.117-2.01.836-2.01 1.853 0 .9.606 1.472 1.613 1.707l.397.098v2.034c-.615-.093-1.022-.43-1.114-.9zm2.177-2.166c-.59-.137-.91-.416-.91-.836 0-.47.345-.822.915-.925v1.76h-.005zm.692 1.193c.717.166 1.048.435 1.048.91 0 .542-.412.914-1.135.982V8.518z" />
            <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14m0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16" />
            <path d="M8 13.5a5.5 5.5 0 1 1 0-11 5.5 5.5 0 0 1 0 11m0 .5A6 6 0 1 0 8 2a6 6 0 0 0 0 12" />
        </svg>
        <p>Insta Golds:    @usermodel.Recorde </p>
     }
    <br />
    <br />

    <a href="#" onclick="@(() => navigation.NavigateTo($"/alterardominio/{user}"))">
       
        Alterar dominio
    </a>
</div>


<div>
    <h3>Seguidores</h3>
    @if(seguidores != null)
    @foreach(var item in seguidores)
    {
        var seguidor =  userManager.Users.First(u => u.UserName == item.seguidor);
        <div>
            <img src="ImgUser/usuario-@(item.seguidor)-@(seguidor.Image)" class="ImgUser">
            <p>@item.seguidor</p>
        </div>
    }




    <h3>Seguindo</h3>
    @if (seguindo != null)
    @foreach (var item in seguindo)
    {
        var seguindo = userManager.Users.First(u => u.UserName == item.seguindo);
        <div>
            <img src="ImgUser/usuario-@(item.seguindo)-@(seguindo.Image)" class="ImgUser">
            <p>@item.seguindo</p>
        </div>
    }

</div>

<div>


<center><strong>Pastas Salvas</strong> </center>

@if(caps != null)
for(var i = 1; i <= caps.Length; i++)
{
    <p>Capitulo @i</p>
    foreach (var item in filtros.Where(f => f.Story!.PaginaPadraoLink == i).ToList())
    {
            var filtrs = Context.Pagina!.Include(p => p.Story).ThenInclude(p => p.Filtro)
                .Where(p => p.StoryId == item.StoryId).First().Story!.Filtro!;
        var fil = filtrs.First(f => f.Id == item.Id);
        var pasta = filtrs.OrderBy(f => f.Id).ToList().IndexOf(fil) + 1;
       
        <div>
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-bookmark" viewBox="0 0 16 16">
                <path d="M2 2a2 2 0 0 1 2-2h8a2 2 0 0 1 2 2v13.5a.5.5 0 0 1-.777.416L8 13.101l-5.223 2.815A.5.5 0 0 1 2 15.5V2zm2-1a1 1 0 0 0-1 1v12.566l4.723-2.482a.5.5 0 0 1 .554 0L13 14.566V2a1 1 0 0 0-1-1H4z" />
            </svg>
            <span> Pasta @pasta</span>
        </div>
        
    }
    <hr />
}
</div>


@code {
    [Parameter] public string user { get; set; }
    [Parameter] public int? insta { get; set; }
    public int? i;
    private DemoContextFactory db = new DemoContextFactory();
    private ApplicationDbContext Context;
    private List<Filtro> filtros = new List<Filtro>();
    private List<Segue> seguidores;
    private List<Segue> seguindo;
    private Livro? livroCompartilhado = null;
    private Estante objInstante = null;
    private int pasta;
    private ClaimsPrincipal usuario;
    private UserResponse preferences = null;
    private UserModel usermodel;
    int[] caps = null;

    protected override async Task OnParametersSetAsync()
    {


        var folders = await Context.savedFolder.Where(s => s.user == user).ToListAsync();
        foreach(var item in folders)
            filtros.Add(await Context.Filtro!
                .Include(f => f.Story)
                .FirstAsync(f => f.Id == item.FiltroId));

        var stories = await Context.Story!.Where(st => st.Nome != "Padrao").ToListAsync();
        caps = new int[stories.Count];
    }

    protected override async Task OnInitializedAsync()
    {
        Context = db.CreateDbContext(null);
        usermodel = await userManager.Users.FirstOrDefaultAsync(u => u.UserName == user);
        livroCompartilhado = await Context.Livro!.Where(u => u.user == user).OrderBy(l => l.Id).FirstOrDefaultAsync();
        if(livroCompartilhado != null)
            preferences = Context.UserResponse
           .FirstOrDefault(u => u.user == user && u.capitulo == livroCompartilhado.capitulo && u.pasta == pasta);
        seguidores = await Context.Segue.Where(s => s.seguindo == user).ToListAsync();
        seguindo = await Context.Segue.Where(s => s.seguidor == user).ToListAsync();
    }

   

}
