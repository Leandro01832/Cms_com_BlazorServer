@page "/vitrine/{capitulo:int}/{indiceFiltro:int}/{auto:int}"
@inject RepositoryPagina repositoryPagina
@inject BlazorTimer Timer
@inject NavigationManager navigation
@inject IJSRuntime? js
@attribute [Authorize(Roles = "Admin")]
@layout MeuLayout
<h3>Vitrine</h3>
<PageTitle>Vitrine</PageTitle>

<p>O livro é @repositoryPagina.buscarDominio()</p>
<a href="/" onclick="@(() => voltarHome())" class="btn btn-primary">
    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-house" viewBox="0 0 16 16">
        <path d="M8.707 1.5a1 1 0 0 0-1.414 0L.646 8.146a.5.5 0 0 0 .708.708L2 8.207V13.5A1.5 1.5 0 0 0 3.5 15h9a1.5 1.5 0 0 0 1.5-1.5V8.207l.646.647a.5.5 0 0 0 .708-.708L13 5.793V2.5a.5.5 0 0 0-.5-.5h-1a.5.5 0 0 0-.5.5v1.293L8.707 1.5ZM13 7.207V13.5a.5.5 0 0 1-.5.5h-9a.5.5 0 0 1-.5-.5V7.207l5-5 5 5Z" />
    </svg>

</a>
<a href="/vitrine/@capitulo/@indiceFiltro/0" class="btn btn-primary">
    desabilitar automatico

</a>

@if (filtrosPorCap.Count > 0)
{
    <p>
        Capitulo @retornarCap(filtrosPorCap[indiceFiltro]) -
        Pasta @retornarPasta(filtrosPorCap[indiceFiltro]) - @filtrosPorCap[indiceFiltro].Nome
    </p>
    <div class="container">
        @{

            @foreach (var item in Model!.ToList())
            {
                foreach (var item2 in item.Produto)
                {


                    var paginaItem = Context.Pagina!.First(p => p.Id == item.Id);
                        var path = item2.Produto!.Imagem!.First().ArquivoImagem;
                        var largura = item2.Produto!.Imagem!.First().WidthImagem;
                    var identifica = item2.Produto.Id;
                    List<Content> lista = item2.Content.Story!.Pagina!.OrderBy(p => p.Id).ToList();
                    var Capitulo = paginaItem.Story.Capitulo;

                    var Versiculo = lista.IndexOf(lista.First(l => l.Id == identifica)) + 1;

                    <div class="produto" onclick="cancelar()">
                        <div class="info">
                              <p> Nome: @item2.Produto!.Nome </p>
                                <p> Descrição: @item2.Produto!.Descricao </p>
                                <p> Preço: @item2.Produto!.Preco </p>
                                <p> Estoque: @item2.Produto!.QuantEstoque </p> 
                        </div>
                        <div class="caps">
                            <strong>
                                Capitulo @Capitulo
                                <br>
                                Versiculo @Versiculo

                            </strong>
                        </div>
                        <img src="" alt="Imagem do produto" />

                    </div>
                }

            }
        }
    </div>

}

@code {
    List<Filtro> filtrosPorCap = new List<Filtro>();
    List<Content> Model = new List<Content>();
    [Parameter] public int indiceFiltro { get; set; }
    [Parameter] public int capitulo { get; set; }
    [Parameter] public int auto { get; set; }
    private DemoContextFactory db = new DemoContextFactory();
    private ApplicationDbContext Context;



    protected override void OnParametersSet()
    {
        StartTimer();
    }

    protected override async Task OnInitializedAsync()
    {
        repositoryPagina.exibir = true;
        Context = db.CreateDbContext(null);
        indiceFiltro = 0;
        capitulo = 1;

        filtrosPorCap = Context.Pagina!
        .Include(p => p.Story)
        .ThenInclude(p => p.Filtro)!
        .ThenInclude(p => p.Pagina)!
        .ThenInclude(p => p.Content)
        .Where(p => p.Story!.Capitulo == capitulo)
                   .First().Story!.Filtro!.OrderBy(f => f.Id).ToList();


        if (indiceFiltro >= filtrosPorCap.Count)
            indiceFiltro = 0;
        VerificarFiltro(filtrosPorCap[indiceFiltro]);
    }

    private int retornarCap(Filtro fil)
    {
        return Context.Pagina!.Include(p => p.Story)
        .First(p => p.StoryId == fil.StoryId).Story!.Capitulo;
    }

    private int retornarPasta(Filtro fil)
    {
        var filtros = Context.Pagina!.Include(p => p.Story).ThenInclude(p => p.Filtro)
        .First(p => p.StoryId == fil.StoryId).Story!.Filtro;
        var f = filtros!.First(fi => fi.Id == fil.Id);
        return filtros!.IndexOf(f) + 1;
    }

    private async void VerificarFiltro(Filtro fil)
    {
        Model = fil.Pagina!.Select(f => f.Content).ToList()!;

        List<Content> lista = new List<Content>();
        foreach (var item in Model)
        {
            var p = Context.Pagina!.First(p => p.Id == item.Id);
            lista.Add(p);
        }

        Model = lista.OrderBy(p => p.Id).ToList();
    }


    private void StartTimer()
    {
        Timer!.SetTimerVitrine(30000);
        Timer._timerVitrine!.Elapsed += _timer_Elapsed;
        Console.WriteLine("Timer Started.");
    }

    private void _timer_Elapsed(object? sender, System.Timers.ElapsedEventArgs e)
    {
        try
        {
            if (auto == 1)
            {
                if (indiceFiltro + 1 > filtrosPorCap.Count)
                    navigation.NavigateTo($"/vitrine/{capitulo + 1}/0/1");
                else
                    navigation.NavigateTo($"/vitrine/{capitulo}/{indiceFiltro + 1}/1");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("Erro: " + ex.Message);
        }
        Console.WriteLine("Timer Elapsed.");
        Timer!._timerVitrine!.Elapsed -= _timer_Elapsed;
    }

    private void voltarHome()
    {
        navigation.NavigateTo($"/vitrine/{capitulo}/{indiceFiltro}/0");
        navigation.NavigateTo($"/");
    }

}
