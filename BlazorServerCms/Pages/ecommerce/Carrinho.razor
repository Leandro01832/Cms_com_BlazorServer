@page "/carrinho/{codigo:long}/{capitulo:int}/{verso:int}/{dominio}/{compartilhante}/{compartilhante2}"

<h3>Carrinho</h3>

<h3>Meu Carrinho</h3>



<div class="row">
    <div class="col-md-12">
        <div class="pull-right">
            <a href="/renderizar/@capitulo/@verso/1/11/1/@dominio/@compartilhante/compartilhante2">Adicionar produtos</a>
            <a href="/cadastro/@capitulo/@verso/@dominio/@compartilhante/@compartilhante2">Preencher Cadastro</a>

        </div>
    </div>
</div>
<br />
<div class="panel panel-default">
    <div class="panel-heading">

        <div class="row">
            <div class="col-md-6">
                Item
            </div>
            <div class="col-md-2 text-center">
                Preço Unitário
            </div>
            <div class="col-md-2 text-center">
                Quantidade
            </div>
            <div class="col-md-2">
                <span class="pull-right">
                    Subtotal
                </span>
            </div>
        </div>
    </div>
    <div class="panel-body">

        @foreach (var item in Model.Itens)
        {
            <div class="row row-center linha-produto" item-id="@item.ProdutoId">
                <div class="col-md-3">
                    <img class="img-produto-carrinho" src="/images/produtos/large_@(item.ProdutoId).jpg" />
                </div>
                <div class="col-md-3">@(item.Produto!.Nome)</div>
                <div class="col-md-2 text-center">R$ @(item.PrecoUnitario)</div>
                <div class="col-md-2 text-center">
                    <div class="input-group">
                        <span class="input-group-btn">
                            <button class="btn btn-default"
                                    onclick="@((EventCallback e) => clickDecremento(e, item.Produto!))">
                                <span class="glyphicon-minus"></span>
                            </button>
                        </span>
                        <input type="text" value="@(item.Quantidade)"
                               class="form-control text-center"
                               onblur="@((EventCallback e) => updateQuantidade(e, item.Produto! ))" />
                        <span class="input-group-btn">
                            <button class="btn btn-default"
                                    onclick="@((EventCallback e) => clickIncremento(e, item.Produto! ))">
                                <span class="glyphicon-plus"></span>
                            </button>
                        </span>
                    </div>
                </div>
                <div class="col-md-2">
                    R$ <span class="pull-right" subtotal>
                        @(item.Quantidade * item.PrecoUnitario)
                    </span>
                </div>
            </div>

        }

    </div>
    <div class="panel-footer">
        <div class="row">
            <div class="col-md-10">
                <span class="numero-itens">
                    Total: @(Model.Itens.Count())
                    itens
                </span>
            </div>
            <div class="col-md-2">
                Total: R$ <span class="pull-right" total>
                   
                </span>
            </div>
        </div>
    </div>
</div>

<div class="row">
    <div class="col-md-12">
        <div class="pull-right">
            <a href="/renderizar/@capitulo/@verso/1/11/1/@dominio/@compartilhante/compartilhante2">Adicionar produtos</a>
            <a href="/cadastro/@capitulo/@verso/@dominio/@compartilhante/@compartilhante2">Preencher Cadastro</a>
        </div>
    </div>
</div>

@code {

    [Parameter] public long? codigo { get; set; }
    [Parameter] public int? capitulo { get; set; }
    [Parameter] public int? verso { get; set; }
    [Parameter] public string? dominio { get; set; }
    [Parameter] public string? compartilhante { get; set; }
    [Parameter] public string? compartilhante2 { get; set; }
    private DemoContextFactory db = new DemoContextFactory();
    private ApplicationDbContext Context;
    private Pedido Model;

    protected override async Task OnParametersSetAsync()
    {
        Context = db.CreateDbContext(null);
        Model = await Context.Pedido!
        .Include(p => p.Itens)
        .FirstAsync(p => p.Id == codigo);
    }

    private void clickIncremento(EventCallback e, Produto prod)
    {
        
    }

    private void clickDecremento(EventCallback e, Produto prod)
    {

    }

    private void updateQuantidade(EventCallback e, Produto prod)
    {

    }

}
