@page "/carrinho/{codigo:long}/{compartilhou}/{compartilhante}/{compartilhante2}/{compartilhante3}/{compartilhante4}/{compartilhante5}/{compartilhante6}"
@inject AuthenticationStateProvider AuthenticationStateProvider
@attribute [Authorize]
<h3>Carrinho</h3>

<h3>Meu Carrinho</h3>



<div class="row">
    <div class="col-md-12">
        <div class="pull-right">
            <BackPage></BackPage>
            <a href="/cadastro/@ped!.Id/@compartilhou/@compartilhante/@compartilhante2/@compartilhante3/@compartilhante4/@compartilhante5/@compartilhante6">Preencher Cadastro</a>

        </div>
    </div>
</div>
<br />
<div class="panel panel-default">
    <div class="panel-heading">

        <div class="row">
            <div class="col-md-6">
                Item
            </div>
            <div class="col-md-2 text-center">
                Preço Unitário
            </div>
            <div class="col-md-2 text-center">
                Quantidade
            </div>
            <div class="col-md-2">
                <span class="pull-right">
                    Subtotal
                </span>
            </div>
        </div>
    </div>
    <div class="panel-body">

        @foreach (var item in Model.Itens)
        {
            <div class="row row-center linha-produto" item-id="@item.ProdutoId">
                <div class="col-md-3">
                    <img class="img-produto-carrinho" src="/images/produtos/large_@(item.ProdutoId).jpg" />
                </div>
                <div class="col-md-3">@(item.Produto!.Nome)</div>
                <div class="col-md-2 text-center">R$ @(item.PrecoUnitario)</div>
                <div class="col-md-2 text-center">
                    <div class="input-group">
                        <span class="input-group-btn">
                            <button class="btn btn-default"
                                    onclick="@((ChangeEventArgs e) => clickDecremento(e, item))">
                                <span class="glyphicon-minus"></span>
                            </button>
                        </span>
                        <input type="number" @bind="item.Quantidade"
                               class="form-control text-center"
                               onblur="@((ChangeEventArgs e) => updateQuantidade(e, item ))" />
                        <span class="input-group-btn">
                            <button class="btn btn-default"
                                    onclick="@((ChangeEventArgs e) => clickIncremento(e, item ))">
                                <span class="glyphicon-plus"></span>
                            </button>
                        </span>
                    </div>
                </div>
                <div class="col-md-2">
                    R$ <span class="pull-right" subtotal>
                        @(item.Quantidade * item.PrecoUnitario)
                    </span>
                </div>
            </div>

        }

    </div>
    <div class="panel-footer">
        <div class="row">
            <div class="col-md-10">
                <span class="numero-itens">
                    Total: @(Model.Itens.Count())
                    itens
                </span>
            </div>
            <div class="col-md-2">
                Total: R$ <span class="pull-right" total>
                    @(Model.Total)
                </span>
            </div>
        </div>
    </div>
</div>

<div class="row">
    <div class="col-md-12">
        <div class="pull-right">
            <BackPage></BackPage>
            <a href="/cadastro/@ped!.Id/@compartilhou/@compartilhante/@compartilhante2/@compartilhante3/@compartilhante4/@compartilhante5/@compartilhante6">Preencher Cadastro</a>
        </div>
    </div>
</div>

@code {

    [Parameter] public long? codigo { get; set; }
    [Parameter] public string? compartilhou { get; set; }
    [Parameter] public string? compartilhante { get; set; }
    [Parameter] public string? compartilhante2 { get; set; }
    [Parameter] public string? compartilhante3 { get; set; }
    [Parameter] public string? compartilhante4 { get; set; }
    [Parameter] public string? compartilhante5 { get; set; }
    [Parameter] public string? compartilhante6 { get; set; }
    private DemoContextFactory db = new DemoContextFactory();
    private ApplicationDbContext Context;
    private CarrinhoViewModel Model;
    private Pedido? ped;

    protected override async Task OnParametersSetAsync()
    {
        Context = db.CreateDbContext(null);

        var authState = await AuthenticationStateProvider
            .GetAuthenticationStateAsync();
        var user = authState.User;
        Cliente cli = Context.Cliente.First(c => c.UserName == user.Identity!.Name);

         ped = await Context.Pedido!.LastOrDefaultAsync(c => c.ClienteId == cli.Id && c.Status == null);

        if(ped == null)
        {
            ped = new Pedido(cli.Id);
            Context.Add(ped);
            Context.SaveChanges();
        }

        var produto = await
                            Context.Set<Produto>()
                            .Where(p => p.Id == codigo)
                            .SingleOrDefaultAsync();

        if (produto == null)
        {
            throw new ArgumentException("Produto não encontrado");
        }


        var itemPedido = await
                            Context.Set<ItemPedido>()
                            .Where(i => i.Produto.Id == codigo
                                    && i.Pedido.Id == ped.Id)
                            .SingleOrDefaultAsync();

        if (itemPedido == null)
        {
            itemPedido = new ItemPedido(ped, produto, 1, produto.Preco);
            Context.Set<ItemPedido>().Add(itemPedido);
            await Context.SaveChangesAsync();
        }
        List<ItemPedido> itens = ped.Itens;
        Model = new CarrinhoViewModel(itens);

    }

    private void clickIncremento(ChangeEventArgs e, ItemPedido item)
    {
        atualizar(item.Id, e);
    }

    private void clickDecremento(ChangeEventArgs e, ItemPedido item)
    {
        atualizar(item.Id, e);
    }

    private void updateQuantidade(ChangeEventArgs e, ItemPedido item)
    {
        atualizar(item.Id, e);
    }

    private async void atualizar(long id, ChangeEventArgs e)
    {
        var item =  await Context.Set<ItemPedido>()
                 .Where(ip => ip.Id == id)
                 .SingleOrDefaultAsync();

        if(item != null)
        {
            item.AtualizaQuantidade(int.Parse(e.Value.ToString()));

            if(item.Quantidade == 0)
            {
                Context.Set<ItemPedido>().Remove(item);
            }

            await Context.SaveChangesAsync();

           var ped = await  Context.Set<Pedido>().Include(i => i.Itens)
                           .Where(i => i.Id == item.Pedido!.Id)
                           .SingleOrDefaultAsync();

            Model = new CarrinhoViewModel(ped.Itens);
        }
    }

}
